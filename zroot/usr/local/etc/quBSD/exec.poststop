#!/bin/sh

. /usr/local/lib/quBSD/quBSD.sh

get_parameters() {
	JAIL="$1"
	IF_ERR="get_msg_qubsd"
	DEFAULTS="true"

	# get_jail_parameter conducts all necessary checks for the parameter
	get_jail_parameter class    "$JAIL" "$IF_ERR" "$DEFAULTS"  ||  exit 1
	get_jail_parameter rootjail "$JAIL" "$IF_ERR" "$DEFAULTS"  ||  exit 1

	# rootsnap relies on the fact that zfs lists snapshots chronologically
	ROOTSNAP=$(zfs list -t snapshot -Ho name ${JAILS_ZFS}/${ROOTJAIL} | tail -1)
	JMOUNT1=$(mount | egrep -o "${M_JAILS}/${JAIL}/[[:alnum:]]+")
	JMOUNT2=$(mount | egrep -o "^${M_ZUSR}/${JAIL}/[^[:blank:]]+")
}

unmount_lingering() {
	[ -e "${M_ZUSR}/${JAIL}/rw/etc/fstab" ] \
			&& umount -a -F ${M_ZUSR}/${JAIL}/rw/etc/fstab > /dev/null 2>&1
	[ -n "$JMOUNT1" ] && echo "$JMOUNT1" | xargs umount -f > /dev/null 2>&1
	[ -n "$JMOUNT2" ] && echo "$JMOUNT2" | xargs umount -f > /dev/null 2>&1 

	# Ensures that any pefs mounts are completely removed (thus the data is re-encrypted
	qb-pefs -u $JAIL
}

reclone_appjail() {

	# Check the dataset exists, and destroy it
	zfs list "${JAILS_ZFS}/${JAIL}" > /dev/null 2>&1 \
			&& zfs destroy -rRf "${JAILS_ZFS}/${JAIL}"

	# Recone the rootjail, and make sure that the clone isn't set to autosnap
	zfs clone $ROOTSNAP "${JAILS_ZFS}/$JAIL"
	zfs set qubsd:autosnap=- "${JAILS_ZFS}/$JAIL"

	# Add user and group to freshly cloned rootjail
	pw -V ${M_JAILS}/${JAIL}/etc/ \
			useradd -n $JAIL -u 1001 -d /usr/home/${JAIL} -s /bin/csh 2>&1
}

reclone_dispjail() {
	# template and homesnap are needed to clone dispjail
	get_jail_parameter template "$JAIL" "$IF_ERR" "DEFAULTS" || exit 1
	HOMESNAP=$(zfs list -t snapshot -Ho name ${ZUSR_ZFS}/${TEMPLATE} | tail -1)

	# Check the dataset exists, and destroy it 
	zfs list "${ZUSR_ZFS}/${JAIL}" > /dev/null 2>&1 \
			&& zfs destroy -rRf ${ZUSR_ZFS}/${JAIL}  

	# Reclone the rootjail, and make sure that it's not set to autosnap
	zfs clone "${HOMESNAP}" "${ZUSR_ZFS}/${JAIL}"
	zfs set qubsd:autosnap=- "${ZUSR_ZFS}/$JAIL"

	# Remove schg flags (if inherited from clones) to modify new snap
	chflags -R noschg ${M_ZUSR}/${JAIL}

	# Rename directories and mounts with dispjail name 
	[ -e ${M_ZUSR}/${JAIL}/usr/home/${TEMPLATE} ] && \
			mv ${M_ZUSR}/${JAIL}/usr/home/${TEMPLATE} ${M_ZUSR}/${JAIL}/usr/home/${JAIL}
	
	# Replace the <template> jailname in fstab with the new <jail> (dispjail)	
	sed -i '' -e "s/${TEMPLATE}/${JAIL}/g" ${M_ZUSR}/${JAIL}/rw/etc/fstab
}

set_rootjail_schg() {
	# Protects rootjails from being modified while not in use
	chflags -R schg "${M_JAILS}/${JAIL}" > /dev/null 2>&1
}

main() {
	# Occassionally jail mounts linger and cause problems later 
	unmount_lingering

	# appjail's root filesystems are immediately destroyed and recloned
	[ "$CLASS" == "rootjail" ] && set_rootjail_schg || reclone_appjail  

	# dispjails root filesystem and /zusr data are destroyed and recloned 
	if [ "$CLASS" == "dispjail" ] ; then 
		reclone_dispjail        
		# NOTE: /bin/sh fails if last command looks like:  `[ test ] && cmd`
	fi
}

get_global_variables

get_parameters "$@"

main

