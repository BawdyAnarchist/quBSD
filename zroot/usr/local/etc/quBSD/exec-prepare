#!/bin/sh

. /usr/local/lib/quBSD/quBSD.sh

get_parameters() {
	# Define script variables
	JAIL="$1"
	echo "$(date "+%Y-%m-%d_%H:%M") exec-prepare: STARTING: $JAIL" >> $QBLOG ${QBLOG}_$JAIL

	# Parameters and checks
	get_jail_parameter CLASS   "$JAIL"    || get_msg2 -Em _e
	get_jail_parameter ROOTENV "$JAIL"    || get_msg2 -Em _e
	get_jail_parameter -d GATEWAY "$JAIL" || get_msg2 -Em _e
	get_jail_parameter -d CONTROL "$JAIL" || get_msg2 -Em _e

	# Get all mounts related to the root mount: /qubsd/JAIL
	JMOUNT=$(mount | grep -Eo "${M_QROOT}/${JAIL}/[^[:blank:]]+")
}

preparation_actions() {
	# Sometimes bridge module unloads
	kldload -n if_bridge

	# The control jail should always be on. The function will return immediately if already on
	[ ! "$CLASS" = "cjail" ] && start_jail "$CONTROL"

	# MUST redirect to null, otherwise VM here will hang the script .. coz .. file descriptors?
	start_jail "$GATEWAY" > /dev/null 2>&1

	# Double check to unmount any parts of <jail> before destroy/recreating the dataset
	[ -n "$JMOUNT" ] && echo "$JMOUNT" | xargs umount -f
}

handle_fstab() {
	# Use the JAIL's fstab to create the directories necessary for mountpoints
	_DIRS=$(tail -n +2 ${M_ZUSR}/${JAIL}/rw/etc/fstab | awk '!/^[[:blank:]]*#/{print $2}')

	for _dir in $_DIRS ; do
		[ -d "$_dir" ] || mkdir -p $_dir > /dev/null 2>&1
	done

	# Manually mount, caz `jail` expects any fstab in jail.conf to exist, before exec-prepare
	mount -aF ${M_ZUSR}/${JAIL}/rw/etc/fstab
}

main() {
	# Misc things to do/check before recloning the datasets
	preparation_actions

	case $CLASS in
		appjail|cjail)
			# Make sure the zusr dataset is mounted. [-l load-key] for encrypted datasets
			[ ! "$(zfs list -Ho mounted ${U_ZFS}/${JAIL})" = "yes" ] \
				&& zfs mount -l ${U_ZFS}/${JAIL}

			# Reclone the root filesystem for JAIL
			reclone_zroot "$JAIL" "$ROOTENV" || get_msg2 -Em _e2 "$JAIL" "$ROOTENV"
		;;
		dispjail)
			# Reclone the root filesystem for JAIL
			reclone_zroot "$JAIL" "$ROOTENV" || get_msg2 -Em _e2 "$JAIL" "$ROOTENV"

			# Dispjails also reclone the zusr portion from template (if it exists)
			get_jail_parameter -d TEMPLATE "$JAIL" || get_msg2 -Em _e
			chk_valid_zfs "${U_ZFS}/${TEMPLATE}" && reclone_zusr "$JAIL" "$TEMPLATE" \
				|| get_msg2 -Em _e1_4 "$JAIL" "$TEMPLATE"
		;;
	esac

	handle_fstab

	return 0
}

get_global_variables

get_parameters "$@"

main

exit 0
