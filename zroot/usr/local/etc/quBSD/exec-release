#!/bin/sh

. /usr/local/lib/quBSD/quBSD.sh

get_parameters() {
	JAIL="$1"
	# Get jail parameters.
	get_jail_parameter CLASS   "$JAIL" || get_msg2 -Em _e
	get_jail_parameter ROOTENV "$JAIL" || get_msg2 -Em _e
}

main() {
	# Search for any lingering mounts, and remove them
	JMOUNT=$(mount | egrep -o "${M_QROOT}/${JAIL}/[^[:blank:]]+")
	[ -n "$JMOUNT" ] && echo "$JMOUNT" | xargs umount -f

	case $CLASS in
		appjail|cjail)
         # Reclone the root filesystem for JAIL
			reclone_zroot "$JAIL" "$ROOTENV" || get_msg2 -Em _e2 "$JAIL" "$ROOTENV"
		;;
		dispjail)
         # Reclone the root filesystem for JAIL
			reclone_zroot "$JAIL" "$ROOTENV" || get_msg2 -Em _e2 "$JAIL" "$ROOTENV"

			# Dispjails also reclone the zusr portion from template (if it exists)
			get_jail_parameter -d TEMPLATE "$JAIL" || get_msg2 -Em _e
			reclone_zusr "$JAIL" "$TEMPLATE" || get_msg2 -Em _e3 "$JAIL" "$ROOTENV"
		;;
		rootjail)
			# Rootenv flags stay down for convenience, but can be long op. fork and silence 
			[ -e ${M_QROOT}/${JAIL} ] && (exec chflags -fR noschg ${M_QROOT}/${JAIL})
	esac

	# Clean up the jail's /var/run directory
	rm -r ${QRUN}/${JAIL} 2>/dev/null

	# Flags come down after stopping, but fork process and silence, to reduce user lag
	[ -e ${M_ZUSR}/${JAIL} ] && (exec chflags -fR noschg ${M_ZUSR}/${JAIL})

	# Re-encrypt the dataset, if applicable
	[ ! "$(zfs list -Ho encryption ${U_ZFS}/${JAIL})" = "off" ] \
		&& zfs umount -u ${U_ZFS}/${JAIL}

	# If dhcp is never found for, exec-poststart runs forever, and stays even after jail -r 
	# Neither pkill -15; nor pkill -9; nor kill -15 work here. Only kill -9
	kill -9 $(pgrep -f "exec-poststart $JAIL") > /dev/null 2>&1

	return 0
}

get_global_variables

get_parameters "$@"

main

exit 0   # Script exits success, to not cause trouble elsewhere
