#!/bin/sh

. /usr/local/lib/quBSD/quBSD.sh

get_parameters() {
	JAIL="$1"

	# Get parameters. Class was already verified, so skip checks.
	get_jail_parameter -qs CLASS   "$JAIL" || get_msg2 -Em _e
	get_jail_parameter -dr IPV4    "$JAIL" || get_msg2 -Em _e
	get_jail_parameter -d  GATEWAY "$JAIL" || get_msg2 -Em _e
	get_jail_parameter -d  MAXMEM  "$JAIL" || get_msg2 -Em _e
	get_jail_parameter -d  CPUSET  "$JAIL" || get_msg2 -Em _e
	get_jail_parameter -d  CONTROL "$JAIL" || get_msg2 -Em _e

	# MTU only with valid IP. Quiet messages (MTU is not critical)
	[ $GATEWAY = "none" ] && IPV4="none" || get_jail_parameter -d MTU "$JAIL"

	J_ZUSR="${M_ZUSR}/${JAIL}"
	JRC="${J_ZUSR}/rw/etc/rc.conf"
	JWG="${J_ZUSR}/rw/usr/local/etc/wireguard/wg0.conf"
}

modify_dhcpd() {

	DHCPD=$(sed -En 's#dhcpd_conf="(.*)\"#\1#p' $JRC)

	[ -e "$DHCPD" ] || return 0

	# If wireguard is enabled, DNS should come from wg0.conf. Otherwise, use /etc/resolv.conf
	if grep -Eq 'wireguard_enable="YES"' $JRC ; then
		_DNS=$(sed -En "s/^DNS.*=[[:blank:]]*([0-9]+.*[0-9]+)[[:blank:]]*\$/\1;/p" $JWG)

	else
		# Get the DNS entries from resolv.conf, and use those for the dhcpd server
		_DNS=$(sed -En "s/^nameserver (.*[0-9]+)[[:blank:]]*\$/\1,/p" \
														"${J_ZUSR}/rw/etc/resolv.conf")
		_DNS=$(echo $_DNS | sed -E "s/,\$/;/")
	fi

	# Modify dhcpd with new DNS
	[ -n "$_DNS" ] && sed -i '' -E "s/(option domain-name-servers ).*/\1${_DNS}/g" $DHCPD

	# Set MTU in the config file
	[ -n "$MTU" ] && sed -i '' -E "s/(option interface-mtu ).*/\1${MTU};/g" "$DHCPD"
}

modify_files() {

	# Numerous variables need to be modified for pf.conf
	if grep -Eqs 'pf_enable="YES"' $JRC && [ -e "$JPF" ] ; then

		# For gateways that serve other gateways, get all the WGPORTS of those gateways
		assemble_wgports

		# Make sure flags are down
		chflags -R noschg "${J_ZUSR}/rw/etc"

		# $VIF was assigned during the connect_client_to_gateway func. Modify pf.conf
		sed -i '' -E "s@EXT_IF[[:blank:]]*=.*@EXT_IF = \"${_VIF}\"@" $JPF
		sed -i '' -E "s@JIP[[:blank:]]*=.*@JIP = \"${IPV4}\"@" $JPF

		# net-jail internal wireguard parameters
		[ -n "$WG_ENDPT" ] \
			&& sed -i '' -e "s@ENDPOINT[[:blank:]]*=.*@ENDPOINT = \"${WG_ENDPT}\"@" $JPF

		[ -n "$WG_PORTS" ] \
			&& sed -i '' -e "s@WGPORTS[[:blank:]]*=.*@WGPORTS = \"${WG_PORTS}\"@" $JPF
	fi

	# Make sure the MTU matches qconf
	[ "$MTU" ] && [ -e "$JWG" ] \
						&& sed -i '' -E "s/^MTU.*/MTU = ${MTU}/" $JWG

	# SSHD needs to be configured so the control jail can access
	if [ "$CONTROL" ] && [ ! "$CONTROL" = "none" ] ; then
		sed -i '' -E 's/#*(PermitRootLogin).*/\1 yes/' ${M_QROOT}/${JAIL}/etc/ssh/sshd_config
		sysrc -f ${M_QROOT}/${JAIL}/rw/etc/rc.conf sshd_enable="YES"
	fi
}

assemble_wgports() {
	# All clients with a wg port, should be added to the gateway pf.conf WGPORTS

	for _jail in $(get_info -e _CLIENTS $JAIL) ; do
		[ -e "${M_ZUSR}/${_jail}/${WIREGRD}" ] \
			&& WG_PORTS="$WG_PORTS $(sed -nE "s/^ENDPOINT[[:blank:]]*=.*:(.*)[[:blank:]]*/\1/p" \
																					${M_ZUSR}/${_jail}/${WG0CONF})"
	done

	# Remove duplicates and leading/trailing blanks
	WG_PORTS=$(echo "$WG_PORTS" \
			| awk '{for (i=1;i<=NF;i++) if (!a[$i]++) printf("%s%s", $i, FS)}' \
			| sed -E 's/^[[:blank:]]*//' | sed -E 's/[[:blank:]]*$//')
}

resource_control() {
	# Remove any existing rules for the jail
	rctl -r jail:${JAIL}:: > /dev/null 2>&1

	# Establish max memory allocaiton and jail CPUs
	[ "$MAXMEM" = "none" ] || rctl -a jail:${JAIL}:memoryuse:deny=${MAXMEM}
	[ "$CPUSET" = "none" ] || cpuset -j $JAIL -cl $CPUSET
}

main() {
	# If dhcpd is enabled, then modify the config with MTU and DNS
	grep -Eq 'dhcpd_enable="YES"' $JRC && modify_dhcpd

	if [ ! "$CLASS" = "cjail" ] ; then
		# Connect JAIL to 0control SSH
		chk_isrunning "$CONTROL" && connect_client_to_gateway -c "$JAIL" "$CONTROL"

		# Copy the ssh pubkey from control jail to JAIL. Not applicable for rootjails.
		chk_isrunning "$CONTROL" && [ ! "$CLASS" = "rootjail" ] \
			&& copy_control_keys "$CONTROL" "$JAIL"

		# Connect jail to its gateway, retrieving the VIF assigned
		chk_isrunning "$GATEWAY" && _VIF=$(connect_client_to_gateway -ei $IPV4 "$JAIL" "$GATEWAY")

		modify_files
	fi

	connect_gateway_to_clients "$JAIL"

	resource_control
}


get_global_variables

get_parameters "$@"

get_networking_variables

main

exit 0

