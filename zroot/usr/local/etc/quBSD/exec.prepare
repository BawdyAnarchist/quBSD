#!/bin/sh

. /usr/local/lib/quBSD/quBSD.sh

get_parameters() {
	# Define script variables
	JAIL="$1"
	echo "STARTING JAIL: $JAIL. $(date "+%Y-%m-%d_%H:%M")" >> $QBLOG

	# Parameters and checks
	get_jail_parameter    CLASS   "$JAIL"  ||  exit 1
	get_jail_parameter    ROOTENV "$JAIL"  ||  exit 1
	get_jail_parameter -d GATEWAY "$JAIL"  ||  exit 1
	get_jail_parameter -d CONTROL "$JAIL"  ||  exit 1

	# Find any remaining mounts for the jail
	JMOUNT=$(mount | grep -Eo "${M_QROOT}/${JAIL}/[^[:blank:]]+")
}

preparation_actions() {
	# Sometimes bridge module unloads
	kldstat -q -m if_bridge || kldload -q if_bridge

	# The control jail should always be on. The function will return immediately if already on
	[ ! "$CLASS" = "cjail" ] && start_jail "$CONTROL"

	# Prefer to start gateways here; as jail.conf dependencies can limit versatility
	start_jail "$GATEWAY"

	# Double check to unmount any parts of <jail> before destroy/recreating the dataset
	[ -n "$JMOUNT" ] && echo "$JMOUNT" | xargs umount -f
}

create_fstab_directories() {
	# Use the JAIL's fstab to create the directories necessary for mountpoints
	_DIRS=$(tail -n +2 ${M_ZUSR}/${JAIL}/rw/etc/fstab | awk '!/^[[:blank:]]*#/{print $2}')

	for _dir in $_DIRS ; do
		[ -d "$_dir" ] || mkdir -p $_dir > /dev/null 2>&1
	done
}

main() {
	# Misc things to do/check before recloning the datasets
	preparation_actions

	case $CLASS in
		appjail|cjail)
			# Reclone the root filesystem for JAIL
			reclone_zroot "$JAIL" "$ROOTENV" || exit 1
		;;
		dispjail)
			# Reclone the root filesystem for JAIL
			reclone_zroot "$JAIL" "$ROOTENV" || exit 1

			# Dispjails also reclone the zusr portion from template (if it exists)
			get_jail_parameter -d TEMPLATE "$JAIL" || exit 1
			chk_valid_zfs "${U_ZFS}/${TEMPLATE}" && reclone_zusr "$JAIL" "$TEMPLATE" || exit 1
		;;
	esac

	create_fstab_directories

	return 0
}

get_global_variables

get_parameters "$@"

main


