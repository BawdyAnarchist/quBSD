#!/bin/sh

# Replacement of non-persistent filesystems (appjails and dispjails) 
# jailmap.conf stores all jail configurations at /usr/local/etc/jail.conf.d/

QBCONF="/usr/local/etc/quBSD/quBSD.conf"
JMAP="/usr/local/etc/quBSD/jailmap.conf"
sed -i '' -e 's/[[:blank:]]*$//g' $JMAP    # Removes blanks at EOL, prevents errors

# Get datasets and mountpoints
zusr_zfs=$(sed -En "s/^zusr_dataset[[:blank:]]+//p" $QBCONF)
m_zusr=$(zfs get -H mountpoint $zusr_zfs | awk '{print $3}')
jails_zfs=$(sed -En "s/^jails_dataset[[:blank:]]+//p" $QBCONF)
m_jails=$(zfs get -H mountpoint $jails_zfs | awk '{print $3}')

# Define script variables
jail="$1"
date=$(date +%b%d)
class=$(sed -nE "s/^${jail}[[:blank:]]+class[[:blank:]]+//p" $JMAP)
rootjail=$(sed -nE "s/^${jail}[[:blank:]]+rootjail[[:blank:]]+//p" $JMAP)
rootsnap=$(zfs list -t snapshot | egrep -o "${jails_zfs}/${rootjail}@[^[:blank:]]+" | tail -1)
tunnel=$(sed -nE "s/^${jail}[[:blank:]]+tunnel[[:blank:]]+//p" $JMAP)
jmount1=$(mount | egrep -o "${m_jails}/${jail}/[[:alnum:]]+") 
jmount2=$(mount | egrep -o "^${m_zusr}/${jail}/[^[:blank:]]+")

usage() {
        printf "%b" "\n$err\n\n"
        exit 1
}
checks() {
        if [ -z "$jail" ] ; then
                err="Error: exec.prepare:  Must select a jail"
                usage
        elif [ -z "$JMAP" ] ; then
                err="Error: exec.prepare  No file selected for jailmap.conf"
                usage
        elif [ -z "$class" ] ; then
                err="Error: exec.prepare:  Jail $jail has no class designated in jailmap.conf"
                usage
        elif [ -z "$rootjail" ] ; then
                err="Error: exec.prepare: Jail $jail has no rootjail designated in jailmap.conf"
                usage
        elif [ -z "$tunnel" ] ; then
                err="Error: exec.prepare:  Jail $jail has no tunnel desingated in jailmap.conf"
                usage
        fi
}

start_tunnels () {
	if `egrep -qs "^$tunnel" "$JMAP"` && ! `jls | grep -qs $tunnel`  ; then
		jail -c "$tunnel"
	fi
}

umount_lingering() {
 	[ -e "${m_zusr}/${jail}/rw/etc/fstab" ] && umount -a -F ${m_zusr}/${jail}/rw/etc/fstab > /dev/null 2>&1
	[ -n "$jmount1" ] && echo "$jmount1" | xargs umount -f 
	[ -n "$jmount2" ] && echo "$jmount2" | xargs umount -f   
}

reclone_appjail() {
	if [ "$class" != "rootjail" ] ; then
		zfs list "${jails_zfs}/${jail}" > /dev/null 2>&1 
			[ "$?" = 0 ] && zfs destroy -rRf "${jails_zfs}/${jail}"  
		zfs clone $rootsnap "${jails_zfs}/${jail}" 
		zfs set qubsd:autosnap=- "${jails_zfs}/${jail}"

		# New clones need to remove schg before start (inherited from clones)
		flags_down

		# Add user and group to freshly cloned rootjail 
		pw -V ${m_jails}/${jail}/etc/ useradd -n $jail -u 1001 -d /usr/home/${jail} -s /bin/csh 2>&1
	fi
}

reclone_dispjail() {
	if [ "$class" = "dispjail" ] ; then
		template=$(sed -nE "s/^${jail}[[:blank:]]+template[[:blank:]]+//p" $JMAP)
		homesnap=$(zfs list -t snapshot | \
			   egrep -o "${zusr_zfs}/${template}@[^[:blank:]]*" | tail -1) 

		zfs list "${zusr_zfs}/${jail}" > /dev/null 2>&1
			[ "$?" = 0 ] && zfs destroy -rRf ${zusr_zfs}/${jail}  
		zfs clone ${homesnap} ${zusr_zfs}/${jail} 
		zfs set qubsd:autosnap=- "${zusr_zfs}/${jail}"

		# New clones need to remove schg before start (inherited from parent)
		flags_down

		# Rename directories and mounts with dispjail name 
		[ -e ${m_zusr}/${jail}/usr/home/${template} ] && \
			mv ${m_zusr}/${jail}/usr/home/${template} ${m_zusr}/${jail}/usr/home/${jail} 
		sed -i '' -e "s/${template}/${jail}/g" ${m_zusr}/${jail}/rw/etc/fstab 
	fi
}

flags_down() {      
	if [ -e ${m_jails}/${jail} ] ; then 
		chflags -R noschg ${m_jails}/${jail}  
	fi
	if  [ -e ${m_zusr}/${jail} ] ; then
		chflags -R noschg ${m_zusr}/${jail}
	fi
}

checks 

# Sometimes bridge module unloads
kldstat -q -m if_bridge || kldload -q if_bridge     

# Prefer this method instead of dependencies, which can limit versatility 
start_tunnels		

# Potential old/surrepititious mounts are removed as a safety factor 
umount_lingering 	

# Root filesystem of appjail is destroyed / recloned from rootjail (basejail) 
reclone_appjail		

# Dispjails clone root filesystem, and the /zusr data, from a clean template
reclone_dispjail	


