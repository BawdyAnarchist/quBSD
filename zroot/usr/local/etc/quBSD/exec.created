#!/bin/sh

. /usr/local/lib/quBSD/quBSD.sh

get_parameters() {
	JAIL="$1"
	IF_ERR="get_msg_qubsd"
	DEFAULTS="true"

	# get_jail_parameter conducts all necessary checks for the parameter
	get_jail_parameter class   "$JAIL" "$IF_ERR" "$DEFAULTS"  ||  exit 1
	get_jail_parameter IP0     "$JAIL" "$IF_ERR" "$DEFAULTS"  ||  exit 1
	get_jail_parameter gateway "$JAIL" "$IF_ERR" "$DEFAULTS"  ||  exit 1
	get_jail_parameter maxmem  "$JAIL" "$IF_ERR" "$DEFAULTS"  ||  exit 1
	get_jail_parameter cpuset  "$JAIL" "$IF_ERR" "$DEFAULTS"  ||  exit 1

	# MTU only with valid IP. No alert if substituting #default mtu 
	[ IP0 == "none" ] || get_jail_parameter mtu "$JAIL" "return 1" "$DEFAULTS"  

	# All jails which are served a network connection by <JAIL>
	CLIENTS=$(sed -nE "s/[[:blank:]]+gateway[[:blank:]]+${JAIL}//p" $JMAP) 
}

connect_jail_to_gateway() {
	# Create epair, send to <JAIL> and <GATEWAY> 
	_ext_if=$(ifconfig epair create)
	_ext_if="${_ext_if%?}b"
	ifconfig "${_ext_if%?}a" vnet $GATEWAY
	ifconfig "${_ext_if%?}b" vnet $JAIL

	# Configure networking on the <GATEWAY> side of the epair
	jexec -l -U root $GATEWAY ifconfig "${_ext_if%?}a" inet "${IP0%.*/*}.1/${IP0#*/}" mtu $MTU up 
	jexec -l -U root $GATEWAY ifconfig "${_ext_if%?}a" inet "${IP0%.*/*}.1/${IP0#*/}" mtu $MTU up 

	# Configure networking on the <JAIL> side of the epair   
	jexec -l -U root $JAIL ifconfig "${_ext_if%?}b" inet $IP0 mtu $MTU up 
	jexec -l -U root $JAIL ifconfig "${_ext_if%?}b" inet $IP0 mtu $MTU up 
	jexec -l -U root $JAIL route add default "${IP0%.*/*}.1" 
	jexec -l -U root $JAIL route add default "${IP0%.*/*}.1" 
}

connect_jail_to_clients() {
	# Create epair, send to <JAIL> and _client 
	_int_if=$(ifconfig epair create)
	ifconfig "${_int_if%?}a" vnet $JAIL
	ifconfig "${_int_if%?}b" vnet $_client

	# Configure <JAIL> (server) side of the epair	
	jexec -l -U root $JAIL ifconfig "${_int_if%?}a" inet "${_cIP%.*/*}.1/${_cIP#*/}" mtu $MTU up
	
	# Configure <_client> side of the epair
	jexec -l -U root $_client ifconfig "${_int_if%?}b" inet $_cIP mtu $MTU up
	jexec -l -U root $_client route add default "${_cIP%.*/*}.1"

	# If there are wg interfaces on <_client> , down/up to ensure connection is good 
	wg_intf=$(jexec -l -U root $_client ifconfig -g tun | grep "wg")

	for _wg in $wg_intf ; do 
		jexec -l -U root $_client wg-quick down $_wg
		jexec -l -U root $_client wg-quick up $_wg 
	done
}

configure_epairs() {
	# net-firewall is an exception case, as it only has a tap to configure 
	if [ "$JAIL" == "net-firewall" ] ; then
		ifconfig $GATEWAY vnet $JAIL
		jexec -l -U root $JAIL ifconfig $GATEWAY mtu $MTU up
		_ext_if="$GATEWAY"
	fi

	# Connects <jail> to its gateway network provider specified in jailmap.conf 
	[ "$IP0" != "none" ] && check_isrunning_jail "$GATEWAY" && connect_jail_to_gateway 

	# If <jail> serves a network connection, bring those connections up 
	for _client in $CLIENTS ; do 
		# Get the IP address for each client
		_cIP=$(get_jail_parameter IP0 "$_client" "return 1" "false" "true")

		# Builds a table of allowable client IPs for the <jail>
		nat_table="${_cIP} ${nat_table}"

		if check_isrunning_jail "$_client" ; then
			connect_jail_to_clients
		fi
	done
}

pf_modify() {
	# Numerous variables need to be modified for pf.conf
	if [ -e "$JPF" ] ; then
		
		sed -i '' -e "s@^ext_if[[:blank:]]*=.*@ext_if = \"$_ext_if\"@" $JPF
		sed -i '' -e "s@^jIP[[:blank:]]*=.*@jIP = \"$IP0\"@" $JPF
		sed -i '' -e "s@^routerIP[[:blank:]]*=.*@routerIP = \"${IP0%.*/*}.1\"@" $JPF
		sed -i '' -e "s@^table <pass_ips>.*@table <pass_ips> { $nat_table}@" "$JPF"

		if ! [ "$JAIL" == "net-firewall" ] ; then
			sed -i '' -e "s@^Endpoint[[:blank:]]*=.*@Endpoint = \"$ENDPOINT\"@" $JPF  
			sed -i '' -e "s@^wgPorts[[:blank:]]*=.*@wgPorts = \"$WGPORTS\"@" $JPF  
		fi
	fi
}

resource_ctl() {
	# Remove any existing rules for the jail 	
	rctl -r jail:${JAIL}:: > /dev/null 2>&1
	
	# Establish max memory allocaiton and jail CPUs
	[ "$MAXMEM" = "none" ] || rctl -a jail:${JAIL}:memoryuse:deny=${MAXMEM}
	[ "$CPUSET" = "none" ] || cpuset -j $JAIL -cl $CPUSET
}

get_global_variables

get_parameters "$@"

get_networking_variables

configure_epairs

pf_modify			

resource_ctl			



