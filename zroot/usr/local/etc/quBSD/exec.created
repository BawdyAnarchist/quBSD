#!/bin/sh

. /usr/local/lib/quBSD/quBSD.sh

get_parameters() {
	JAIL="$1"

	# Get parameters. Class was already verified, so skip checks. 
	get_jail_parameter -dqs class  "$JAIL" ||  exit 1
	get_jail_parameter ipv4    "$JAIL"     ||  exit 1
	get_jail_parameter gateway "$JAIL"     ||  exit 1
	get_jail_parameter maxmem  "$JAIL"     ||  exit 1
	get_jail_parameter cpuset  "$JAIL"     ||  exit 1

	# Check/warn if outside of quBSD IPv4 convention, but don't fail 
	chk_isqubsd_ipv4 "$IPV4" "$JAIL"

	# MTU only with valid IP. Quiet messages (MTU is not critical) 
	[ gateway = "none" ] || get_jail_parameter -q mtu "$JAIL" 
}

connect_jail_to_clients() {
	connect_client_gateway -e -i "$_cIP" "$_client" "$JAIL" > /dev/null

	# If there are wg interfaces on <_client> , down/up to re-establish connection. 
	wg_intf=$(jexec -l -U root $_client ifconfig -g tun | grep "wg")

	for _wg in $wg_intf ; do 
		jexec -l -U root $_client wg-quick down $_wg
		jexec -l -U root $_client wg-quick up $_wg 
	done
}

modify_pf() {
	# Numerous variables need to be modified for pf.conf
	if [ -e "$JPF" ] ; then
	
		# exec.created IPs and interfaces	
		sed -i '' -e "s@^ext_if[[:blank:]]*=.*@ext_if = \"$VIF\"@" $JPF
		sed -i '' -e "s@^jIP[[:blank:]]*=.*@jIP = \"$IPV4\"@" $JPF
		sed -i '' -e "s@^routerIP[[:blank:]]*=.*@routerIP = \"${IPV4%.*/*}.1\"@" $JPF
		sed -i '' -e "s@^table <pass_ips>.*@table <pass_ips> { $nat_table}@" "$JPF"

		# net-jail internal wireguard parameters
		[ -n "$ENDPOINT" ] \
			&& sed -i '' -e "s@^Endpoint[[:blank:]]*=.*@Endpoint = \"$ENDPOINT\"@" $JPF  

		[ -n "$WGPORTS" ] \
			&& sed -i '' -e "s@^wgPorts[[:blank:]]*=.*@wgPorts = \"$WGPORTS\"@" $JPF  

		# Get the ports being passed by client's pf's, and add to gateway (usually net-firewall)
		# Todo: Add the above	
	fi
}

resource_control() {
	# Remove any existing rules for the jail 	
	rctl -r jail:${JAIL}:: > /dev/null 2>&1
	
	# Establish max memory allocaiton and jail CPUs
	[ "$MAXMEM" = "none" ] || rctl -a jail:${JAIL}:memoryuse:deny=${MAXMEM}
	[ "$CPUSET" = "none" ] || cpuset -j $JAIL -cl $CPUSET
}

main() {
	# Jails connected to VMs must have handling of the tap interface 
	if [ "$_class_gw" == "VM" ] ; then
		
		# Get the tap interface for the VM
		get_jail_parameter vif "$GATEWAY" ||  exit 1
		
		# Send vintf to the jail and bring it up. The <jail> rc.conf handles the rest.
		ifconfig $VIF vnet $JAIL 
		jexec -l -U root $JAIL ifconfig $VIF mtu $MTU up

	else
		# Connect <jail> as a client, to it's gateway. epairs, IPs, and $VIF is assigned
		chk_isrunning "$GATEWAY" && connect_client_gateway "$JAIL"
	fi

	# If <jail> serves a network connection, bring those connections up 
	for _client in $(get_info -e _CLIENTS "$JAIL") ; do

		# Build the pf table of allowable client IPs.
		_cIP=$(get_jail_parameter -deq ipv4 "$_client") && ! [ "$_cIP" = "none" ] \
				&& nat_table="${_cIP} ${nat_table}"

		if chk_isrunning "$_client" ; then
			# Connect to all clients that are running. 
			connect_jail_to_clients
		fi
	done

	# Modify pf.conf for the jail
	modify_pf			

	# Implement some of the resource controls
	resource_control
}


get_global_variables

get_parameters "$@"

get_networking_variables

main




