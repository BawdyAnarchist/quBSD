#!/bin/sh

#  Virtual interfaces, pf, and resource control are best done before starting services 

QBCONF="/usr/local/etc/quBSD/quBSD.conf"
JMAP="/usr/local/etc/quBSD/jailmap.conf"
sed -i '' -e 's/[[:blank:]]*$//g' $JMAP

# Get datasets, mountpoints; and define files.
zusr_zfs=$(sed -En "s/^zusr_dataset[[:blank:]]+//p" $QBCONF) 
m_zusr=$(zfs get -H mountpoint $zusr_zfs | awk '{print $3}')

# Define script variables
jail="$1"
jpf="${m_zusr}/$jail/rw/etc/pf.conf"
wgconf="${m_zusr}/$jail/rw/usr/local/etc/wireguard/wg0.conf"
class=$(sed -nE "s/^${jail}[[:blank:]]+class[[:blank:]]+//p" $JMAP)
rootjail=$(sed -nE "s/^${jail}[[:blank:]]+rootjail[[:blank:]]+//p" $JMAP)
jIP=$(sed -nE "s/^${jail}[[:blank:]]+IP0[[:blank:]]+//p" $JMAP)
IP0="$jIP"
tunnel=$(sed -nE "s/^${jail}[[:blank:]]+tunnel[[:blank:]]+//p" $JMAP)
connects=$(sed -nE "s/[[:blank:]]+tunnel[[:blank:]]+${jail}//p" $JMAP)
maxmem=$(sed -nE "s/^${jail}[[:blank:]]+maxmem[[:blank:]]+//p" $JMAP) 
cpuset=$(sed -nE "s/^${jail}[[:blank:]]+cpuset[[:blank:]]+//p" $JMAP) 
mtu=$(sed -nE "s:^mtu[[:blank:]]+::p" $QBCONF) 
if [ -e "$wgconf" ] ; then
	Endpoint=$(sed -nE "s/^Endpoint[[:blank:]]*=[[:blank:]]*//p" $wgconf | \
						sed -n "s/:[[:digit:]]*.*//p")
	wgPorts=$(sed -nE "s/^Endpoint[[:blank:]]*=[[:blank:]]*.*://p" $wgconf) 
fi

usage() {
	printf "%b" "\n$err\n\n"
	exit 1
}

checks() {
	if [ -z "$jail" ] ; then
		err="Error: exec.poststart:  Must select a jail"
		usage
	elif [ -z "$JMAP" ] ; then
		err="Error: exec.poststart:  No file selected for jailmap.conf"
		usage
	elif [ -z "$class" ] ; then
		err="Error: exec.poststart: $jail has no class designated in jailmap.conf"
		usage
	elif [ -z "$rootjail" ] ; then
		err="Error: exec.poststart: $jail has no rootjail designated in jailmap.conf" 
	 	usage
	elif [ -z "$tunnel" ] ; then
		err="Error: exec.poststart: $jail has no tunnel desingated in jailmap.conf"
		usage
	elif [ -z "$jIP" ] ; then
		err="Error: exec.poststart: $jail has no IP0 setting jailmap.conf"
		usage
	elif [ -z "$validIPv4" -a "$jIP" != "none" ] ; then
		err="Error: exec.poststart: $jail IP0 must be \`none' or valid CIDR IPv4"
		usage
	fi
}

check_IPv4() {
     # Perhpas not as technically correct as doing a regex,
     # but it's readable, and the a/b pairs are usable elsewhere
     # IPv4 cidr:  a0.a1.a2.a3/a4

	validIPv4=""

     a0=${IP0%%.*.*.*/*}
     a4=${IP0##*.*.*.*/}
          b1=${IP0#*.*}
          a1=${b1%%.*.*/*}
               b2=${IP0#*.*.*}
               a2=${b2%%.*/*}
                    b3=${IP0%/*}
                    a3=${b3##*.*.*.}

     if    [ "$a0" -ge 0 -a "$a0" -le 255 -a "$a1" -ge 0 -a "$a1" -le 255 \
          -a "$a2" -ge 0 -a "$a2" -le 255 -a "$a3" -ge 0 -a "$a3" -le 255 \
          -a "$a4" -ge 0 -a "$a4" -le 31 ] >> /dev/null 2>&1
     then
          echo "$IP0" | egrep -qs "[[:digit:]]+\.[[:digit:]]+\.[[:digit:]]+\.[[:digit:]]+/[[:digit:]]+"
          [ "$?" = "0" ] && validIPv4="true"
     fi
}

upstream_tunnel() {
	ext_if=$(ifconfig epair create)
	ext_if="${ext_if%?}b"
	ifconfig "${ext_if%?}a" vnet $tunnel
	ifconfig "${ext_if%?}b" vnet $jail

	# Configure the tunnel side of the epair
	jexec -l -U root $tunnel ifconfig "${ext_if%?}a" inet "${jIP%.*/*}.1/${jIP#*/}" mtu $mtu up 

	# MTU HACK: The mtu specification at the end will be unnecessary for most people
	jexec -l -U root $jail ifconfig "${ext_if%?}b" inet $jIP mtu $mtu up 
	jexec -l -U root $jail route add default "${jIP%.*/*}.1" 
}

client_connections() {
	int_if=$(ifconfig epair create)
	ifconfig "${int_if%?}a" vnet $jail
	ifconfig "${int_if%?}b" vnet $c

	jexec -l -U root $jail ifconfig "${int_if%?}a" inet "${cIP%.*/*}.1/${cIP#*/}" mtu $mtu up

	jexec -l -U root $c ifconfig "${int_if%?}b" inet $cIP mtu $mtu up
	jexec -l -U root $c route add default "${cIP%.*/*}.1"
	jexec -l -U root $c route add default "${cIP%.*/*}.1"
	
	# If there are wg interfaces, bring them down and back up
	wg_intf=$(jexec -l -U root $c ifconfig -g tun | grep "wg")
	for w in $wg_intf ; do 
		jexec -l -U root $c wg-quick down $w 
		jexec -l -U root $c wg-quick up $w 
	done
}

configure_epairs() {
	# Jails with a tap interface specified in jailmap.conf receive their respective taps 
	if [ "$jail" = "net-firewall" ] ; then
		ifconfig $tunnel vnet $jail
		jexec -l -U root $jail ifconfig $tunnel mtu $mtu up
		ext_if="$tunnel"
	fi

	# Connects jail to its upstream tunnel specified in jailmap.conf
	if [ "$jIP" != "none" ] && `jls | grep -qs "$tunnel"` ; then
		upstream_tunnel	
	fi

	# Cycle through downstream clients, check IPs, bring up epairs for running jails
	for c in $connects ; do 
		cIP=$(sed -nE "s/^${c}[[:blank:]]+IP0[[:blank:]]+//p" $JMAP) 
		IP0="$cIP"
		check_IPv4

		if [ -n "$c" -a "$validIPv4" ] ; then
			nat_table="${cIP} ${nat_table}"

			if `jls | grep -qs " $c "` ; then
				client_connections
			fi
		fi
	done
}

pf_modify() {
	if [ -e "$jpf" ] ; then
		sed -i '' -e "s@^ext_if[[:blank:]]*=.*@ext_if = \"$ext_if\"@" $jpf
		sed -i '' -e "s@^jIP[[:blank:]]*=.*@jIP = \"$jIP\"@" $jpf
		sed -i '' -e "s@^routerIP[[:blank:]]*=.*@routerIP = \"${jIP%.*/*}.1\"@" $jpf
		sed -i '' -e "s@^table <pass_ips>.*@table <pass_ips> { $nat_table}@" "$jpf"
		if [ "$jail" != "net-firewall" ] ; then
			sed -i '' -e "s@^Endpoint[[:blank:]]*=.*@Endpoint = \"$Endpoint\"@" $jpf  
			sed -i '' -e "s@^wgPorts[[:blank:]]*=.*@wgPorts = \"$wgPorts\"@" $jpf  
		fi
	fi
}

resource_ctl() {
        rctl -r jail:${jail}:: > /dev/null 2>&1
        [ -n "$maxmem" -a "$maxmem" != "none" ] && rctl -a jail:${jail}:memoryuse:deny=${maxmem}
        [ -z "$cpuset" -o "$cpuset" = "none" ] && cpuset -j $jail -cl 1-47 || cpuset -j $jail -cl $cpuset
}


check_IPv4
checks 
configure_epairs
pf_modify			
resource_ctl			



