
This document is a quick reference and summary for quBSD concepts, 
in contrast to the detailed descriptive document:  4_System_Details


################################  VIRTUAL  MACHINES  ###################################

Default installed VMs are nicvm and usbvm. Use the service command for start/stopping.
qb-nicvm connects net-firewall via ssh, or [-c] for direct console launch.
qb-usbvm connects any specified jail via ssh, or [-c] for direct console launch.


#################################  JAILS  CONCEPTS  ####################################

"zroot/quBSD/jails" refers to the recommended dataset for storing root filesystems for 
jails. However, you may have selected a different dataset than "zroot" at install.
This option was stored at:  /usr/local/bin/etc/jail.conf.d/quBSD.conf
The default mountpoint for this dataset is /quBSD/jails but it can be changed with:
     zfs set mountpoint=/jails zroot/quBSD/jails

**Personally, I like to set my mountpoint at simply:  /jails  to ease navegation**
The rest of this file will reference either quBSD/jails or /jails for brevity.

"rootjails" are full ondisk FreeBSD installations; serving pristine clones to appjails. 
Three rootjails are installed by default:
	0base - A bare bones install, no pkgs, no configs
	0net  - Wireguard, wireguard-go, and jq; specifically for gateway jails.
	0gui  - Acts as the primary GUI workstation rootjail. Xorg, GPU drivers, qt/gtk.
		   Users will want to add their own desired GUI pkgs as well.

"appjails" receive a fresh clone of their designated rootjail at every start/stop.
From inside a running appjail you can edit system files; but changes are ephemeral, as 
the root filesystem is destroyed and recoloned at jail shutodwn. This is both a security 
feature; and a space for user experimentation without risking damage to a jail.

Recommend testing desired changes inside of an appjail, before modifying the rootjail.

!! Rootjail changes require zfs snapshot and dependent appjail restart to take effect !! 
	qb-snap -n <rootjail>  	# create snapshot
	qb-off -r <appjail>		# restart appjail


#################################  JAILS  CONCEPTS  ####################################

"zusr" refers to the dataset where jail's persistent files are stored. This option was 
selected at install, and stored at /usr/local/bin/etc/jail.conf.d/quBSD.conf
The default mountpoint is /quBSD/zusr but that can be changed with:  
	zfs set mountpoint=/zusr /zroot/quBSD/zusr
	# Your dataset might be different than zroot, depending on what you chose at install

The rest of this file will reference "/zusr" for brevity. 

**Personally, I like to set my mountpoint at simply:  /zusr  to ease navegation.

Each jail has its own dataset under zusr, with at most, 2 sub-directories:

	/zusr/<jailname>/home/ gets nullfs mounted at:  /jails/<jailname>/home

		From inside a running jail, this appears like a standard /home/ directory.
		User 1001 with <username> and <groupname> , are identical to the zfs <jailname>

	/zusr/<jailname>/rw/ gets nullfs mounted at:  /jails/<jailname>/rw

		/rw facilitates persistent system files for each jail.  Requires that /rw files
		have identical directory structure (hierarchy) for the files they will replace.
	 	   Example:  /zusr/<jailname>/rw/etc/rc.conf is a custom rc.conf for <jailname>

	/rw can also handles pwd info; however, modifying jail pw requires [-V] redirection.
		pw -V /quBSD/zusr/<jail>/rw/etc usermod    # If run from host, outside the jail
		pw -V /rw/etc/ usermod                     # If run from inside the jail

Rootjails don't have a zusr/ dataset


############################  DEFAULT  INSTALLED  JAILS  ################################

These are appjails which can be used as templates for building out a larger system.

net-tap
	Shares tap0 on a bridge with epairs, so that tunnel jails can connect to the nicvm

net-firewall
	Basic pf.conf, for firewalled internet connection without a VPN. 
	!Has ssh keys to the nicvm!  Treat this jail as secure.

net-vpn
	Wireguard template setup:  /zusr/<jailname>/rw/usr/local/etc/wireguard/wg0.conf 

dispjail
	All data is destroyed at shutdown: rootjail clone, /home, and /rw. Dispjails depend
	on an appjail template for /home and /rw. Any appjail may be a dispjail template.
	Use dispjails for untrusted: browsing, files, attahments, or downloads

0gui-template
	The fstab .cshrc and rc.conf files are configured for X11 functionality.
	Configure a default home-environment for other jails, then create a copy with: 
		qb-create -H -T 0gui-template <newGUIjail>

	!! CAUTION !! GUI jails share the /tmp/.X11-unix socket. May pose a security risk.

	I left some personal configs (like .mozilla, .config/falkon) as an example  
	
0net-template
	Basic template for net-jails. Be sure to verify rc.conf, resolv.conf, and pf.conf

Recommended Jails
	These are not included, just an example of how a user might segregate activities: 
		vault, corporate, emails, work, social media, browsing, disp-browsing, torrents


#####################################  QB-SCRIPTS  ######################################

/usr/local/bin/qb-* , or "qb-scripts" automate many functions of system usage/management.  
`qb-help`  produces a list of scripts, and a brief description for each one
`qb-tutorial`  walks through some practical examples of how to use quBSD

/usr/local/etc/jail.conf.d/* 	
	jail exec scripts for jail startup/shutdown
	jailmap.conf - Stores all jail settings except for those in /etc/jail.conf
		class:	rootjail | appjail | dispjail
		rootjail: Which rootjail to clone for appjail
		template: Only valid for dispjails; zusr/ template for a dispjail
		IP0:		IPv4 address of the jail in CIDR notation
		tunnel:	Which gateway jail will provide network to the jail 
		maxmem:	rctl maxmimum RAM allocation
		cpuset:	restrict jail to specified CPUs
		schg:	Whether to apply schg flags to jail after start
		seclvl	Applies kern.securelevel to jail after start
		no_destroy Mechanism to prevent against accidental destruction of a jail
	

###################################  i3WM INTEGRATION  ##################################

quBSD comes with a template i3 config; and setup file/script for creating keybindings 

The Problem:  Many jails, each with 5-10 common functions or commands: (for example): 
	[start, stop restart, xterm, chflags, file_manager, browser, etc]... 
	There isn't enough space on the keysboard for each jail/command pair 

Modify /root/.config/i3/i3gen_setup to map jail/command schema, and then execute i3gen.sh
This generates modes (multiple levels) of jail/commands, and updates the config file. 
Be sure to review: /root/.config/i3/config_qubsd , and merge as necessary.

Alternatively, a user could customize another window manager to utilize the qb-scripts.



