#!/bin/sh

# See notes on the bottom for description of why 
# the "pass" option is required for this script to work

while getopts hrx o ; do
	case $o in
		h) help="true" ;;
		r) user="root" ; root="-r" ;;
		x) pass="true" ;;
	esac
done

shift $(( OPTIND - 1 ))
jail="$1"
user="${user:=$jail}"

usage() {
	echo "Desc: Window popup to enter command which executes in the jail"
	echo "Usage: qb-float-cmd [-h ] [-r] [-x] <jail>"
	echo "	-h: shows this usage message" 
	echo "	-r: run command in jail as root" 
	echo "	-x: DO NOT USE!! special option internal to script. DO NOT USE!!"
	exit 1
}

checks() {
	if [ "$help" ] ; then
		usage
	elif ! `qb-list -qj "$jail"` ; then
		echo "qb-floatcmd: Error: jail $jail doesn't exist or isn't configured properly"
		usage
	fi
}

popup() {
	xterm -e csh -c "i3-msg -q floating enable, move position center; \
						/bin/csh -c 'qb-floatcmd -x $jail'"
}

run_cmd() {
	echo -e "Enter Command for jail ${jail}" 
	read -p "${user}@${jail} # " cmd
	nohup qb-cmd $root $jail $cmd >/dev/null   
}


checks

if [ "$pass" ] ; then
	run_cmd	
else
	popup	
fi



# DESCRIPTION
# The usage of csh -c 'command1 ; command2;' is not versatile.
# For example, the `read` command does not store variables when used inside of csh -c 'read x'
# This presents problems when trying to pass user input to a jail command  
# Instead, the popup subshell runs the script again with special variable `-x'
# This variable calls the secondary function `run_cmd', to accept user input and pass to jcmd

# Slightly hacky, but it works
