#!/bin/sh

. /usr/local/lib/quBSD/quBSD.sh
. /usr/local/lib/quBSD/msg-autosnap.sh

get_options() {
	while getopts ':dhl:st:' opts ; do case $opts in
		d) 	DESTROY=true ;;
		h) 	msg_autosnap -eu ;;
		l) 	LIST=${OPTARG} ;;
		s) 	SNAPSHOT=true ;;
		t) 	TTL="${OPTARG}" ;;
		:) 	LIST="all" ;;
		*)   msg_autosnap -Eum _e2
	esac done  ;  shift $(( OPTIND - 1 ))

	DATE_UNIX=$(date +%s)
}

checks() {
	# Separate integer from the units for checks
	_INT="${TTL%?}"
	_UNITS="${TTL##*[0-9]}"

	# Ensure that <_INT><_UNITS> is an integer and proper time unit
	if [ -n "$TTL" ] ; then
		! chk_integer -q -g 0 -- "$_INT" && msg_autosnap -Eum _e1
		! echo "$_UNITS" | grep -Eq "m|H|D|W|Y" && msg_autosnap -Eum _e1
	fi
}

calculate_variables() {
	# SNAPNAME format is unique for each timeframe, for clear visual separation
	# Calculates the destroy-date in unix time, to be stored with snapshot

	if [ -n "$TTL" ] ; then
		case $_UNITS in
			m)	SNAPNAME=$(date +%b%d_%H%M)
				_ttl_unix=$(( _INT * 60 ))
				_ddate_unix=$(( _ttl_unix + DATE_UNIX)) ;;

			H)	SNAPNAME=$(date +%b%d_%H_H)
				_ttl_unix=$(( _INT * 3600 ))
				_ddate_unix=$(( _ttl_unix + DATE_UNIX)) ;;

			D)	SNAPNAME=$(date +%b%d_%H_D)
				_ttl_unix=$(( _INT * 3600 * 24 ))
				_ddate_unix=$(( _ttl_unix + DATE_UNIX)) ;;

			W)	SNAPNAME=$(date +%b%d_%H_W)
				_ttl_unix=$(( _INT * 3600 * 24 * 7 ))
				_ddate_unix=$(( _ttl_unix + DATE_UNIX)) ;;

			M)	SNAPNAME=$(date +%b%d_M)
				_ttl_unix=$(( _INT * 3600 * 24 * 31 ))
				_ddate_unix=$(( _ttl_unix + DATE_UNIX)) ;;

			Y)	SNAPNAME=$(date +%Y%b%d_Annual)
				_ttl_unix=$(( _INT * 3600 * 24 * 365 ))
				_ddate_unix=$(( _ttl_unix + DATE_UNIX)) ;;
		esac
	else
		# If there's no [-t], tag snapshot as manually created, and set '-' for TTL, ddate
		SNAPNAME=$(date +%b%d_%H:%M_Indef)
		TTL='-' ; _ddate_unix='-'
	fi
}

sync_from_qmap() {

	# Get list of all jails with an AUTOSNAP setting in QMAP
	_jlist=$(/usr/local/bin/qb-list -Hp AUTOSNAP | awk '/.*true$/{print $1}')
	for _jail in $_jlist ; do

		# Pull the value of the AUTOSNAP, and conform datasets to QMAP
		_value=$(sed -En "s/^${_jail}[[:blank:]]+AUTOSNAP[[:blank:]]+//gp" $QMAP)
		case "$(get_jail_parameter -deqs CLASS "$_jail")" in

			app*)  chk_valid_zfs "${U_ZFS}/${_jail}" \
							 && zfs set qubsd:autosnap="$_value" "${U_ZFS}/${_jail}"
			;;
			root*) chk_valid_zfs "${ROOT_ZFS}/${_jail}" \
							 && zfs set qubsd:autosnap="$_value" "${R_ZFS}/${_jail}"
			;;
		esac
	done
}

list_datasets() {

	if [ "$LIST" != "snapshot" ] ; then
		# Get list of datasets tagged for autosnap
		ZLIST=$(zfs list -rH -o name,qubsd:autosnap,qubsd:backup-location \
													| grep -E "[[:blank:]]+true[[:blank:]]")
		# Print with formatted header
		printf "%b" "\nDATASET_NAME QUBSD:AUTOSNAP QUBSD:BACKUP-LOC\n" \
				  		"$ZLIST" "\n" | column -t
		echo ""
	fi

	if [ "$LIST" != "dataset" ] ; then
		# Get list of snapshots created by autosnap
		SNAPLIST=$(zfs list -H -t snapshot -o \
						name,qubsd:time-to-live,qubsd:destroy-date,qubsd:autocreated \
												| grep -E "yes$" | awk '{print $1, $2, $3}')
		# Print with formatted header
		printf "%b" "\nSNAPSHOT_NAME QUBSD:TIME-TO-LIVE QUBSD:DESTROY-DATE\n" \
				  		"$SNAPLIST" "\n" | column -t
		echo ""
	fi
}

new_snapshots() {
	# Calculate unix-time destroy-dates based on user input time-to-live.
	calculate_variables

	# Datasets tagged with qubsd:autosnap.
	ZLIST=$(zfs list -rH -o name,qubsd:autosnap ${R_ZFS%%/*} ${U_ZFS} \
								| grep -E "[[:blank:]]+true\$" | awk '{print $1}')

	for _dataset in $ZLIST ; do
		# If the dataset is a zroot dataset (a ROOTENV), skip the snapshot if it's running
		{ [ -z "${_dataset##"${R_ZFS}"*}" ] && chk_isrunning "${_dataset##*/}" ;} && continue

		zfs snapshot \
			-o qubsd:autocreated=yes \
			-o qubsd:autosnap="-" \
			-o qubsd:time-to-live="$TTL" \
			-o qubsd:destroy-date="$_ddate_unix" \
			"${_dataset}@${SNAPNAME}"
	done
}

update_stale_clones() {
	# Assemble list of children datasets and their origin (parent)
	_rclonelist=$(zfs list -Hro name,origin ${R_ZFS} | grep -Ev -- '-$' | awk '{print $1}')
	_uclonelist=$(zfs list -Hro name,origin ${U_ZFS} | grep -Ev -- '-$' | awk '{print $1}')

	# Update stale zroot clones with latest parent snap (zfs lists chronolgically)
	for _clone in $_rclonelist ; do
		if ! chk_isrunning "${_clone##*/}" ; then
			_origin=$(zfs list -Ho origin $_clone)
			_newsnap=$(zfs list -t snapshot -o name ${_origin%%@*} | tail -1)
			zfs destroy $_clone
			zfs clone -o qubsd:autosnap='false' "$_newsnap" $_clone
		fi
	done

	# Update stale zusr clones. They might need fstab replacement and home directory change
	for _clone in $_uclonelist ; do
		_origin=$(zfs list -Ho origin $_clone | sed -E "s/${U_ZFS}\///")
		reclone_zusr ${_clone##*/} "${_origin%%@*}" || msg_autosnap -m _e3
	done
}

thin_old_snapshots() {
	# All zroot / zusr datasets
	ZLIST=$(zfs list -rH -o name ${R_ZFS%%/*} ; zfs list -rH -o name ${U_ZFS})

	for _dataset in $ZLIST ; do
		_snaplist=$(zfs list -Ht snapshot -o name,qubsd:destroy-date $_dataset \
								| grep -E "[[:blank:]]+[[:digit:]]+\$" | awk '{print $1}')

		# Prevent snapshot clutter. If prev snap has 0B written and destroty-date sooner than
		# newest snap, and the newest snap also wrote 0B; then prev snap can be destroyed
		_snap0=$(echo "$_snaplist" | tail -1)
		[ -n "$_snap0" ] \
			&& _dd0=$(zfs list -H -o qubsd:destroy-date $_snap0) \
			&&	_writ0=$(zfs list -H -o written $_snap0)

		_snaplist_temp=$(echo "$_snaplist" | sed '$ d')
		_snap1=$(echo "$_snaplist_temp" | tail -1)
		[ -n "$_snap1" ] \
			&& _dd1=$(zfs list -H -o qubsd:destroy-date $_snap1) \
			&&	_writ1=$(zfs list -H -o written $_snap1)

		while [ -n "$_snap1" ] && [ "$_dd0" -ge "$_dd1" ] && [ "${_writ0}${_writ1}" = "00" ] ; do
			zfs destroy $_snap1 > /dev/null 2>&1 \
					&& _snaplist_temp=$(echo "$_snaplist_temp" | sed '$d') || break
			_snap1=$(echo "$_snaplist_temp" | tail -1)
			_dd1=$(zfs list -H -o qubsd:destroy-date $_snap1 2>&1) || break
			_writ1=$(zfs list -H -o written $_snap1 2>&1) || break
		done

		# Trim all snapshots past their destroy-date
		for _snap in $_snaplist ; do
			# If dataset is still in use; `zfs destroy` without [-rRf], will fail to /dev/null
			_snap_dd=$(zfs list -Ho qubsd:destroy-date $_snap 2>&1) \
				&& [ "$_snap_dd" -le "$DATE_UNIX" ] && zfs destroy $_snap > /dev/null 2>&1
		done
	done
}

main() {
	# Sync from QMAP just in case of differences or hand jammed updates
	sync_from_qmap

	# List first
	[ -n "$LIST" ] && list_datasets && exit 0

	# Make new snapshots, then update stale jails/VMs to latest snapshot
	if [ -n "$SNAPSHOT" ] ; then
		new_snapshots
		update_stale_clones
	fi

	# Destroy snaps with a TTL, or null `zfs-diff` to parent
	[ -n "$DESTROY" ] && thin_old_snapshots
}

get_global_variables

get_options "$@"

checks

main
