#!/bin/sh

. /usr/local/lib/quBSD/quBSD.sh
. /usr/local/lib/quBSD/msg-vm.sh

get_options() {
	while getopts cdhn ops; do
		case $opts in
			c) CONSOLE="true" ;;
			d) DESTROY="true" ;;
			h) get_msg_nicvm "none" "usage_0" ;; 
			n) NO_RUN="true" ;;
			*) exit 1 ;;
		esac
	done

	shift $(( OPTIND -1 ))

	_VM="$1"
}

define_variables() {
	_TAP=$(egrep "^${_VM}[[:blank:]]+gateway" $JMAP | awk '{print $3}')
## This must be reworked for pciconf
##	_PPT=$(sed -nE "s:ppt_nic[[:blank:]]+::p" $QBCONF) 
}

poweron_console() {
	# Print message that VM is starting, and launch VM 

	get_msg_vm "_1" && sleep 1

	bhyveload -c stdio -m 600M -d /dev/zvol/${QBROOT_ZFS}/${_VM} -S ${_VM} 

	bhyve -c 1 -m 600M -H -A -P -S \
		-s 0:0,hostbridge \
		-s 1:0,lpc \
		-s 2:0,virtio-net,"$_TAP" \
		-s 3:0,virtio-blk,/dev/zvol/${QBROOT_ZFS}/${_VM} \
		-s 4:0,passthru,"$_PPT" \
		-l com1,stdio \
		${_VM}	
}	

print_no_run() {
	# Prints the commands that would be run, and exit
	# Useful for modifying VM before manual launch

	[ -n "$DESTROY" ] && get_msg_vm "_2" 
	[ -n "$CONSOLE" ] && get_msg_vm "_2"

	exit 0
}	

poweroff_vm() {
	# If VM is running, needs to shutdown before attempting to launch console 
	if chk_isrunning_vm "$_VM" ; then
		pkill -f "bhyve: $_VM"  && 
		get_msg_vm "_3"	

		_count=1
		while chk_isrunning_vm "$_VM" ; do
			sleep 3
			get_msg_vm "_4"	
			_count=$(( count + 1 ))
			[ "$_count" -gt 30 ] && get_msg_vm "_5" "exit_1"
		done
		
		# Notify of succesful shutdown
		get_msg_vm "_6"	

		# Bring _TAP back to host, and make sure it's in a DOWN state.
		remove_tap "$_TAP" && ifconfig $_TAP down
	fi

	poweron_console

}

get_global_variables

get_options "$@"

define_variables

[ -n "$NO_RUN" ] && print_no_run

main


