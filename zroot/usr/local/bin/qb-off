#!/bin/sh

. /usr/local/lib/quBSD/quBSD.sh
. /usr/local/lib/quBSD/msg-off.sh

get_options() {
	while getopts aehr opts ; do
		case $opts in
			a) ALL="true" ;;
			e) EXCLUDE="true" ;;
			h) get_msg_qb_off "none" "usage_0" ;; 
			r) RESTART="true" ;;
		esac
	done

	shift $(( OPTIND - 1 ))
	
	_JAILS="$@"
	ONJAILS=$(jls | sed 1d | awk '{print $2}' )
}

checks() {
	if [ -z "$ALL" -a -z "$EXLUDE" -a -z "$_JAILS" ] ; then
		# Did not specify an action
		get_msg_qb_off "_1" "usage_1"

	elif [ "$ALL" -a "$EXCLUDE" ] ; then
		# Mutually exclusive actions
		get_msg_qb_off "_2" "usage_1"

	fi
}

remove_list() {
	if [ -n "$ALL" ] ; then 
		# _remove list is the same as all jails that are on
		_remove="$ONJAILS"

	elif [ -n "$EXCLUDE" ] ; then
		# Remove jails presentin the user input exclude list
		for _jail in $_JAILS ; do
			_remove=$(echo $ONJAILS | sed "s/$_jail//")
		done

	else	
		# Default action is to remove the user input jail list
		_remove="$_JAILS"
	fi
}

remove() {
	for _jail in $_remove; do

		# Ensure that _jail is running 
		if check_isrunning_jail "$_jail" ; then 

			if [ "$RESTART" ] ; then 
				# Positional $2 as "pass" will print errors, but continue execution 
				restart_jail "$_jail" "pass" 
			else
				stop_jail "$_jail"
			fi

		else
			# Jail was not running
			get_msg_qb_off "_4" 
		fi	

	done
}


get_global_variables

get_options "$@"

checks 

remove_list

remove



