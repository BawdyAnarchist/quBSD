#!/bin/sh

# Starting multiple jails in parallel comes with problems.
	# Gateway dependencies can cause overlapping starts of the gateway, locking the system
	# auto IP assignments will likely be overlapping unless managed ahead of time 
	# Epair confusion when gateway and client are started simultaneously. 

# This script deconflicts these, starting jails in serial when necessary, parallel if possible 


. /usr/local/lib/quBSD/quBSD.sh
. /usr/local/lib/quBSD/msg-start.sh

get_options() {
	while getopts aAeE:hf: opts ; do
		case $opts in
			a) _SOURCE="auto" ;;
			A) [ "$_SOURCE" ] && get_msg_start "_e1" "usage_1" || _SOURCE="all" ;;
			e) _EXCLUDE="true" ;;
			E) [ "$_EXCLUDE" ] && get_msg_start "_e2" "usage_1" || _EXFILE="${OPTARG}" ;;
			h) get_msg_start "none" "usage_0" ;;
			f) [ "$_SOURCE" ] && get_msg_start "_e1" "usage_1" || _SOURCE="$OPTARG" ;; 
			*) exit 1 ;;
		esac
	done

	shift $(( OPTIND - 1 ))

	# This makes it so that _POSPARAMS has one parameter per line
	_POSPARAMS=$(printf '%s\n' "$@" | uniq)
}

checks() {

	# Define TMP file variables
	_TMP_IP="/tmp/qb-start_temp_ip"

	# Absolutely do not run if another instance if qb-start or qb-stop is already running
	monitor_startstop "1" "$_TMP_IP" || get_msg_start "_e0" "exit_1" 

	# Set up new _TMP_IP	
	mktemp "$_TMP_IP"	> /dev/null 2>&1
}

reclone_stale_zroots() {

	# Pull the list of zroot datasets
	_datasets=$(zfs list -rHo name,origin ${JAILS_ZFS} | grep -Ev "[[:blank:]]+\-" \
					| awk '{print $1}' | sed -E "s#${JAILS_ZFS}/##g")

	# Check all of them one by one
	for _jail in $_datasets ; do

		# Only reclone the dataset if it's not already on the _JLIST to be started
		if ! echo "$_JLIST" | grep -Eq "$_jail" ; then
			
			# The reclone function needs the rootjail name, not the dataset
			_rootzfs=$(zfs list -rHo origin zroot/quBSD/jails/${_jail} | sed "s/@.*//g")
			reclone_zroot "${_jail}" "${_rootzfs##*/}"
		fi
	done
}

climb_hierarchy() {
	# Prevent infinite loop. Unlikely to be 50 gateways; more likely circular reference.
	[ "$_depth" -gt 50 ] && get_msg_start "_e3" "exit_1"
	_depth=$(( _depth + 1 ))

	local _jail="$1"
	local _gateway=$(get_jail_parameter -deqs GATEWAY "$_jail")
	local _class_of_gateway=$(get_jail_parameter -deqs CLASS "$_gateway")

	if echo "$_CLIMBED" | grep -Eq "^[[:blank:]]*${_jail}[[:blank:]]*\$" ; then
		# _jail gateway path was already handled. Skip further checks.
		return 0

	# Neither invalid jails nor VMs should be included. _isVM is global var from chk_valid_jail
	elif ! chk_valid_jail $_jail || [ "$_isVM" = "true" ] ; then
		return 0

	# _jail is an endpoint. Either has no network, or is top of hierarchy. 
	elif [ "$_gateway" = "none" ] || [ "$_class_of_gateway" = "VM" ] ; then

		if get_info _CLIENTS $_jail ; then

			# Has clients that need to wait for _jail to start. 
			_HIERTOP=$(printf "%b" "${_jail}\n${_HIERTOP}" | uniq) 

			# Include jail on _FULLIST 
			echo "$_FULLIST" | grep -Eq "^[[:blank:]]*${_jail}[[:blank:]]*\$" \
				|| _FULLIST=$(printf "%b" "${_FULLIST}\n${_jail}")

		else
			# _jail has no networking. Can start immediately in the background 
			start_jail_in_background "$_jail" > /dev/null 2>&1 &
			# Note, jails stays on full list, for end of script messaging
		fi
		
		# Add _jail to the list of jails already climbed and checked.
		_CLIMBED=$(printf "%b" "${_jail}\n${_CLIMBED}") 

	# _jail depends on a gateway being started ahead of it.
	else
		# Make sure _jail is included in FULLIST. (some gateways might not have been on JLIST).
		echo "$_FULLIST" | grep -Eq "^[[:blank:]]*${_jail}[[:blank:]]*\$" \
				|| _FULLIST=$(printf "%b" "${_FULLIST}\n${_jail}")

		# Add _jail to the list of jails already climbed and checked.
		_CLIMBED=$(printf "%b" "${_jail}\n${_CLIMBED}") 
	
		# Will continue recursively until hierarchy top is reached	
		climb_hierarchy "$_gateway"
	fi	
}

determine_ips() {

	# Map IPs in serial, write to TMP
	for _jail in $_FULLIST ; do

		# IP calaculation unnecessary for hierchy tops or running jails 
		! chk_isrunning "$_jail" \
			&& ! echo "$_HIERTOP" | grep -Eq "^[[:blank:]]*${_jail}[[:blank:]]*\$" \
				&& printf "%b" "$_jail  $(discover_open_ipv4 $_jail)\n" >> $_TMP_IP
	done
}

begin_waterfall() {

	local _gateways="$1"
	for _gw in $_gateways ; do

		# Only continue the waterfall if jail started successfully (and is not VM)
		# isVM note: This is archaic and hacky for temp VM integration hold.
		# This should be removed later.
		if start_jail "$_gw" > /dev/null 2>&1 && [ -z "$_isVM" ] ; then

			# Determine which clients are endpoints, and which serve clients in turn
			classify_clients "$_gw"

			# Start each endpoint
			if [ -n "$_ENDPOINTS" ] ; then

				for _jail in $_ENDPOINTS ; do

					# Maintain a small stagger between parallel starts. Helps prevent conflicts
					sleep .2
					start_jail_in_background "$_jail" & 
				done
			fi

			# Subgateways need their own waterfall
			[ -n "$_SUBGATEWAYS" ] && begin_waterfall "$_SUBGATEWAYS" 
		fi
	done
}

classify_clients() {
	# Secondary clients of the jail that was just started	
	local _jail="$1"  ;  local _client

	# Must clear these values so they return only relevant jails
	_SUBGATEWAYS='' ; _ENDPOINTS=''

	for _client in $(get_info -e _CLIENTS $_jail); do

		# Must ensure that the jail is part of the FULLIST 
		if echo "$_FULLIST" | grep -q "$_client" ; then 

			if get_info _CLIENTS "$_client" ; then
				# Lis of jails with clients
				_SUBGATEWAYS="$_SUBGATEWAYS $_client"
			else	
				# Endpoints can be parallel/background started
				_ENDPOINTS="$_ENDPOINTS $_client"
			fi
		fi
	done
}

start_jail_in_background() {
	# Function can sent to background, but keeps qb-start process alive, for monitoring purposes.
	local _jail="$1"
	start_jail "$_jail" > /dev/null 2>&1
}

main() {

	# Assemble the list of jails tagged for start. 
	compile_jlist

	# Reclone stale zroot datasets occasionally. Assume that all jails off, is a larger reset
	[ -z "$(get_info -e _ONJAILS)" ] && reclone_stale_zroots

	# For each jail, find the hierarchy top (gateway of its gateway of its gateway ...) 
	for _jlist in $_JLIST ; do

		# Function is recursive, so _depth tracks # of cycles to prevent infinite loop. 
		_depth=1

		# Adds all jails in the gateway path to FULLIST.
		climb_hierarchy "$_jlist"
	done

	# If the _FULLIST is empty, there's nothing to do. Remove TMP and exit.
	[ -z "$_FULLIST" ] && rm "$_TMP_IP" && get_msg_start "_m1" && exit 0 

	# IP addr are mapped out ahead of time to prevent overlaps during parallel start
	determine_ips

	# Start the hierarchy tops, then their clients, until all of FULLIST is started 
	for _jail in $_HIERTOP; do

		# Each hierarchy top is independent of each other, and can be started in parallel. 
		begin_waterfall $_jail &
	done
}


get_global_variables

get_options "$@"

checks

main

# Monitor completion of qb-start, 30 sec (60 0.5sec cycles). 
monitor_startstop 60 "$_TMP_IP" &

exit 0
