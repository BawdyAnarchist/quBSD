#!/bin/sh
# Remember to finalize [ ! _param = BHYVE_CUSTM ]

. /usr/local/lib/quBSD/quBSD.sh
. /usr/local/lib/quBSD/msg-create.sh

get_options() {

	# Initialize _PARAMS with the bare minimum necessary to create jail or VM
	_PARAMS="CLASS ROOTENV"

	# CLASS, ROOTENV, and TEMPLATE are important enough to merit their own options
	while getopts c:eGhi:p:r:t:v:yz:Z _opts ; do case $_opts in
		c) CLASS="$OPTARG" ;;
		e) get_msg_create "_examples" "exit_0" ;;
		G) GUIDED="true" ;;
		h) get_msg_create "none" "usage_0" ;;
		i) INSTALL="$OPTARG" ;;
		p) evaluate_p_option "$OPTARG" ;;
		r) ROOTENV="$OPTARG" ;;
		t) TEMPLATE="$OPTARG" ;;
		v) VOLSIZE="$OPTARG" && check_valid_volsize ;;
		y) _ASSM_Y="true" ;;
		z) U_ZOPT="$OPTARG" ;;
		Z) R_ZOPT="true" ;;
		*) exit 1 ;;
   esac  ;  done  ;  shift $(( OPTIND - 1 ))

	NEWJAIL="$1"

	# Need to track the resuls of assignements. Use a temp file
	_TMP_WARN="${QTMP}/qb_create_warn"  ;  _TMP_PARAMS="${QTMP}/qb_create_params"
	[ -e "$_TMP_WARN" ]   && rm "$_TMP_WARN"
	[ -e "$_TMP_PARAMS" ] && rm "$_TMP_PARAMS"
	mktemp "$_TMP_WARN"   > /dev/null
	mktemp "$_TMP_PARAMS" > /dev/null

	# Revert all changes in the case of an error
	trap "cleanup_trapped" INT TERM HUP QUIT EXIT
}

evaluate_p_option() {
	_optarg="$1"

	# Enables multiple -p options
	_param=$(echo $_optarg | sed -En 's/(.*)=.*/\1/p' | tr '[:lower:]' '[:upper:]')
	_value=$(echo $_optarg | sed -En 's/.*=(.*)/\1/p')

	# Main purpose is to check for invalid variable characters. Also prelim check for valid PARAM
	! echo "$ALL_PARAMS" | grep -Eqs -- "$_param" && get_msg_create "_e0" "exit_1"

	# BHYVE_CUSTM does not get checked for validity
	[ ! "$_param" = "BHYVE_CUSTM" ] && _PARAMS="$_PARAMS $_param"

	# Some PARAMS are multi line. Will be sorted later. Very sensitive escapes and evals.
   if chk_isblank "$(eval echo \${$_param})" ; then
		eval $_param=\"\${_value}\"
	else
		# Only assign value if it's a multi line PARAM. Else there's potential for duplicate params
		echo $MULT_LN_PARAMS | grep -qs "$_param" \
			&& eval $_param="\$(echo \${$_param} ; echo "$_value")"
	fi
}

checks_master() {
	# Parameter assignment precedence:  1) command line, 2) template, 3) #default in qmap.
	# The set of checks and parameter assignments are somewhat complicated and intertwined,
	# in large part, due to overlap of many qmap parameters for both jails and VMs, but also due
	# to attempting to optimistically "fill in the blanks" for users that dont specify all params.

	# Check that proposed name is available and valid
	chk_avail_jailname "$NEWJAIL" || exit 1

	# TEMPLATE must have a not-null value for get_jail_parameter to function without an error
	[ -z "$TEMPLATE" ] && TEMPLATE="none"

	# Switch between install VM, vs normal operations
	[ "$INSTALL" ] && checks_install	|| optimistic_vitals_assignments

	checks_jailVM_congruency

	checks_parameters

	checks_zopts

	# One more check for new install rootVM, to ensure there's a way to connect to it
	[ "$INSTALL" ] && [ "$VNCRES" = "none" ] && [ "$TMUX" = "false" ] \
															&& get_msg_create "_w4" >> $_TMP_WARN
}

checks_install() {
	# Installing a new rootVM comes with different vitals assignments

	# Safety checks, in case the user specified conflicting vital parameters for the new VM
	: ${CLASS:=rootVM} && [ "$CLASS" = "rootVM" ] || get_msg_create "_e8" "exit_1"
	: ${ROOTENV:=$NEWJAIL} && [ "$ROOTENV" = "$NEWJAIL" ] || get_msg_create "_e8_1" "exit_1"
	root_cl="rootVM"

	# Must specify volsize; and check existence of the ISO
	[ -z "$VOLSIZE" ] && get_msg_create "_e8_2" "exit_1"
	[ -e "$INSTALL" ] || get_msg_create "_e8_3" "exit_1"

	chk_valid_zfs "${R_ZFS}/${NEWJAIL}" && get_msg_create "_e8_4" "exit_1"

	# Add qmap line to launch VM with ahci-cd ISO
	echo "$NEWJAIL  BHYVE_CUSTM  -s #,ahci-cd,${INSTALL}" >> $_TMP_PARAMS
}


optimistic_vitals_assignments() {
	# Parameter assignments based on precedence. Fill-in-the-blanks. jail/VM congruency checks.

	# CL options take precedence, followed by -t <template>, followed by #default in quBSD.conf
	[ -z "$CLASS" ] && ! get_jail_parameter -d CLASS "$TEMPLATE" \
			&& get_msg_create "_e1" "exit_1" "CLASS"
	[ -z "$ROOTENV" ] && ! get_jail_parameter -d ROOTENV "$TEMPLATE" \
			&& get_msg_create "_e1" "exit_1" "ROOTENV"
	[ -z "${CLASS##disp*}" ] && [ "$TEMPLATE" = "none" ] \
			&& ! get_jail_parameter -d TEMPLATE "$TEMPLATE" \
			&& get_msg_create "_e1" "exit_1" "TEMPLATE"

	# Need CLASS of ROOTENV to check for jail/VM congruency among vital parameters
	root_cl=$(sed -nE "s/^${ROOTENV}[[:blank:]]+CLASS[[:blank:]]+//p" $QMAP)
}

checks_jailVM_congruency() {

	# TEMPLATE is an important switch for how PARAMs are derived.
	if [ ! "$TEMPLATE" = "none" ] ; then
		_PARAMS="$_PARAMS TEMPLATE"
		temp_cl=$(sed -nE "s/^${TEMPLATE}[[:blank:]]+CLASS[[:blank:]]+//p" $QMAP)
		temp_params=$(/usr/local/bin/qb-list -j $TEMPLATE | grep -E "^$TEMPLATE " | awk '{print $2}')

		# Add template params unique from #default, to the PARAM list (unless already specified).
		for t_par in $temp_params ; do
			! echo "$_PARAMS" | grep -Eqs "$t_par" && _PARAMS="$_PARAMS $t_par" \
																&& get_jail_parameter "$t_par" "$TEMPLATE"
		done
	fi

	# Vital parameters must either be all jails
	if ! chk_isvm -c "$CLASS" ; then
		chk_isvm -c "$root_cl" && get_msg_create "_e2" "exit_1"
		[ ! "$TEMPLATE" = "none" ] && chk_isvm -c "${temp_cl}" && get_msg_create "_e2" "exit_1"

	# Or vital parameters must be all VMs
	elif chk_isvm -c "$CLASS" ; then
		! chk_isvm -c "${root_cl}" && get_msg_create "_e2" "exit_1"
		[ ! "$TEMPLATE" = "none" ] && ! chk_isvm -c "${temp_cl}" && get_msg_create "_e2" "exit_1"
	fi
}

checks_parameters() {

	# Due to filling in blanks with defaults, and [-p], some PARAMs might be duplicated on the list.
	_PARAMS=$(echo "$_PARAMS"  | tr ' ' '\n' | sort -u | uniq | tr '\n' ' ' | sed '/^$/ d')

	# Get the parameter_lists again, this time with CLASS separation
	get_parameter_lists

	# Check all _PARAMS passed via command line
	for _PAR in $FILT_PARAMS ; do
		# Convert to lower case for chk_valid functions
		_par=$(echo $_PAR | tr '[:upper:]' '[:lower:]')
		_VAL=$(eval echo \"\${$_PAR}\")

		# Only check validity of PARAMS that were input by user [-p] or via the <template>
		if echo "$_PARAMS" | grep -Eqs "$_PAR" ; then

			# For INSTALL CLASS and ROOTENV dont exist yet for testing. Skip checks.
			if ! ([ "$INSTALL" ] && ( [ "$_PAR" = "CLASS" ] || [ "$_PAR" = "ROOTENV" ] )) ; then
				# for-loop takes care of cases of multiple values for _PAR
				for _val in $_VAL ; do
					eval "chk_valid_${_par}" '--' "$_val" || get_msg_create "_e4" "exit_1" "$_PAR"
				done
			fi
			# IPv4 validity was checked, but conformance with quBSD conventions was not.
			[ "$_PAR" = "IPV4" ] && chk_isqubsd_ipv4 "$IPV4" "$NEWJAIL"  >> "$_TMP_WARN"
		fi

		# Get the #default value for the PARAM, for comparison in the next switch
		_def=$(sed -En "s/^#default[[:blank:]]+${_PAR}[[:blank:]]+//p" $QMAP)

		# Vital PARAMs should be line specified in qmap, even if the same as #default
		if [ "$_PAR" = "CLASS" ] || [ "$_PAR" = "ROOTENV" ] || [ "$_PAR" = "TEMPLATE" ] ; then
			eval echo "$NEWJAIL  $_PAR  $_VAL"  >> "$_TMP_PARAMS"

		# Both are null, do nothing
		elif [ -z "$_def" ] && [ -z "$_VAL" ] ; then :

		# PARAMS specified by user, that are the same as #default, dont make a unique qmap line
		elif [ "$_def" = "$_VAL" ] || [ -z "$_VAL" ] ; then
			echo "#default  ${_PAR}  $_def"  >> "$_TMP_PARAMS"
		else
			for _val in $_VAL ; do
				eval echo "$NEWJAIL  $_PAR  $_val"  >> "$_TMP_PARAMS"
			done
		fi

		# Unset _VAL so that previous values dont affect next cycle
		unset _VAL
	done
}

checks_zopts() {
	# Make sure U_ZOPT [-z] value specified is appropriate for jail/VM

	# [-z] for VMs must either duplicate, or have [-v]
	if [ "$U_ZOPT" ] && chk_isvm -c "$CLASS" ; then
		case $U_ZOPT in
			dupl) : ;;
			empty) [ -z "$VOLSIZE" ] && get_msg_create "_e5_4" "exit_1" ;;
			*) get_msg_create "_e5" "exit_1" ;;
		esac
	fi

	# Check [-z] value for jail
	[ "$U_ZOPT" ] && ! chk_isvm -c "$CLASS" \
			&& ! echo "$U_ZOPT" | grep -Eq "^(dupl|dirs|empty)\$" && get_msg_create "_e5" "exit_1"
}

check_valid_volsize() {
   # Check that the volsize was given in proper format
	! echo "$VOLSIZE" | grep -Eqs '(^[0-9]+(\.[0-9]*)?|^\.[0-9]+)(T|t|G|g|M|m|K|k)$' \
																				&& get_msg_create "_e5_1" "exit_1"
	# Convert to raw bytes for comparison
	_vol=$(echo $VOLSIZE | sed -nE "s/.\$//p")
	_avail=$(zfs list -pHo available zusr)

	case $VOLSIZE in
		*T|*t) _vol=$(echo "scale=0 ; $_vol * 1000000000000" | bc | grep -Eo "^[[:digit:]]+") ;;
		*G|*g) _vol=$(echo "scale=0 ; $_vol * 1000000000" | bc | grep -Eo "^[[:digit:]]+") ;;
		*M|*m) _vol=$(echo "scale=0 ; $_vol * 1000000" | bc | grep -Eo "^[[:digit:]]+") ;;
		*K|*k) _vol=$(echo "scale=0 ; $_vol * 1000" | bc | grep -Eo "^[[:digit:]]+") ;;
	esac

	# Check the values, and exit if bad
	[ "$_vol" -lt 80000000 ] && get_msg_create "_e5_2" "exit_1"
	[ "$_vol" -gt "$_avail" ] && get_msg_create "_e5_3" "exit_1"
}

assign_datasets() {
	# To prevent ambiguity/conflicts, all combos of [-c <class>], and class of the <template> are
	# considered. Case statement provides clarity, and opportunity to handle special cases.
	# Also, checks have removed jail/VM conflicts, so no need to consider any jail/VM combos

	case "${CLASS}_${temp_cl}" in
		# NOTE- some vital PARAMs were set to the #default, and dont need to appear here

		rootjail_)  # rootjails require [-t <template>]
			get_msg_create "_e6" "exit_1"
		;;

		app*_|app*_root*|app*_app*|app*_disp*)
			# [-Z] is only for creating rootjails, not appjails from rootjails
	     	[ "$R_ZOPT" ] && get_msg_create "_e7" "exit_1"

			# If no template for zusr, try to find one.
			( [ -z "$temp_cl" ] || [ -z "${temp_cl##root*}" ] ) && TEMPLATE="${ROOTENV}-template"

			R_ZPARENT="${R_ZFS}/${ROOTENV}"
			U_ZPARENT="${U_ZFS}/${TEMPLATE}"

			# Handle missing zusr dataset. For VMs, minimum block device size that zfs allows, is 80M
			if ! chk_valid_zfs "$U_ZPARENT" ; then
				U_ZOPT="empty"
				if chk_isvm -c "$CLASS" ; then
					[ -z "$VOLSIZE" ] && VOLSIZE="80M"
					get_msg_create "_w7" >> $_TMP_WARN
				else
					get_msg_create "_w6" >> $_TMP_WARN
				fi
			fi
		;;

		disp*_app*)  # [-Z] is only for creating rootjails
	     	[ "$R_ZOPT" ] && get_msg_create "_e7" "exit_1"
			R_ZPARENT="${R_ZFS}/${ROOTENV}"
			U_ZPARENT="${U_ZFS}/${TEMPLATE}"

			# Dispjails always clone from another jail
			U_ZOPT="clone"
		;;

		rootVM_)  # New rootVM from install
			R_ZPARENT="${R_ZFS}/${NEWJAIL}"
			U_ZOPT="skip"

			# The checks/assignments after this, arent applicable to new VM installation
			return 0
		;;

		root*_root*)  # New rootjail from any other rootjail.
			R_ZPARENT="${R_ZFS}/${TEMPLATE}"
			R_ORIGIN="${R_ZFS}/${TEMPLATE}"
			U_ZOPT="skip"
		;;

		disp*_root*)  # Can create a dispjail from a rootjail too.
			R_ZPARENT="${R_ZFS}/${TEMPLATE}"
			U_ZOPT="skip"

			# If the user entered conflicting options, error and exit
			[ ! "$TEMPLATE" = "none" ] && [ ! "$TEMPLATE" = "$ROOTENV" ] \
																					&& get_msg_create "_e9" "exit_1"
		;;

		# New rootjail, but checks for [-Z]. Ensures user intends new rootjail from app/disp jail.
		root*_app*|root*_disp*)
			[ "$R_ZOPT" ] || get_msg_create "_e10" "exit_1"
			R_ZPARENT="${R_ZFS}/${TEMPLATE}"
			R_ORIGIN=$(zfs list -Ho origin "${R_ZFS}/${TEMPLATE}" | sed -E "s/\@.*//")
			U_ZOPT="skip"
		;;

		# Provide a way to simply copy an existing dispjail. This is NOT creating a disp of a disp
		disp*_disp*)
			R_ZPARENT="${R_ZFS}/${ROOTENV}"

			# We need to replace the previous TEMPLATE assignment, as it references a dispjail
			TEMP_TEMP=$(get_jail_parameter -deq TEMPLATE $TEMPLATE)
			sed -i '' -E "s/^(${NEWJAIL}[[:blank:]]+TEMPLATE ).*/\1 ${TEMP_TEMP}/" $_TMP_PARAMS

			# Either assign the valid zusr dataset to clone dispjail, or set it to skip later on.
			if chk_valid_zfs "${U_ZFS}/${TEMP_TEMP}" ; then
				U_ZPARENT="${U_ZFS}/${TEMP_TEMP}"
				TEMPLATE="$TEMP_TEMP"
				U_ZOPT="clone"
			else
				U_ZOPT="skip"
			fi
		;;
	esac

	# If U_ZOPT wasn't specified, assign the default value: <dupl>
	[ "$U_ZPARENT" ] && [ -z "$U_ZOPT" ] && U_ZOPT="dupl"

	# Root dataset was derived from <template>. Check that it exists.
	chk_valid_zfs "$R_ZPARENT" || get_msg_create "_e11" "exit_1"

	# New rootVM [-i] already returned from function
	# Temporary snapshots to be used for jail duplication.
	if [ -z "${CLASS##root*}" ] ; then
		R_SNAP="${R_ZPARENT}@$(date +%s)"
		zfs snapshot "$R_SNAP" > /dev/null 2>&1

		# The new rootjail should reference itself as the rootjail, and not the template
		sed -i '' -E "s/ROOTENV[[:blank:]]+${ROOTENV}/ROOTENV ${NEWJAIL}/g"  $_TMP_PARAMS

	elif [ -z "${CLASS##app*}" ] && [ "$U_ZOPT" = "dupl" ] ; then
		U_SNAP="${U_ZPARENT}@$(date +%s)"
		zfs snapshot "$U_SNAP" > /dev/null 2>&1
	fi
}

confirm_creation() {
	clear
	get_msg_create "_w0" "_cont"

	# Show the disksize that will be occupied by creating the new jail
	case "${CLASS}_${U_ZOPT}" in
		rootVM_skip) get_msg_create "_w1_4" "_cont" ;;
		root*) get_msg_create "_w1" "_cont" ;;
		app*_dupl) get_msg_create "_w1_1" "_cont" ;;
		appVM_empty) get_msg_create "_w1_2" "_cont" ;;
		disp*) get_msg_create "_w1_3" "_cont" ;;
	esac

	# Show the final result of jail parameters
	get_msg_create "_w3" "_cont"

	# Warnings for jail parameters.
	if [ -s "$_TMP_WARN" ] ; then
		# Regularizes a single blank line at the end (instead of none, or multiple blank lines).
		printf '%s\n' "$(cat $_TMP_WARN)" | sed '/./,$!d' ; echo ""
	fi

	# Get final confirmation, unless [-y] was specified
	if ! [ "$_ASSM_Y" ] ; then
		get_msg_create "_w5" "_cont"
		get_user_response || exit 0
	fi
}

change_datasets() {
	# The AUTOSNAP value is needed for the new datasets
	AUTOSNAP=$(sed -En "s/.* AUTOSNAP[[:blank:]]+//p" $_TMP_PARAMS)

	# ZROOT changes: Only a new ROOTENV is duplicated. Everything else is cloned.
	if [ -z "${CLASS##rootVM}" ] ; then
		# Create the empty dataset
		zfs create -V ${VOLSIZE} -o volmode=dev -o qubsd:autosnap="$AUTOSNAP" \
																			"${R_ZPARENT}" && return 0
	elif [ -z "${CLASS##root*}" ] ; then
		echo ''
		zfs send -vP "$R_SNAP" | zfs recv -vo qubsd:autosnap="$AUTOSNAP" "${R_ZFS}/${NEWJAIL}"
	else
		reclone_zroot "$NEWJAIL" "$ROOTENV"
	fi

	# U_ZOPT should've been defined already. Handle zusr dataset
	case "$U_ZOPT" in
		skip) return 0
		;;

		dupl) # Full duplication of zfs data to new dataset
			echo ''
			zfs send -vP "$U_SNAP" | zfs recv -vo qubsd:autosnap="$AUTOSNAP" "${U_ZFS}/${NEWJAIL}"
			chk_isvm -c "$CLASS" && echo success && return 0
		;;

		clone) # Renaming of datasets and files is handled internally to the function
			reclone_zusr "$NEWJAIL" "$TEMPLATE"
			return 0
		;;

		dirs)
			# Create the empty dataset
			zfs create -o qubsd:autosnap="$AUTOSNAP" "${U_ZFS}/${NEWJAIL}"

			# Create the directory mapping of the template
			for _dir in $(find "${M_ZUSR}/${TEMPLATE}" -type d) ; do
			   _newdir=$(echo $_dir | sed -e "s#${M_ZUSR}/${TEMPLATE}#${M_ZUSR}/${NEWJAIL}#")
				mkdir -p "$_newdir" > /dev/null 2>&1
			done
		;;

		empty) # Create the empty dataset/volume
			if chk_isvm -c "$CLASS" ; then
				zfs create -V ${VOLSIZE} -o volmode=dev -o qubsd:autosnap="$AUTOSNAP" \
																			"${U_ZFS}/${NEWJAIL}" && return 0
			else
				zfs create -o qubsd:autosnap="$AUTOSNAP" "${U_ZFS}/${NEWJAIL}"
			fi

		;;
	esac

	# Jail types that don't need the edits below, have already exited the function.
	# Make sure flags are down for rw/etc directory
	chflags -R noschg ${M_ZUSR}/${NEWJAIL}/rw/etc > /dev/null 2>&1

   # Fix fstab
	if [ -e "${M_ZUSR}/${NEWJAIL}/rw/etc/fstab" ] ; then

		# Replace template with newjail name
		sed -i '' -E "s/${TEMPLATE}/${NEWJAIL}/g" ${M_ZUSR}/${NEWJAIL}/rw/etc/fstab
	else

		# fstab is required for jail to start, even if everything else is empty
		mkdir -p ${M_ZUSR}/${NEWJAIL}/rw/etc/
		head -1 /etc/fstab > ${M_ZUSR}/${NEWJAIL}/rw/etc/fstab
	fi

	# If a special pw user file was copied over, it needs to be modified.
	if pw -V ${M_ZUSR}/${NEWJAIL}/rw/etc/ usershow 1001 >> /dev/null 2>&1 ; then
		[ -e ${M_ZUSR}/${NEWJAIL}/usr/home/${NEWJAIL} ] \
													|| mkdir -p ${M_ZUSR}/${NEWJAIL}/usr/home/${NEWJAIL}
		pw -V ${M_ZUSR}/${NEWJAIL}/rw/etc/ usermod 1001 -l $NEWJAIL
		pw -V ${M_ZUSR}/${NEWJAIL}/rw/etc/ groupmod 1001 -l $NEWJAIL
		pw -V ${M_ZUSR}/${NEWJAIL}/rw/etc/ usermod 1001 -d /usr/home/${NEWJAIL}  >> /dev/null 2>&1
	fi

	# home directory must be renamed (if it exists)
	mv ${M_ZUSR}/${NEWJAIL}/usr/home/${TEMPLATE} \
													${M_ZUSR}/${NEWJAIL}/usr/home/${NEWJAIL} > /dev/null 2>&1
}

change_jconf() {

	# Make a tmp file for /etc/jail.conf edits
	_TMP_JCONF="${QTMP}/qb_create_jconf"
	mktemp $_TMP_JCONF > /dev/null

	# This is a bit ineligant, but [-Z] with an appjail, TEMPLATE needs converted to the ROOTENV;
	# and the fstab probably tries to link zusr/rw/etc/fstab instead of /qubsd/<jail>/etc/fstab
	if [ "$CLASS" = "rootjail" ] ; then
		TEMPLATE="$ROOTENV"
		chflags -R noschg ${M_QROOT}/${NEWJAIL}/etc

		# You can't just copy over linked file. Must remove it
		rm -f ${M_QROOT}/${NEWJAIL}/etc/fstab
		cp -a "${M_QROOT}/0base/etc/fstab" "${M_QROOT}/${NEWJAIL}/etc"
	fi

	# Modify /etc/jail.conf
	sed -nE "/^${TEMPLATE}[[:blank:]]*\{/,/\}/p" $JCONF >> $_TMP_JCONF
	sed -i '' -E "s/${TEMPLATE}/${NEWJAIL}/" $_TMP_JCONF

	if [ "$CLASS" = "rootjail" ] ; then
		sed -i '' -e "/# Rootjails/r $_TMP_JCONF" $JCONF

	elif [ -z "${NEWJAIL##net-*}" ] ; then
		sed -i '' -e "/# Net Jails/r $_TMP_JCONF" $JCONF

	elif [ "$CLASS" = "dispjail" ] ; then
		sed -i '' -e "/# Disp Jails/r $_TMP_JCONF" $JCONF

	else
		sed -i '' -e "/# Production Jails/r $_TMP_JCONF" $JCONF
	fi
}

guided_mode() {

	# OPENING MESSAGE
		clear && get_msg_create "_m0" && read _dummyvar

	# CLASS
		clear && get_msg_create "_m1"
		get_msg_create "_resp1" "_cont" "CLASS"

	# ROOTENV
		clear && get_msg_create "_m2"

		# Messages diverge based on CLASS
		[ "$CLASS" = "rootjail" ] && get_msg_create "_m3" || get_msg_create "_m4"

		get_msg_create "_resp1" "_cont" "ROOTENV"

	# TEMPLATE
		clear

		# Messages diverge based on CLASS
		case $CLASS in
			rootjail) get_msg_create "_m5" ; get_msg_create "_resp2" ;;
			appjail|cjail)  get_msg_create "_m6" ; get_msg_create "_resp2" ;;
			dispjail) get_msg_create "_m7" ;;
		esac

		# Complex decision tree unavoidable, due to the potential branches.
		case ${CLASS}_${_RESPONSE} in

			# Assign the rootjail TEMPLATE as rootjail, since that's what'd normally happen
			rootjail_1) [ "$CLASS" = "rootjail" ] && TEMPLATE="$ROOTENV" && return 0 ;;
			rootjail_2) [ "$CLASS" = "rootjail" ] && TEMPLATE="$ROOTENV" ;;
			rootjail_3) get_msg_create "_resp2" ;;

			# Will either use template and return to main program, or stay and get parameters
			appjail_1|cjail_1)  return 0 ;;
			appjail_2|cjail_2)  : ;;

			# These cases need to get user entered template, show parameters, and confirm again
			appjail_3|cjail_3|dispjail*)
					get_msg_create "_resp1" "_cont" "TEMPLATE"

					# Give user opportunity to keep checking different template parameters
					while : ; do
						clear && get_msg_create "_m9"	&& get_msg_create "_resp2"

						! [ "$_RESPONSE" = "3" ] && break
						get_msg_create "_resp1" "_cont" "TEMPLATE"
					done

					# A response of 1, means to use the template for rest of params.
					[ "$_RESPONSE" = "1" ] && return 0
			;;
		esac

	# REMAINING JAIL PARAMETERS, ONE BY ONE

	# AUTOSTART
		clear && get_msg_create "_m11" && get_msg_create "_resp1" "_cont" "AUTOSTART"

	# AUTOSNAP
		get_msg_create "_m12" && get_msg_create "_resp1" "_cont" "AUTOSNAP"

	# CPUSET
		get_msg_create "_m13" && get_msg_create "_resp1" "_cont" "CPUSET"

	# GATEWAY
		clear && get_msg_create "_m14" && get_msg_create "_resp1" "_cont" "GATEWAY"

	# IPV4
		clear && get_msg_create "_m15" && get_msg_create "_resp1" "_cont" "IPV4"

	# MAXMEM
		clear && get_msg_create "_m16" && get_msg_create "_resp1" "_cont" "MAXMEM"

	# MTU
		get_msg_create "_m17" && get_msg_create "_resp1" "_cont" "MTU"

	# NO_DESTROY
		get_msg_create "_m18" && get_msg_create "_resp1" "_cont" "NO_DESTROY"

	# SECLVL
		get_msg_create "_m19" && get_msg_create "_resp1" "_cont" "SECLVL"

	# SCHG
		clear && get_msg_create "_m20" && get_msg_create "_resp1" "_cont" "SCHG"
}

launch_install() {
	# Launch the vm to a detached process
	exec qb-cmd $NEWJAIL
}

cleanup_finished() {
	# Once complete, only certain temporary item need removed.

	# Remove the TMP files if they exist (ignore if they dont)
	rm $_TMP_WARN $_TMP_PARAMS $_TMP_JCONF > /dev/null 2>&1

	# Remove the snapshots if they exist (ignore if they dont)
	[ "$R_SNAP" ] && zfs destroy $R_SNAP > /dev/null 2>&1
	[ "$U_SNAP" ] && zfs destroy $U_SNAP > /dev/null 2>&1

	# Helps to standardize having a newline if program is ctrl-c stopped
	echo ''

	# Unset the trap (or else EXIT will cause all changes to be reverted)
	trap '' INT TERM HUP QUIT EXIT

	# INSTALL has further actions. But if _exit was set to 1, it was trapped. Either way, exit.
	( [ "$_exit" = "1" ] || [ -z "$INSTALL" ] ) && eval exit "$_exit"
}

cleanup_trapped() {
	# Can't be leaving partially transferred datasets and pieces of newjail laying around
	zfs destroy -rRf "${R_ZFS}/${NEWJAIL}" > /dev/null 2>&1
	zfs destroy -rRf "${U_ZFS}/${NEWJAIL}" > /dev/null 2>&1

   sed -i '' -E "/^${NEWJAIL}[[:blank:]]/d" $QMAP > /dev/null 2>&1
	sed -i '' -E "/^${NEWJAIL}(\{|[[:blank:]])/,/^}/d" $JCONF > /dev/null 2>&1

	# Items above should only be removed if the operation was incomplete
	# Items below should be removed regardless of complete/incomplete
	_exit='1' ; cleanup_finished
}

main() {
	[ "$GUIDED" ] && guided_mode

	assign_datasets

	confirm_creation

	# Add the parameters to qmap. BHYVE_CUSTM has extra spaces. Remove at least the first one
	grep -E "^$NEWJAIL" "$_TMP_PARAMS" | column -t >> $QMAP
	sed -i '' -E "s/(BHYVE_CUSTM[[:blank:]]+[^[:blank:]]+)[[:blank:]]+/\1 /" $QMAP

	change_datasets

	[ -z "${CLASS##*jail}" ] && change_jconf

	_exit='0' ; cleanup_finished

	launch_install &

	# Give VM a moment for the VM to launch, then delete the special qmap line, and exit
	sleep 3
	sed -i '' -E "\@^${NEWJAIL}[[:blank:]]+BHYVE_CUSTM[[:blank:]]+-s #,ahci-cd,${INSTALL}@d" $QMAP
}

get_global_variables

get_parameter_lists -n

get_options "$@"

checks_master

main



