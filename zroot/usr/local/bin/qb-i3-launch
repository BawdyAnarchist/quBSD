#!/bin/sh

. /usr/local/lib/quBSD/quBSD.sh
. /usr/local/lib/quBSD/msg-i3-launch.sh

get_options() {
	while getopts f:Fht: opts ; do case $opts in
		f) FILE="${OPTARG}" || get_msg2 -Eum _e1 ;;
		F) FORCE="true" ;;
		h) get_msg2 -eu ;;
		t) _TIMEOUT="${OPTARG}" ;;
		*) exit 1 ;;
	esac  ;  done  ;  shift $(( OPTIND - 1 ))
}

trap_func() {
	rm $CONF $JAILS > /dev/null 2>&1
	kill -15 $_pid_stat > /dev/null 2>&1
}

parse_config() {
	# Check TIMEOUT, if it was specified
	[ "$_TIMEOUT" ] && { chk_integer -g 5 -l 600 -q -- "$_TIMEOUT" \
									&& _TIMEOUT="-t $_TIMEOUT" || get_msg2 -Em _e2 ;}

	# Assign default file if one wasn't optioned
	FILE="${FILE:=${HOME}/.config/i3/i3launch.conf}"

	# Set variable, and trap to remove it on exit
	CONF=$(mktemp  -t "quBSD/i3-launch.conf")
	JAILS=$(mktemp -t "quBSD/i3-launch-jails")
	trap "trap_func ; rm_errfiles" INT TERM HUP QUIT EXIT

	# Copy the launch config to tmp ($CONF), and remove comments and blank lines
	cp -a $FILE $CONF
	sed -i '' -e "/^$/ d ; /^[[:blank:]]*#.*/ d" $CONF

	# Get all running windows. Adds "WORKSPACE" at bottom, to simplify sed command later on).
	WINDS=$(/usr/local/bin/qb-i3-windows| sed "s/Jail://g" | sed "$ a\\
WORKSPACE")
}

qb_start_jails() {

	# Create a popup so user can monitor jail starts, then remove it later
	xterm -fs 12 -e csh -c \
		'i3-msg floating enable , resize set height 1000 ; /usr/local/bin/qb-stat' &
	_pid_stat="$!"

	# Remove host and NO_WINDOW lines, and save to tmp file
	grep -vE '(host|NO_WINDOW)' $CONF | awk '{print $2}' | uniq > $JAILS

	# Turn on any jails not started
	/usr/local/bin/qb-start -f $JAILS $_TIMEOUT > /dev/null 2>&1 || get_msg2 -Em _e3

	# Remove the temporary monitoring popup
	kill -15 $_pid_stat
}

check_existing() {
	# This protects against double running or double launching the same windows.
	# Returns 0 if the combo of _WS _LOC _CMD already exists. Return 1 if not

	# FORCE option skips checks and launches everything
	[ -n "$FORCE" ] && return 1

	# Window check doesn't apply to commands with no window to launch
	[ "$_LOC" = "!NO_WINDOW" ] && return 1

	# Getting just the first part of the command makes it easier to match later on.
	_cmd=$(echo $_CMD | awk '{print $1}')

	# Isolate the windows/programs for the workspace in question; then
			# check if an existing jail with that window name already exists.
	echo "$WINDS" | sed -En "/WORKSPACE: ${_WS}\$/,/WORKSPACE/p" | sed "$ d" | \
			grep -Eiq "${_cmd}.*${_LOC}"  &&  return 0  ||  return 1
}

wait_for_window() {
	_loop=1
	while : ; do
		# Wait a moment for window to launch
		sleep .2

		# Jailname of window is same as the command. Func converts `hostname` to 'host'
		if [ "$(get_info -e _XJAIL)" = "$_LOC" ] ; then

			# The i3launch $_cmd might be slightly different than xprop or ps, so check both.
			ps $(get_info -e _XPID) | grep -Eiq "$_cmd" && sleep 1 && break
			get_info -e _XNAME      | grep -Eiq "$_cmd" && sleep 1 && break
		fi

		# If it gets stuck waiting longer than about 6 seconds, just move on
		[ "$_loop" -gt 30 ] && break
		_loop=$(( _loop + 1 ))
	done
}

execute_commands() {
	# Switch workspace
	i3-msg workspace $_WS

	# Execute commands in their respective places
	case "$_LOC" in
		!NO_WINDOW)
			eval "$_CMD"
		;;
		host)
			# Execute the command provided
			eval $_CMD

			# A bit dirty, but it eliminates interference with the eval above
			[ "$?" = "0" ] && wait_for_window
		;;
		*)
			# Execute the command provided
			eval "/usr/local/bin/qb-cmd $_LOC $_CMD"

			# A bit dirty, but it eliminates interference with the eval above
			[ "$?" = "0" ] && wait_for_window
		;;
	esac
}

main() {
	# Start jails first before launching
	qb_start_jails

	_cycle=1
	while : ; do
		# Define cycle variables
		_WS=$(sed  -n "$_cycle p" $CONF | awk '{print $1}')
		_LOC=$(sed -n "$_cycle p" $CONF | awk '{print $2}')
		_CMD=$(sed -En "${_cycle}p" $CONF \
				| sed -E "s/[^[:blank:]]+[[:blank:]]+[^[:blank:]]+[[:blank:]]+//")
		# First word in _CMD is easier to find in the atrocious X window commands
		_cmd=$(echo "$_CMD" | awk '{print $1}')

		# If $_WS was blank, then there are no more lines in CONF
		[ -z "$_WS" ] && break

		# This avoids an accidental re-launching of already existing jail/windows
		check_existing || execute_commands > /dev/null 2>&1

		_cycle=$(( _cycle + 1 ))
	done
}

get_global_variables

get_options "$@"

parse_config

main
