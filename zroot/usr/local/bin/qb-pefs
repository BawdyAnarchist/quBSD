#!/bin/sh

while getopts chd:u o ; do
	case $o in
		c) create="true" ;;
		h) help="true" ;;
		d) directory="$OPTARG" ;;
		u) unmount="true" ;;
	esac
done

shift $(( OPTIND - 1 ))

# Get datasets, mountpoints; and define files.
zusr_zfs=$(sed -En "s/^zusr_dataset[[:blank:]]+//p" /usr/local/etc/jail.conf.d/quBSD.conf)
m_zusr=$(zfs get -H mountpoint $zusr_zfs | awk '{print $3}')
jails_zfs=$(sed -En "s/^jails_dataset[[:blank:]]+//p" /usr/local/etc/jail.conf.d/quBSD.conf)
m_jails=$(zfs get -H mountpoint $jails_zfs | awk '{print $3}')

# Define script variables
jail="$1"

define_variables() {
	# If -z $directory, pefs_dirs will find all .pefs.db directories (for unmount)
	rel_directory=$(echo $directory | sed "s:${m_zusr}/${jail}/home/${jail}/::")
	pefs_dirs=$(find ${m_jails}/${jail}/usr/home/${jail}/${rel_directory} -name '.pefs.db' \
														| sed 's:/.pefs.db::g')
	# Default directory if not defined by user
	directory="${directory:-$2}" 
	directory="${directory:-${m_zusr}/${jail}/home/${jail}/crypt}"

	# Must find rel_directory again for ops not related to unmount
	rel_directory=$(echo $directory | sed "s:${m_zusr}/${jail}/home/${jail}/::")
}

define_messages() {
	err1=$(printf "%b" "qb-pefs: ERROR: You must enter a jailname")
	err2=$(printf "%b" "qb-pefs: ERROR: $j is an invalid jailname or has incomplete jail setup")
	err3=$(printf "%b" "qb-pefs ERROR: $directory not a valid" \
					"\ndirectory, and user has not specified the [-c] option to create it")
	err5=$(printf "%b" "qb-pefs ERROR: Failed to load pefs.ko kernel module." \
					"Make sure that pefs-kmod pkg in installed to host")
	msg6=$(printf "%b" "Jail must be on, starting: $jail")
	err7=$(printf "%b" "Start jail: $jail , failed, exiting") 
	msg8=$(printf "%b" "Decrypting container, enter passphrase one more time:")
}

usage() {
	[ "$ERR" ] && printf "%b" "\n$ERR\n"
	echo ""
	echo "qb-pefs: Mounts an encrypted pefs volume inside of a running jail" 
	echo "         Default directory is ${m_zusr}/<jail>/home/<jail>/crypt"
	echo ""
	echo "Usage: qb-pefs <jailname>"
	echo "Usage: qb-pefs [-h] [-d <directory>] <jailname>"
	echo "   -c: (c)reate:  Create and configure new pefs directory" 
	echo "   -d: (d)irectory:  Override default, and mount specified directory" 
	echo "        <directory> must be entered based on location of HOST "
	echo "        <directory> must be inside zusr home directory of jail"
	echo "   -h: (h)elp:  Outputs this help message"
	echo "   -u: (u)nmount:  Removes pefs mount from jail, encrypts files" 
	echo ""
	exit 1
}

checks() {
	if [ "$help" ] ; then
		usage

	elif [ -z "$jail" ] ; then
		ERR="$err1" ; usage

	elif ! `qb-list -qj "$jail"` ; then
		ERR="$err2" ; usage

	elif ! [ -d "$directory" -o -n "$create" ] ; then
		ERR="$err3" ; usage

	elif ! `kldstat | grep -qs "pefs.ko"` ; then
		kldload pefs.ko >> /dev/null 2>&1
		if [ "$?" != "0" ] ; then
			ERR="$err5" ; usage
		fi
	fi
}

main() {
	if [ "$unmount" ] ; then
		for p in $pefs_dirs ; do
			umount -f $p
		done
		exit 0

	elif ! `jls | grep -qs " $jail "` ; then
		printf "%b" "\n$msg6\n"
		jail -c $jail >> /dev/null 2>&1
		[ "$?" != "0" ] && ERR="$err7" && usage
	fi
	
	if [ "$create" ] ; then
		mkdir -p $directory
		chown 1001:1001 $directory
		pefs addchain -fZ $directory
	fi

	pefs mount $directory ${m_jails}/${jail}/usr/home/${jail}/${rel_directory}
	[ "$create" ] && printf "%b" "\n$msg8\n"
	pefs addkey -c ${m_jails}/${jail}/usr/home/${jail}/${rel_directory}
}

define_variables
define_messages
checks
main


