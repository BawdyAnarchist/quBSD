#!/bin/sh

# pefs is tricky when dealing with the nullfs mounts of jails from zusr to zroot
# addkey only affects the mount directory *even if it's nullfs mounted elsewhere*
# In other words, the pefs addchain/remove chain will not follow the nullfs mount
# For this reason, nullfs must be applied again, after pefs addkey, and later removed in order

. /usr/local/lib/quBSD/quBSD.sh
. /usr/local/lib/quBSD/msg-pefs.sh

get_options() {
	while getopts chd:mu opts ; do
		case $opts in
			c) _CMD="create" ;; 
			h) get_msg_pefs "none" "usage_0" ;; 
			d) U_FOLDER="$OPTARG" USERDIR="true" ;;
			m) [ -z "$_CMD" ] && _CMD="mount" || get_msg_pefs "_1" "usage_1" ;; 
			u) [ -z "$_CMD" ] && _CMD="unmount" || get_msg_pefs "_1" "usage_1" ;; 
			*) exit 1 ;;
		esac
	done

	shift $(( OPTIND - 1 ))

	JAIL="$1"

	# Default directory if not defined by user
	U_FOLDER="${U_FOLDER:=${M_ZUSR}/${JAIL}/usr/home/${JAIL}/crypt}"
}

checks() {

	# Must specify an action
	[ -z "$_CMD" ] && get_msg_pefs "_2" "usage_1"

	# Must have a valid jail 
	chk_valid_jail "$JAIL" || get_msg_pefs "none" "usage_1"

	# If performing mount, the directory should already exist. 
	[ "$_CMD" = "mount" ] && ! [ -d "$U_FOLDER" ] && get_msg_pefs "_3" "usage_1"

	# Check that U_FOLDER path is relative to the zusr mount for the jail
	echo "$U_FOLDER" | grep -qE "^${M_ZUSR}/${JAIL}" || get_msg_pefs "_4" "usage_1"
				
	# Make sure pefs kernel module is loaded, try to load, or exit on failure
	kldstat -n pefs.ko > /dev/null 2>&1 || kldload pefs.ko > /dev/null 2>&1 \
			|| get_msg_pefs "_5" "exit_1"
}

unmount_pefs() {
	# If user specified directory, then unmount only that directory 
	if [ -n "$USERDIR" ] ; then 
		# unmount must be done in reverse order. First the nullfs to the zroot/jail
		umount -f $J_FOLDER  > /dev/null 2>&1

		# Then the original pefs mount, which encrypts the files
		umount -f $U_FOLDER  > /dev/null 2>&1

	else
		# Otherwise, search <jail>'s /usr/local for any pefs.db, to remove them all
		[ -e "${M_ZUSR}/${JAIL}/usr" ] \
				&& _zusr_umnt=$(find ${M_ZUSR}/${JAIL}/usr -name '.pefs.db' \
						| sed 's:/.pefs.db::g') 

		# Cycle through discovered directories 
		for _dir in $_zusr_umnt ; do

			# Get the corresponding zroot nullfs mount for the zusr pefs mount
			_jdir=$(echo $_dir | sed "s:${M_ZUSR}:${M_QROOT}:")

			# The nullfs mount under zroot must be removed first. 
			if mount | grep -q $_jdir ; then
				umount -f $_jdir || get_msg_pefs "_6" 
			fi

			# Now the actual pefs mount can be removed. 
			if mount | grep -q $_dir ; then
				umount -f $_dir  || get_msg_pefs "_7" 
			fi
		done
	fi
}

main() {
	# Mount also takes place in running jail. Replace zusr mount with zroot jails mount 
	J_FOLDER=$(echo $U_FOLDER | sed "s:${M_ZUSR}:${M_QROOT}:")	
	
	case $_CMD in 

		create)
			mkdir -p $U_FOLDER > /dev/null 2>&1
			pefs addchain -fZ $U_FOLDER
			chown 1001:1001 $U_FOLDER
		;;

		mount)
			# Start jail if off, or exit
			start_jail "$JAIL" || exit 1

			# Mount the folder and perform decryption
			pefs mount $U_FOLDER $U_FOLDER
			pefs addkey -c $U_FOLDER

			# Must send the nullfs mount over to the jail, so inside jail can see files
			mount_nullfs $U_FOLDER $J_FOLDER
		;;

		unmount)	unmount_pefs
		;;
	esac
}

get_global_variables

get_options "$@"

checks

main

