#!/bin/sh

. /usr/local/lib/quBSD/quBSD.sh
. /usr/local/lib/quBSD/msg-rename.sh

get_options() {
	while getopts ah o ; do
		case $o in
			a) autoupdate="true" ;;
			h) get_msg_qb_rename "none" "usage_0" ;; 
		esac
	done

	shift $((OPTIND -1 ))

	JAIL="$1"
	NEWNAME="$2"
}

define_variables() {
	# Finds jails dependent on the jail to be renamed
	rootj_for=$(sed -nE "s/[[:blank:]]+rootjail[[:blank:]]+${JAIL}\$//p" $JMAP)
	template_for=$(sed -nE "s/[[:blank:]]*template[[:blank:]]+${JAIL}\$//p" $JMAP)
	tunnel_for=$(sed -nE "s/[[:blank:]]+tunnel[[:blank:]]+${JAIL}\$//p" $JMAP)
}

checks() {

	# Checks that JAIL was specified, and valid 
	check_isvalid_jail "$JAIL" "exit_1"

	if [ -z "$NEWNAME" ] ; then
		get_msg_qb_rename "_2" "usage_1"

		err="qb-destroy: Error: jail $JAIL is not properly configured or does not exist" ; usage

	elif [ -z "$autoupdate" ] ; then
        	if [ -n "$rootj_for" ] ; then query="true"
			printf "%b" "\n$JAIL is a rootjail for the following jails: \n$rootj_for" 
		fi
		if [ -n "$template_for" ] ; then query="true"
			printf "%b" "\n\n$JAIL is a template for the following jails: \n$template_for"
		fi
		if [ -n "$tunnel_for" ] ; then query="true"
        		printf "%b" "\n\n$JAIL is a network tunnel for the following jails:" \
					"\n$tunnel_for"
		fi
		if [ -n "$query" ] ; then
			printf "%b" "\n\nWould you like to automatically update these dependencies?" \
				"\n(the jails above will be shutdown and later restarted).  (y/n):  " 
			read cont
			if [ "$cont" = "y" -o "$cont" = "Y" ] ; then 
				autoupdate="true"
			else
				printf "%b" "\n\nOnly $JAIL will be changed, others will remain the same\n"
			fi
		fi
	fi
}

off_jails () {
	printf "%b" "Turning off all relevant jails. This could take a minute.\n"

	# If jail is on, turn it off. If there's a problem, force off
	if `jls | grep -qs " $JAIL "` ; then 
		jail -r $JAIL || jail -R $JAIL
	fi

	# Autoupdate needs any of the dependency jails turned off 
	if [ -n "$autoupdate" ] ; then

		#jails_removed keeps track of which jails were turned off, for later restart 
		for j in $rootj_for; do
			if `jls | grep -qs " $j "` ; then
				jailsremoved="$JAILsremoved $j"
				jail -r $j || jail -R $j
			fi
		done

		for j in $template_for; do
			if `jls | grep -qs " $j "` ; then
				jailsremoved="$JAILsremoved $j"
				jail -r $j || jail -R $j
			fi
		done

		for j in $tunnel_for ; do
			if `jls | grep -qs " $j "` ; then
				jailsremoved="$JAILsremoved $j"
				jail -r $j || jail -R $j
			fi
		done
	fi
}

jrename() {
	chflags -R noschg ${M_ZUSR}/$JAIL

	sed -i '' -e "s/^${JAIL}[[:blank:]]/${NEWNAME}	/g" $JMAP
	sed -i '' -E "s/^${JAIL}[[:blank:]]+\{/${NEWNAME} \{/g" /etc/jail.conf
	sed -i '' -e "s/${JAIL}/${NEWNAME}/g" ${M_ZUSR}/${JAIL}/rw/etc/fstab 

	zfs rename -f ${ZUSR_ZFS}/${JAIL} ${ZUSR_ZFS}/${NEWNAME}
	zfs rename -f ${JAILS_ZFS}/${JAIL} ${JAILS_ZFS}/${NEWNAME}

	mv ${M_ZUSR}/${NEWNAME}/usr/home/${JAIL} \
				${M_ZUSR}/${NEWNAME}/usr/home/${NEWNAME} > /dev/null 2>&1 
	
	# Jails don't necessarily have custom pw; but modify if so
	pw -V ${M_ZUSR}/${NEWNAME}/rw/etc/ usermod -n ${JAIL} -l ${NEWNAME} -d /usr/home/${NEWNAME} > /dev/null 2>&1
}

autoupdate() {
	if [ -n "$autoupdate" ] ; then
		for j in $rootj_for ; do
			qb-edit $j rootjail $NEWNAME
		done

		for j in $template_for ; do
			qb-edit $j template $NEWNAME
		done

		for j in $tunnel_for ; do
			qb-edit $j tunnel $NEWNAME
		done

		printf "%b" "Restarting the following jails: $JAILsremoved \n\n" 
		for j in $JAILsremoved ; do
			jail -c $j
		done
	fi
}

get_global_variables

get_options "$@"

define_variables

checks

off_jails

jrename

autoupdate



