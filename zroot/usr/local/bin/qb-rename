#!/bin/sh

. /usr/local/lib/quBSD/quBSD.sh
. /usr/local/lib/quBSD/msg-rename.sh

get_options() {
	while getopts fhn opts ; do case $opts in
		f) FORCE="true" ;;
		h) get_msg2 -eu ;;
		n) NOUPDATE="true" ;;
		*) exit 1 ;;
   esac  ;  done  ;  shift $(( OPTIND - 1 ))

	JAIL="$1"
	NEWNAME="$2"
}

checks_and_variables() {
	# Check that JAIL was specified, and valid
	! chk_valid_jail -q -- "$JAIL" && [ -z "$FORCE" ] && get_msg2 -Eum _e0

	# Check that the new jailname is available and has no conflicts
	chk_avail_jailname -- "$NEWNAME" || get_msg2 -Eu

	# Variables change if it's a VM or not
	get_jail_parameter -qs ROOTENV $JAIL

	# Finds jails dependent on the jail to be renamed
	get_info _CLIENTS $JAIL

	ROOT_FOR=$(sed -En "/ROOTENV[[:blank:]]+${JAIL}\$/s/^([^[:blank:]]+).*/\1/p" $QMAP)
	TEMPL_FOR=$(sed -En "/TEMPLATE[[:blank:]]+${JAIL}\$/s/^([^[:blank:]]).*/\1/p" $QMAP)

	# Figure out which jails should be restarted
	for _jail in $JAIL $_CLIENTS $ROOT_FOR $TEMPL_FOR ; do
		chk_isrunning "$_jail" && _RESTARTS="$_jail $_RESTARTS"
	done

	if ! chk_isblank "$ROOT_FOR $TEMPL_FOR $_CLIENTS" ; then
		get_msg2 -m _m1
		get_user_response || get_msg2 -em _m2
	fi
}

rename_common() {
	# Stop all jails before renaming. Rename should not happen if stops fails
	/usr/local/bin/qb-stop "$JAIL $_RESTARTS" > /dev/null 2>&1 || get_msg2 -Em _e1

	# Modify qmap. Roojails should update their own rootjail to self
	sed -i '' -E "s/^${JAIL}[[:blank:]]/${NEWNAME}  /g" $QMAP
	[ "$JAIL" = "$ROOTENV" ] && /usr/local/bin/qb-edit -fq ${NEWNAME} ${ROOTENV} ${NEWNAME}

	# Rename associated zfs datasets
	chk_valid_zfs ${U_ZFS}/${JAIL} \
			&& zfs rename -f ${U_ZFS}/${JAIL} ${U_ZFS}/${NEWNAME} \
			&& ! chk_isvm -- $NEWNAME && zfs inherit mountpoint ${U_ZFS}/${NEWNAME}

	chk_valid_zfs ${R_ZFS}/${JAIL} \
			&& zfs rename -f ${R_ZFS}/${JAIL} ${R_ZFS}/${NEWNAME} \
			&& ! chk_isvm -- $NEWNAME && zfs inherit mountpoint ${R_ZFS}/${NEWNAME}
}

rename_jail() {

	# Modify /etc/jail.conf
	sed -i '' -E "s/^${JAIL}[[:blank:]]+\{/${NEWNAME} \{/g" $JCONF

	# Flags down to modify directory names and fstab (if they exist)
	chflags -R noschg ${M_ZUSR}/${JAIL}  >  /dev/null 2>&1

	# Modify fstab (appjails/dispjails only)
	[ -e "${M_ZUSR}/${NEWNAME}/rw/etc/fstab" ] \
		&& sed -i '' -E "s/${JAIL}/${NEWNAME}/g" ${M_ZUSR}/${NEWNAME}/rw/etc/fstab

	# Change home directory if present
	[ -e ${M_ZUSR}/${NEWNAME}/home/${JAIL} ] \
		&& mv ${M_ZUSR}/${NEWNAME}/home/${JAIL} ${M_ZUSR}/${NEWNAME}/home/${NEWNAME}

	# Jails don't necessarily have custom pw; but modify if so
	pw -V ${M_ZUSR}/${NEWNAME}/rw/etc/ usermod -n ${JAIL} -l ${NEWNAME} -d \
															/home/${NEWNAME} > /dev/null 2>&1
}

update_dependencies() {

	for _jail in $ROOT_FOR ; do
		[ "$_jail" = "$JAIL" ] || /usr/local/bin/qb-edit -fq $_jail $ROOTENV $NEWNAME
	done

	for _jail in $TEMPL_FOR ; do
		/usr/local/bin/qb-edit -fq $_jail TEMPLATE $NEWNAME
	done

	for _jail in $_CLIENTS ; do
		/usr/local/bin/qb-edit -fq $_jail GATEWAY $NEWNAME
	done
}

main() {
	# A number of variables are needed. Integrate this into checks
	checks_and_variables

	# Rename things that VMs and jails share in common
	rename_common

	# Rename things specific to jails
	! chk_isvm -- "$JAIL" && rename_jail

	# Update _CLIENTS , ROOTENV , and TEMPLATE dependencies
	[ -z "$NOUPDATE" ] && update_dependencies

	# Inform rename is complete
	get_msg2 _m3

	# Restart all jails that were stopped. Have to change the RESTART list with NEWNAME
	[ -n "$_RESTARTS" ] && get_msg2 _m4 && /usr/local/bin/qb-start \
		"$(echo $_RESTARTS | sed "s/${JAIL}[[:blank:]]*\$/${NEWNAME}/")"
}

get_global_variables

get_options "$@"

main
