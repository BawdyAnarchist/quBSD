#!/bin/sh

. /usr/local/lib/quBSD/quBSD.sh
. /usr/local/lib/quBSD/msg-ephm.sh

get_options() {
	while getopts hinr opts ; do case $opts in
		h) get_msg2 -eu ;;
		i) _i3wm="true" ;;
		n) _NEWWIND="xterm -e" ;;
		r) _USER="root" ;;
		*) exit 1 ;;
   esac  ;  done  ;  shift $(( OPTIND - 1 ))

	# Define script variables
	JAIL="$1" ; shift
	_CMD="$@"
	DATETIME=$(date +%b%d_%H%M)
	NEWSNAP="${U_ZFS}/${JAIL}@EPHM${DATETIME}"
}

parse_jail_vars() {
	# If X is running, get the jailname of the active window
	if pgrep -q Xorg ; then
		# Jailname of the active window is assigned to: $_XJAIL
		get_info _XJAIL
	fi

	# Get a default SHELL, _CMD, and JAIL (if not already specified)
	${_CMD:=$(get_jail_shell -e $_XJAIL)}
	: ${JAIL:=$_XJAIL}
	chk_valid_jail -- "$JAIL" || get_msg2 -Eum _e2

	# Make name visually easy to identify. Cycle to find available name if in use
	NEWJAIL="EPHM-${JAIL}"  ;  _cycle=0
	while ! chk_avail_jailname -- "$NEWJAIL" ; do
		_cycle=$(( _cycle + 1 ))
		NEWJAIL="EPHM-${JAIL}_${_cycle}"
	done

	# If user wasnt assigned as root, assign it as the regular user now
	_USER=${_USER:=$NEWJAIL}
}

create_newjail() {
	# New snapshot ensures the most up-to-date version of the template jail
	zfs snapshot $NEWSNAP

	# Trap destroy snapshot and anything else that might exist after qb-create
	trap 'destroy_ephemeral' INT TERM HUP QUIT EXIT

	# Create dispjail and disable the no_destroy protection
	/usr/local/bin/qb-create -y -p GATEWAY=none -p IPV4=none -p NO_DESTROY=false \
		-p AUTOSNAP=false -c dispjail -t $JAIL $NEWJAIL > /dev/null 2>&1
}

run_command() {
	if [ -n "$_i3wm" ] ; then
		# i3-specific command. Launch a floating terminal for the dispjail (ephemeral jail)
		xterm -e csh -c \
			"i3-msg -q floating enable, move position center; /usr/local/bin/qb-cmd $NEWJAIL"
	else
		qb-cmd -u $_USER $NEWJAIL $_CMD
	fi
}

main() {

	parse_jail_vars

	create_newjail

	start_jail $NEWJAIL

	# Monitor for any EPHM ps TT that are open, with detached script. Will destroy EPHM after.
	export NEWJAIL
	daemon -t "Ephemeral: $NEWJAIL" -o /dev/null -- /bin/sh << 'EOF'
	. /usr/local/lib/quBSD/quBSD.sh
	monitor_ephm_windows
EOF

	# Unset the the trap command, now that the detached monitoring script has executed.
	trap 'rm_errfiles' INT TERM HUP QUIT EXIT
	exec qb-cmd -u $_USER $NEWJAIL $_CMD
}

get_global_variables

get_options "$@"

main



