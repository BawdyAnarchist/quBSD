#!/bin/sh

. /usr/local/lib/quBSD/quBSD.sh
. /usr/local/lib/quBSD/msg-stop.sh

get_options() {
	while getopts aAeE:hf:Frt:w opts ; do case $opts in
		a) _SOURCE="auto" ;;
		A) [ "$_SOURCE" ]  && get_msg_stop "_e1" "usage_1" || _SOURCE="all" ;;
		e) _EXCLUDE="true" ;;
		E) [ "$_EXCLUDE" ] && get_msg_stop "_e2" "usage_1" || _EXFILE="${OPTARG}" ;;
		f) [ "$_SOURCE" ]  && get_msg_stop "_e1" "usage_1" || _SOURCE="$OPTARG" ;;
		F) FORCE="true" ;;
		h) get_msg_stop "none" "usage_0" ;;
		r) _RESTART="true" ;;
		t) _TIMEOUT="$OPTARG" ;;
		*) exit 1 ;;
	esac  ;  done  ;  shift $(( OPTIND - 1 ))

	# This makes it so that _POSPARAMS has one parameter per line
	_POSPARAMS=$(printf '%s\n' "$@" | uniq)

	_TMP_LOCK="${QTMP}/.qb-startstop_lock"
	_TMP_TIME="${QTMP}/.qb-startstop_timeout"

	# _STOPS is used for calculating the TIMEOUT later on. Initialize to zero
	_STOPS=0
}

checks() {
	# Check validity of TIMEOUT
	[ "$_TIMEOUT" ] && ! chk_integer -g 5 -l 600 -q -- "$_TIMEOUT" \
																			&& get_msg_stop "_e5" "exit_1"
	# Set trap to cleanup files on exit
	trap "cleanup_trapped" INT TERM HUP QUIT EXIT

   # Ping check if qb-stop may continue, get placed in queue, or exit if timeout happens
	monitor_startstop -p || get_msg_stop "_e0" "exit_1"
}

echo_grep() {
	# Too many echo | greps looks dirty. Put into a function
	echo "$1" | grep -Eq "(^|[[:blank:]]+)${2}([[:blank:]]+|\$)" && return 0 || return 1
}

climb_hierarchy() {
	# Trickiest part is calulating the number of hierarchy levels that need to start. The full
	# hierarchy path is resolved recursively, and as it unwinds at the end, _starts are tallied

	# Prevent infinite loop. Unlikely to be 10 gateways; more likely circular reference
	[ "$_depth" -gt 10 ] && get_msg_stop "_e3" "exit_1"
	_depth=$(( _depth + 1 ))

	# _JAIL gateway path was already handled. Skip further checks.
	local _JAIL="$1"
	echo_grep "$_CLIMBED" "$_JAIL" && return 0

	# JAIL hasnt been handled yet. Add to climbed, and account for extra start time
	_CLIMBED=$(printf "%b" "${_JAIL}\n${_CLIMBED}")
	local _gateway=$(get_jail_parameter -deqz GATEWAY "$_JAIL")

	# Hierarchy tops also include control jails
	if [ "$_gateway" = "none" ] || [ -z "$_gateway" ] ; then
		# Control jails will be stopped first, ahead of even hierarchy tops.
		[ "$(get_jail_parameter -de CLASS $_JAIL)" = "cjail" ] \
			&& _CJAILS="$(printf "%b" "${_JAIL}\n${_CJAILS}")" \
			|| _HIERTOP=$(printf "%b" "${_JAIL}\n${_HIERTOP}" | uniq)
	else
		# If _gw was already climbed, then we'll exit here, but need to add its _starts to _JAIL
		if _gw_st=$(echo "$_CLIMBED" | grep -E "^$_gateway " | grep -Eo ' [[:digit:]]+$') ; then
			_stops=$_gw_st
			_CLIMBED=$(echo "$_CLIMBED" | sed -E "s/^($_JAIL ).*/\1${_stops}/")
		else
			# Continue recursively until hiearchy top is reached
			climb_hierarchy "$_gateway"
	fi fi

   # _STARTS is global, _starts is local. Multiple `climb_hierarchy &` ; so choose largest
	chk_isrunning "$_JAIL" && echo_grep "$_JLIST" "$_JAIL" && _stops=$(( _stops + 1 ))
	_CLIMBED=$(echo "$_CLIMBED" | sed -E "s/^(${_JAIL})\$/\1 ${_stops}/")
}

begin_waterfall() {
	# We start from the top level gateway(s) that were "climbed", and shut them down first
	# This prevents separate paths trying to shut down the same jail, and probs with epairs
	# ENDPOINTS have no clients, and can be stopped in parallel (in the background).
	# SUBGATEWAYS have clients, and need to be stopped serially, and recursed.
	# Note that this script would not support multi-pathed gateway/client relationships
	_JAILS="$1"

	for _JAIL in $_JAILS; do

		# Serial stop for gateways. Exception: VMs can stop in background (no VIF race conds)
		echo_grep "$_JLIST" "$_JAIL" && stop_jail "$_JAIL"

		# Determine ENDPOINTS and SUBGATEWAYS (reset the values for each waterfall recursion)
		_SUBGATEWAYS='' ; _ENDPOINTS=''

		for _client in $(get_info -e _CLIENTS $_JAIL); do

			# If the _client has no further clients, it returns 1, and is an ENDPOINT
			get_info _CLIENTS "$_client" \
				&& _SUBGATEWAYS="$_SUBGATEWAYS $_client" \
				|| _ENDPOINTS="$_ENDPOINTS $_client"
		done

		# Stop each endpoint
		for _end in $_ENDPOINTS ; do

			# Maintain a small stagger between parallel stops. Helps prevent conflicts
			sleep .1

			# If the endpoint is on JLIST, stop it in the background
			echo_grep "$_JLIST" "$_end" && stop_jail "$_end" &
			_SJ_PIDS="$_SJ_PIDS $!"
		done

		# Subgateways need their own recursive waterfall
      for _subgateway in $_SUBGATEWAYS ; do
			begin_waterfall "$_subgateway" &
			_SW_PIDS="$_SW_PIDS $!"
		done
	done

	# Wait for all of the stop_jail sent to background to finish, and then return 0
	ps -p "$_SJ_PIDS $_SW_PIDS" > /dev/null 2>&1 && wait $_SJ_PIDS $_SW_PIDS
	return 0
}

force_stop_jlist() {
	# _ASSM_Y is only passed via env variable in monitor_startstop. Should not be user option
	if [ -z "$_ASSM_Y" ] ; then
		get_msg_stop "_m1" "_cont"
		get_user_response || exit 0
	fi

	for _jail in $_JLIST ; do
		stop_jail -f "$_jail"
	done

	exit 0
}

cleanup_trapped() {
	# Immediately kill the monitoring PID, to help prevent any races for cleanup
	ps -p $_MONITOR_PID > /dev/null 2>&1 && kill -9 $_MONITOR_PID

   # Remove PID from the lock file. If it's empty, all tmp files can be removed
	if [ -e "$_TMP_LOCK" ] ; then
		sed -i '' -E "/^$$\$/ d" $_TMP_LOCK
		[ ! -s "$_TMP_LOCK" ] && rm $_TMP_LOCK $_TMP_IP $_TMP_TIME $_TMP_PIDS > /dev/null 2>&1
	fi
}

main() {
	# Returns $_JLIST, from options and positional arguments. Func shared with qb-start.
	compile_jlist

	# If [-F] was passed, force stop each container serially, one at at time
	[ "$FORCE" ] && force_stop_jlist

	# Checks usually before main but [-F] needs chance to run, even if another qb-stop is running
	checks

	# Find gateway hierarchy top for each jail. Returns $_HIERTOP
	for _jlist in $_JLIST ; do

		# Function is recursive, so _depth tracks # of cycles to prevent infinite loop.
		_depth=0 ; _stops=0
		climb_hierarchy "$_jlist"
	done

	# Set and/or cleanup variables from the climb_hierarcy loop
	_HIERTOP=$(echo "$_HIERTOP" | sort | uniq)
	_STOPS=$(echo "$_CLIMBED" | awk 'NR == 1 || $2 > max { max = $2 } END { print max }')

   # Control jails should be stopped first, for same reasons as hierarchy tops
	for _cjail in $(echo "$_CJAILS" | sort | uniq) ; do
		stop_jail $_cjail
	done

	# Stop the hierarchy tops, then their clients, until all of _JLIST is stopped.
	for _JAIL in $_HIERTOP; do

		# Hierarchy tops are independent, can be stopped in parallel.
		begin_waterfall $_JAIL &
		_WF_PIDS="$_WF_PIDS $!"
	done

	# STARTS keeps track of the number of hiearchy leves. If 0, there was nothing to stop
	[ "$_STOPS" = 0 ] && get_msg_stop "_m3" "exit_1"

	# User specified timeout, or 5 secs for every hierarchy level
	monitor_startstop "${_TIMEOUT:=$(( _STOPS * 10 ))}" &
	_MONITOR_PID="$!"

	# Wait for stops to finish. If TIMEOUT, monitor_startstop will kill -15 this script
	ps -p $_WF_PIDS > /dev/null 2>&1 && wait $_WF_PIDS && get_msg_stop "_m2"

	[ "$_RESTART" ] && cleanup_trapped && exec qb-start "$_JLIST"
}

get_global_variables

get_options "$@"

main

