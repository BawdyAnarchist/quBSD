#!/bin/sh

. /usr/local/lib/quBSD/msg-i3-genconf.sh

get_options() {
   while getopts c:f:h opts ; do case $opts in
		d) [ -e "$OPTARG" ] && CONF="${OPTARG}" || msg_genconf -Eum _1 "$CONF" ;;
		f) [ -e "$OPTARG" ] && FILE="${OPTARG}" ||  msg_genconf -Eum _1 "$FILE" ;;
		h) msg_genconf -eu ;; 
		r) RELOAD="false" ;;
		*) exit 1 ;;
   esac  ;  done  ;  shift $(( OPTIND - 1 ))

	# Assign default file and main i3 configs, if not already assigned
	FILE="${FILE:=${HOME}/.config/i3/i3gen.conf}"
	CONF="${CONF:=${HOME}/.config/i3/config}"
}

parse_config() {
	# Create the tmp files for parsed i3gen.conf
	GEN1=$(mktemp  -t "quBSD/i3-genconf1")
	GEN2=$(mktemp  -t "quBSD/i3-genconf2")
	_TMP=$(mktemp   -t "quBSD/i3-genconf3")
	NEWCONF=$(mktemp -t "quBSD/i3-genconf_newconf")

	trap "rm $GEN1 $GEN2 $_TMP $NEWCONF ; exit 0" INT TERM HUP QUIT EXIT

	cp $CONF $NEWCONF

	# Populate GEN1 with the list of jails and aliased program names
	sed -En "/#[[:blank:]]*JAIL[[:blank:]]*GROUP[[:blank:]]*SYM1/,\
		/#[[:blank:]]*ALIAS[[:blank:]]*SYM/p" $FILE \
			| sed -E 's/#.*//g ; s/[[:blank:]]+$//g ; /^$/ d' > $GEN1

	# Populate GEN2 with the list of aliased commands and key bindings
	sed -En "/#[[:blank:]]*ALIAS[[:blank:]]*SYM[[:blank:]]*COMMAND/,$ p" $FILE \
			| sed -E 's/#.*//g ; s/[[:blank:]]+$//g ; /^$/ d' > $GEN2

	# First bindsym for top level selection mode
	JSELECT=$(grep -E '^bindsym[[:blank:]]*\$mod\+[^[:blank:]]+[[:blank:]]+mode' $FILE)
}

generate_first_mode() {
	MODETYPE="FIRST"

	# Get the bindsym for entering the "Jail Select" mode. sed removes quotation marks \"
	_mode=$(echo ${JSELECT#bindsym * mode} | sed -E "s/\"//g")

	# Looping over each SYM1, and populating the FIRST MODETYPE with lines
	LOOP=$(awk '{print $3}' $GEN1)

	generate_mode
}

generate_second_mode() {
	MODETYPE="SECOND"

	for _mode in $(awk '{print $2}' $GEN1 | uniq) ; do
		# Skip mode creation for non-groups
		if ! [ "$_mode" = '-' ] ; then

			# Filter lines relevant only to the _group
			TEMPGEN=$(grep -E "[^[:blank:]]+[[:blank:]]+${_mode}[[:blank:]]+" $GEN1)

			# Loop over each SYM2 in the filtered _group
			LOOP=$(echo "$TEMPGEN" | awk '{print $4}')
			generate_mode
		fi
	done
}

generate_jails_modes() {
	MODETYPE="THIRD"

	_count=1
	for _mode in $(awk '{print $1}' $GEN1) ; do

		# Loop over each COMMAND ALIAS for each JAIL
		LOOP=$(awk '{print $5}' $GEN1 | sed -n "${_count}p" | sed "s/,/ /g")
		generate_mode

	_count=$(( _count + 1 ))
	done
}

define_mode_variables() {
	case $MODETYPE in

		FIRST)
			_sym="$_loop"
			_group=$(sed -n ${_cycle}p $GEN1 | awk '{print $2}')

			if [ "$_group" = '-' ] ; then
				# No group designated. Resolve directly to the <jail> mode
				_jail=$(sed -n ${_cycle}p $GEN1 | awk '{print $1}')
				_action="mode \"$_jail\""

			else
				# If group was provided, point to the secondary mode
				_action="mode \"$_group\""
			fi
		;;
		SECOND)
			_sym="$_loop"
			_jail=$(echo "$TEMPGEN" | sed -n ${_cycle}p | awk '{print $1}')
			_action="mode \"$_jail\""
		;;
		THIRD)
			_line=$(grep -E "^${_loop}" $GEN2)
			_alias=$(echo $_line \
				| sed -En "s/^${_loop}[[:blank:]]+[^[:blank:]]+[[:blank:]]+//gp" \
					| sed -E "s/\\\$jail/${_mode}/g")
			_sym=$(echo $_line | awk '{print $2}')
			_action=$(printf "%b" "exec ${_alias} , mode \"default\"")
		;;
	esac
}

test_new_config() {
	# Test the new configuration
   if i3 -C -c $NEWCONF; then
		# If successful, copy to new config and reload unless otherwise indicated
		cp $NEWCONF $CONF
		msg_genconf -m _6

		if [ "$RELOAD" = "false" ] ; then
			msg_genconf -m _7
		else
			i3-msg reload > /dev/null 2>&1 && msg_genconf -m _8 || msg_genconf -m _9
		fi

	else
		# If failue, copy failed config for examination; and show error message
		cp $NEWCONF ${HOME}/.config/i3/config_attempted
		msg_genconf -m _10
	fi
}

generate_mode() {
	# Print the mode opening line to the config
	msg_genconf -m _3  > $_TMP

	_cycle=1
	for _loop in $LOOP ; do
		# Define $_sym and $_action
		define_mode_variables

		# Make sure it's not already there, and then add new bindsym
		grep -q "bindsym $_sym" $_TMP || msg_genconf -m _4 "$_sym" "$_action" >> $_TMP

	_cycle=$(( _cycle + 1 ))
	done

	# Escape/Return and close mode (print to config)
	msg_genconf -m _5 >> $_TMP

	# Remove any duplicates created, and push to the main i3 config
	uniq $_TMP >> $NEWCONF
}

main() {
	# Delete old lines from conf ; and add new header
	sed -i '' -e '/I3GEN AUTO GENERATED MODES/,$d' $NEWCONF
	msg_genconf -m _2 >> $NEWCONF

	generate_first_mode

	generate_second_mode

	generate_jails_modes

	test_new_config
}

get_options "$@"

parse_config

main
