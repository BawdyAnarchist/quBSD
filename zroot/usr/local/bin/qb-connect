#!/bin/sh

. /usr/local/lib/quBSD/quBSD.sh
. /usr/local/lib/quBSD/msg-connect.sh

get_options() {
	while getopts cdhi:l opts ; do case $opts in
		c) _CMD="create" ;;
		d) [ -z "$_CMD" ] && _CMD="destroy" || msg_connect -Eum _1 ;;
		h) msg_connect -eu ;;
		i) IPV4="$OPTARG" ;;
		l) [ -z "$_CMD" ] && _CMD="list" || msg_connect -Eum _1 ;;
		*) get_msg "_1" && msg_connect -Eu ;;
	esac  ;  done  ;  shift $(( OPTIND - 1 ))

	# Define script variables
	JAIL=${JAIL:="$1"}
	GATEWAY="$2"
}

checks() {
	# Must specify a _CMD
	[ -z "$_CMD" ] && msg_connect -Eum _0

	case "$_CMD" in
		create)
			# JAIL must be running, but gateway can be started later
			chk_isrunning "$JAIL" "return 1" || msg_connect -Eum _2

			# IP checks
			if [ -n "$IPV4" ] ; then
				# Invalid IP must be rejected
				chk_valid_ipv4 "$IPV4" || exit 1

				# Just temporary connections. Warn for convention mismatch, but don't exit
				chk_isqubsd_ipv4 "$IPV4"
			else

				# Assign IP if not specified by user
				IPV4=$(discover_open_ipv4 -t ADHOC "$JAIL") || exit 1
			fi

			# Check the pf status and security levels
		   check_security || msg_connect -Em _4
		;;
		destroy)
			# JAIL and GATEWAY must be running (helps prevent accidents)
			chk_isrunning "$JAIL" "return 1" || msg_connect -Eum _2

			[ -n "$GATEWAY" ] && ! chk_isrunning "$GATEWAY" \
					&& msg_connect -Eum _3
		;;
	esac
}

check_security() {
	# Get <jail> security parameters
	_pfJ=$(jexec -l -U root $JAIL service -e | grep 'rc.d/pf')

	_secJ=$(jexec -l -U root $JAIL sysctl kern.securelevel | grep -Eo '[^[:blank:]]+$')

	# Seclvl of 3 will prevent pf mod (if pf is running).
	[ -n "$_pfJ" ] && [ "$_secJ" = "3" ] && return 1

	if chk_isrunning "$GATEWAY" ; then
		# If running, get security just like <jail>
		_pfG=$(jexec -l -U root $GATEWAY service -e | grep 'rc.d/pf')
		_secG=$(jexec -l -U root $GATEWAY sysctl kern.securelevel | grep -Eo '[^[:blank:]]+$')

	else
		# If not running, rely on rc.conf and QMAP
		_pfG=$(grep -E "pf_enable=.*YES" ${M_ZUSR}/${GATEWAY}/rw/etc/rc.conf)
		_secG=$(get_jail_parameter -deqs SECLVL "$GATEWAY")
	fi

	# Seclvl of 3 will prevent pf mod for pf enabled jails
	[ -n "$_pfG" ] && [ "$_secG" = "3" ] && return 1

	return 0
}

get_local_ip() {

	# Finds the CIDR notated IP address of a jails interface; or `none'
	jexec -l -U root $_jail ifconfig -f inet:cidr $_intf inet \
		| grep -Eo "[[:digit:]]+\.[[:digit:]]+\.[[:digit:]]+\.[[:digit:]]+/[[:digit:]]+" \
			|| echo "none"
}

get_bridge_members() {
	# If _intf is a bridge, add the members
	jexec -l -U root $_jail ifconfig $_intf | grep -Eo "member: [^[:blank:]]+" \
		| sed -E "s/member/$_jail $_intf member/g" | sed "s/:[[:blank:]]*/:/g"
}

assemble_interface_list() {
	# For each jail that is running
	for _jail in $(get_info -e _ONJAILS) ; do

		# Cycle through every interface on that jail
		for _intf in $(jexec -l -U root $_jail ifconfig -l) ; do

			# Pair each _jail/_intf , with the associated ip address
			_ALL_INTF=$(printf "%b" "$_ALL_INTF\n $_jail  $_intf  $(get_local_ip)")

			# If the _intf is a bridge, add its bridge members to the list
			[ -z "${_intf##bridge*}" ] \
				&& _ALL_INTF=$(printf "%b" "$_ALL_INTF\n$(get_bridge_members)")
		done
	done

	# Remove loopbacks; and set columns formatting
	_ALL_INTF=$(echo "$_ALL_INTF" | grep -v "[[:blank:]]lo0[[:blank:]]" | column -t)

	# Clean up and categorize all_interfaces list for later usage
	_jail_intfs=$(echo "$_ALL_INTF" | grep -E "^$JAIL ")
	_jail_eps=$(echo "$_jail_intfs" | awk '{print $2}' | grep -Eo "epair[[:digit:]]+")
	_gateway_pairs=$(echo "$_ALL_INTF" | grep -Ev "^$JAIL" | grep -E "$_jail_eps")
}

destroy_epairs() {
	if [ -z "$GATEWAY" ] ; then
		# If no gateway, destroy all epairs on JAIL
		_destr_epairs=$(jexec -l -U root $JAIL ifconfig -g epair)
	else
		# Othewise only remove the epairs common to both JAIL and GATEWAY
		_destr_epairs=$(echo "$_gateway_pairs" | grep -E "^${GATEWAY}[[:blank:]]+epair" \
														| awk '{print $2}')
	fi

	ifconfig $_destr_epairs -vnet $GATEWAY
	ifconfig $_destr_epairs destroy
}

list_output() {

	if [ -n "$JAIL" ] ; then

		# Show the interfaces on JAIL
		msg_connect -m _5

		# Show all other jails that connect to JAIL
		[ -n "$_jail_eps" ] && msg_connect -m _6
	else

		# List all existing connections for all running jails
		msg_connect -m _7
	fi
}

main() {
	case $_CMD in
		create)
				# Start gateway if it's off
				chk_isrunning "$GATEWAY" || start_jail "$GATEWAY" || exit 1

				# Make the connection beteween jails
				connect_client_to_gateway "$JAIL" "$GATEWAY" "$IPV4"
		;;
		destroy)
				assemble_interface_list
				destroy_epairs
		;;
		list)
				assemble_interface_list
				list_output
		;;
	esac
}

get_global_variables

get_options "$@"

checks

main



