#!/bin/sh

# Seamless handling of seclvl and chflags requires straddling host and <jail>
# A single script simplifies the UX frontend, but adds complexity in the script backend.
# To help simplify, msg_ivpn and usage functions, are integrated into the script.

msg_ivpn() {
	while getopts eEm:u _opts ; do case $_opts in
		e) local _exit="exit 0" ;;
		E) local _exit="exit 1" ;;
		m) local _message="$OPTARG" ;;
		u) local _usage="true" ;;
	esac  ;  done  ;  shift $(( OPTIND - 1 ))

	case "$_message" in
	_1) cat << ENDOFMSG
ERROR: Unable to start jail. Cannot modify IVPN.
ENDOFMSG
	;;
	_1_1) cat << ENDOFMSG
ERROR: Invalid port.
ENDOFMSG
	;;
	_2) cat << ENDOFMSG
ERROR: Script is running inside jail, but kern. securelevel is
       elevated and/or schg is applied to one or more files
       that need to be modified in order to switch VPN servers.
       Re-run this script from host, in order to modify iVPN.
ENDOFMSG
	;;
	_3) cat << ENDOFMSG
WARNING: Failed to establish ping to outside internet.
         Will use existing json files for modifying wg0.conf.
         {Enter to continue}
ENDOFMSG
	;;
	_4) cat << ENDOFMSG
Downloading server data from api.ivpn.net , wait a moment.
ENDOFMSG
	;;
	_4_1) cat << ENDOFMSG
CURRENT IVPN SERVER INFO.  {Enter to continue}
ENDOFMSG
	;;
	_4_2) cat << ENDOFMSG
Couldn't establish ping to outside internet.
Below is the last configured ivpn server.
ENDOFMSG
	;;
	_5) cat << ENDOFMSG
WARNING: Failed to download fresh server stats.
         Will use existing json files for modifying wg0.conf.
			{Enter to continue}
ENDOFMSG
	;;
	_6) cat << ENDOFMSG
WARNING: Failed to download fresh server stats.
ENDOFMSG
	;;
	_7) cat << ENDOFMSG
AVAILABLE COUNTRIES ARE AS FOLLOWS:
$countries
ENDOFMSG
echo -e "Select Country (enter number): \c"
	;;
	_8) cat << ENDOFMSG
AVAILABLE CITIES ARE AS FOLLOWS:
$cities
ENDOFMSG
echo -e "Select City (enter number): \c"
	;;
	_9) cat << ENDOFMSG
AVAILABLE SERVERS ARE AS FOLLOWS:
$servers
ENDOFMSG
echo -e "Select Server (enter number): \c"
	;;
	_10) cat << ENDOFMSG
WARNING: Files are modified with data for new ivpn server, but
         jail must be restarted for changes to take effect.
WARNING: Can't modify wg0.conf due to schg flags
         Recommend running qb-ivpn from host instead
ENDOFMSG
	;;
	_11) cat << ENDOFMSG
WARNING: Can't modify pf.conf due to schg flags
         Recommend running qb-ivpn from host instead
ENDOFMSG
	;;

	esac

	[ $_usage ] && usage
	eval $_exit :
}

usage(){ cat << ENDOFUSAGE
qb-ivpn: Mange vpn connection for IVPN, specifically.
         Fetches server data and provides guided selection
         for VPN server. Attempts to manage permissions.
WARNING: Can run from inside of jail, but if schg or seclvl
         are elevated, modification might not be possible.
         In that case, run this script from host.
FROM INSIDE OF JAIL
Usage: qb-ivpn [-h|-l]
FROM HOST
Usage: qb-ivpn [-h|-l|-p] <jail>
OPTIONS:
   -h: (h)elp. Shows this message
   -l: (l)ist the current IVPN server connection, and exit
   -p: (p)ort. Change the port used by wireguard / ivpn
   -x: DO NOT USE. Internal to script.
ENDOFUSAGE
}

get_options() {
	while getopts hlp:x opts ; do case $opts in
    	h) msg_ivpn -eu ;;
		l) LIST="true" ;;
		p) PORT="$OPTARG" ;;
		x) CALLED="true" ;;
		*) exit 1 ;;
   esac  ;  done  ;  shift $(( OPTIND - 1 ))

	JAIL="$1"

	# Operating on host vs inside jail is a crucial distinction.
	ps -o pid 0 > /dev/null 2>&1 && INJAIL="false" || INJAIL="true"
}

define_variables() {
	# File locations
	WIREGRD="/rw/usr/local/etc/wireguard"
	SERVERS="${WIREGRD}/serv_stats_ivpn"
	SRV_IPS="${WIREGRD}/serv_ips_ivpn"
	CURRENT="${WIREGRD}/serv_current_ivpn"
	WG0CONF="${WIREGRD}/wg0.conf"
	PFCONF="/rw/etc/pf.conf"

	# IVPN API for fetching info
	_GET_CURRENT="https://api.ivpn.net/v4/geo-lookup"
	_GET_SERVERS="https://api.ivpn.net/v4/servers/stats"
	_GET_SRV_IPS="https://api.ivpn.net/v4/servers.json"

	if [ "$INJAIL" = "false" ] ; then
		# Source quBSD library, and get variables (only available for host)
		. /usr/local/lib/quBSD/quBSD.sh
		get_global_variables

		# These variables reduce the need for if/then branches. Can combine commands.
		PATHMOD="${M_ZUSR}/${JAIL}"
		_CMDMOD="jexec -l -U root $JAIL"

		# Handle case where jail is off
		chk_isrunning $JAIL || handle_if_off
	fi

	# Define PORT
	PORT="${PORT:=$(sed -nE "s/Endpoint.*://p" ${PATHMOD}/${WG0CONF})}"

	[ "$PORT" -gt 0 ] && [ "$PORT" -le 65535 ] || msg_ivpn -Eum _1
}

handle_if_off() {

	# Jail must be valid
	chk_valid_jail -- "$JAIL" || msg_ivpn -Eu

	# Will restore original SECLVL later on, after applying ivpn changes
	SEC_orig=$(sed -En "s/^${JAIL}[[:blank:]]+seclvl[[:blank:]]+//p" $QMAP)

	# Modify seclvl to -1. Trap and restore original if exit before finish
	# If we're only turning on the jail to LIST its connection, don't mod seclvl
	if [ "$SEC_orig" -ge 0 ] && [ -z "$LIST" ] ; then
		trap 'qb-edit -qf $JAIL SECLVL $SEC_orig ; exit 0' INT TERM HUP QUIT EXIT
		qb-edit -fq $JAIL SECLVL -1
	fi

	start_jail "$JAIL" || msg_ivpn -Em _1
}

fetch_connection() {

	# Print info message while fetching latest data
	msg_ivpn -m _4

	# Ping to ensure that connection exists first
	if eval $_CMDMOD ping -Qot 6 1.1.1.1  > /dev/null 2>&1
	then

		if [ "$INJAIL" = "true" ] ; then
			fetch -qT 7 -o - $_GET_CURRENT | jq

		else
			# jexec can't use pipe command without << herecommand
			jexec -l -U root $JAIL << EOF
				fetch -qT 7 -o - $_GET_CURRENT | jq
EOF
		fi
	else
		# Ping was unsuccessful, pull most recently saved file
		msg_ivpn -m _4_2
		eval $_CMDMOD jq . ${CURRENT}
	fi
}

get_security() {
	# Get state of flags and securelevel of jail
	if ls -lo ${PATHMOD}/${WIREGRD} | grep -qs "schg" \
			|| ls -lo ${PATHMOD}/${PFCONF}  | grep -qs "schg" ; then
		SCHG="true"
	else
		SCHG="false"
	fi

	SECLVL=$(eval $_CMDMOD sysctl -n kern.securelevel)
}

flags_down() {
	# Ensure that schg flags don't prevent API update. -L follows symlinks
	chflags -RL noschg ${PATHMOD}/${WIREGRD}/.*
	chflags -RL noschg ${PATHMOD}/${PFCONF}

	# Make sure that qb-ivpn can be copied to the jail
	chflags -R noschg "${M_QROOT}/${JAIL}/usr/local/bin"
}

update_api() {
# Fetch API if ping is successful
	if ping -Qot 6 1.1.1.1  > /dev/null 2>&1 ; then

		msg_ivpn -m _4

		fetch -qT 10 -o - "$_GET_CURRENT"  > $CURRENT || msg_ivpn -m _5
		fetch -qT 10 -o - "$_GET_SERVERS"  > $SERVERS || msg_ivpn -m _5
		fetch -qT 10 -o - "$_GET_SRV_IPS"  > $SRV_IPS || msg_ivpn -m _5

		cat $CURRENT | jq
		msg_ivpn -m _4_1
		read wait ; clear
	else

		msg_ivpn -m _3
		read wait ; clear
	fi
}

national() {
	countries=$(jq '[.servers[] | .country] | unique' $SERVERS \
			| sed 1d | sed '$d' | nl)

	msg_ivpn -m _7 ; read _c ; clear

	country=$(echo "$countries" | sed -n ${_c}p \
			| sed "s/^[[:blank:]]*[[:alnum:]]*[[:blank:]]*.//" | sed "s/[^[:alnum:]]*$//")
}

town() {
	cities=$(jq --arg COUNTRY "$country" \
			'[.servers[] | select(.country==$COUNTRY) | .city] | unique' $SERVERS | sed 1d | sed '$d' | nl)

	msg_ivpn -m _8 ; read _i ; clear

	city=$(echo "$cities" | sed -n ${_i}p \
			| sed "s/^[[:blank:]]*[[:alnum:]]*[[:blank:]]*.//" | sed "s/[^[:alnum:]]*$//")
}

server() {

	jq --arg CITY "$city" '[.servers[] | select(.city==$CITY) | {City: .city, pubkey: .wg_public_key, Gateway: .hostnames.wireguard, ISP: .isp, Active: .is_active, Load: .load}]' $SERVERS

	_servers=$(jq --arg CITY "$city" \
			'[.servers[] | select(.city==$CITY) | .wg_public_key]' $SERVERS | sed 1d | sed '$d' | nl)

	msg_ivpn -m _9 ; read _e ; clear

	publickey=$(echo "$_servers" | sed -n ${_e}p \
			| sed "s/^[[:blank:]]*[[:alnum:]]*[[:blank:]]*.//" | sed 's/\".*$//')

	endip=$(jq --arg PUB "$publickey" \
			'.wireguard | .[] | .hosts | .[] | select(.public_key==$PUB) | .host' $SRV_IPS | sed 's/^.//' | sed 's/\".*$//')

	endpoint=$(printf "%b" "${endip}:${PORT}")
}

modify_network() {
	# Modify wg0.conf
	sed -i '' -E "s#PublicKey[[:blank:]]*=.*#PublicKey = $publickey#" $WG0CONF
	sed -i '' -E "s#Endpoint[[:blank:]]*=.*#Endpoint = $endpoint#" $WG0CONF

	# A bit of a hacky decision tree. Problem arises when removing schg from host
	if [ -z "$CALLED" ] ; then

		# If run inside jail; script already checked that network can be modified.
		sed -i '' -E "s#^ENDPOINT[[:blank:]]*=.*#ENDPOINT = \"$endip\"#" $PFCONF
		sed -i '' -E "s#^WGPORTS[[:blank:]]*=.*#WGPORTS = \"$PORT\"#" $PFCONF
		wg-quick down wg0
		service pf restart
		wg-quick up wg0
	else

		# If run from host, flags may have been dropped
		sed -E "s#^ENDPOINT[[:blank:]]*=.*#ENDPOINT = \"$endip\"#" $PFCONF > $WIREGRD/pf.conf
		sed -i '' -E "s#^WGPORTS[[:blank:]]*=.*#WGPORTS = \"$PORT\"#" $WIREGRD/pf.conf
	fi
}

modify_ivpn() {
	update_api
	national
	town
	server
	modify_network
}

main() {
	# List is the simplest, just fetch connection and exit. No further logic required
	if [ -n "$LIST" ] ; then
		fetch_connection
		exit 0
	fi

	# Check flags
	get_security

	# If script was called, checks/flags were already done. Don't double check
	if [ -z "$CALLED" ] ; then

		# Order matters! Reduces line space to overlap but order properly.
		case "${INJAIL}_${SCHG}_${SECLVL}" in

			# Flags can't be lowered from inside jail. Send error	and exit.
			true_true_*|true_false_3)
				msg_ivpn -Em _2
			;;
			# Flags lowered from host. Restart required for network changes.
			false_true_3|false_false_3)
				flags_down
				RESTART="true"
			;;
			# Flags can be lowered, no restart required since seclvl < 3
			false_true_*)
				flags_down
			;;
		esac
	fi

	# API to IVPN must be done from inside jail (network access).
	if [ "$INJAIL" = "true" ] ; then

		# Primary function that implements changes inside jail
		modify_ivpn

	else
		# Copy qb-ivpn to ensure jail is operating off the most recent version
		cp /usr/local/bin/qb-ivpn "${M_QROOT}/${JAIL}/usr/local/bin/qb-ivpn"

		# Re-run script in jail to modify ivpn
		jexec -l -U root $JAIL qb-ivpn -x -p $PORT

		# The flags applied somehow still prevent moving until jail is stopped.
		stop_jail "$JAIL"

		# Completion of hack. Move modified pf.conf to rw/etc
		mv ${PATHMOD}/${WIREGRD}/pf.conf ${PATHMOD}/rw/etc/pf.conf

		# Dont always need restart, but not worth the code/logic to branch.
		start_jail "$JAIL"
	fi
}

get_options "$@"

define_variables

main



