#!/bin/sh

. /usr/local/lib/quBSD/quBSD.sh
. /usr/local/lib/quBSD/msg-snap.sh

get_options() {
	while getopts cd:hly opts ; do
		case $opts in
			c) _CMD="create" ;;
			d) [ -z "$_CMD" ] && _CMD="destroy" || get_msg_snap "_1" "exit_1" 
				DEL_DATE="$OPTARG" ;;
			h) get_msg_snap "none" "usage_0" ;; 
			l) [ -z "$_CMD" ] && _CMD="list"  || get_msg_snap "_1" "exit_1" ;;
			y) assume_yes="true" ;;
		esac
	done

	shift $(( OPTIND - 1 ))

	# Define script variables
	JAIL="$1"
}

checks() {
	# Must specify a _CMD to execute 
	[ -z "$_CMD" ] && get_msg_snap "_2" "usage_1"

	# Must have a valid jail
	chk_valid_jail "$JAIL" || "usage_1"

	# Define _ZJAIL variable, which sets the zfs dataset being targeted 
		# Class will determine what the target dataset is 
		CLASS=$(sed -nE "s/^${JAIL}[[:blank:]]+class[[:blank:]]+//p" $JMAP)
	
		# var $_ZFS prevents multiple if/then statements later on.
		[ "$CLASS" == "rootjail" ] && _ZFS="${JAILS_ZFS}" || _ZFS="${ZUSR_ZFS}"

	# _CMD specific checks and variable assignments
	case $_CMD in 
		create)
			# Standard snapshot label for [-c] create 
			DATELABEL=$(date +@%b%d_%H:%M_USER)

			# Check for duplicate snapshot under same name. Suppress output
			chk_valid_zfs ${_ZFS}/${JAIL}${DATELABEL} && get_msg_snap "_4" "exit_1"
		;;
		destroy)
			# Translate user date input, to epoch. Exit if failure.
			_del_epoch=$(date -j -f "%Y-%m-%dT%H:%M" "$DEL_DATE" "+%s") || exit 1
		;;
	esac
}

get_destroy_list() {
	# Get list of existing snapshots for <jail>, and cycle through them
	for _snap in $(zfs list -t snapshot -Ho name ${_ZFS}/${JAIL}) ; do

		# Pull the creation date for each snap, and convert to epoch time	
		_snap_date=$(zfs list -Ho creation $_snap)
		_snap_epoch=$(date -j -f "%a %b %d %H:%M %Y" "$_snap_date" "+%s")

		# Snapshots older than user entered date, will be destroyed 
		if [ "$_snap_epoch" -le "$_del_epoch" ] ; then
			
			# Create a list of all snapshots to destroy 
			_DESTROY=$(printf "%b" "${_DESTROY}\n${_snap}") \
			
			# Find jails that depend on the snapshot, and create a list of depends
			_snap_deps=$(zfs list -rHo name,origin $_ZFS | sed -nE "\#${_snap}#s#^${_ZFS}/##p")
			_DEPENDS=$(printf "%b" "${_DEPENDS}\n${_snap_deps}")

		else
			# ZFS prints chronologically. Break at first snapshot newer than <date> 
			break
		fi
	done
}

main() {
	# Main program execution
	case "$_CMD" in 
		create) 
			# Create the new snapshot
			echo	zfs snapshot "${_ZFS}/${JAIL}${DATELABEL}" && get_msg_snap "_5" 
		;;
		destroy)		
			# Assemble list of all snapshots older than user input <date>
			get_destroy_list

			# Exit if there were no snapshots to destroy
			[ -z "$_DESTROY" ] && get_msg_snap "_6" "exit_0"

			# Present user with destroy and dependencies lies	
			if [ -z "$assume_yes" ] ; then
				get_msg_snap "_7" 
				get_user_response "severe" || get_msg_snap "_8" "exit_0"
			fi

			# Stop jails dependent on snapshot
			_DEPENDS=$(echo "$_DEPENDS" | awk '{print $1}') 

			for _jail in $_DEPENDS ; do
				stop_jail "$_jail" || get_msg_snap "_9" "exit_1"
			done			

			# Destroy snapshots 
			for _dsnap in $_DESTROY ; do
				zfs destroy $_dsnap	
			done			
			
			get_msg_snap "_10"
		;;
		list)
			#Show amended state of snapshots for <jail> 
			zfs list -t snapshot -o name,used,creation "${_ZFS}/${JAIL}"
		;;
	esac
}

get_global_variables

get_options "$@"

checks

main



