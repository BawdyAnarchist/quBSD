#!/bin/sh

# Realtime 1-sec updates on the status of all containers

while getopts c:h o ; do
	case $o in
		c) col="$OPTARG" ;;
		h) help="true" ;;
	esac
done

shift $(( OPTIND - 1 ))

# Get datasets, mountpoints; and define files.
JCONF="/usr/local/etc/quBSD/quBSD.conf"
zroot=$(sed -nE "s:quBSD_root[[:blank:]]+::p" $JCONF) 
zusr_zfs=$(sed -En "s/^zusr_dataset[[:blank:]]+//p" $JCONF) 
jails_zfs=$(sed -En "s/^jails_dataset[[:blank:]]+//p" $JCONF) 

# Define script variables
JMAP="/usr/local/etc/quBSD/jailmap.conf"
tmp="/tmp/qb-stat.txt"
tmp2="/tmp/qb-stat2.txt"
col="${col:=6,6}"

# Define colors 
# NOTE: printf counts ANSI color escapes with \tabs in alignment
#       As a result, any color used for jails/VMs must have same length escapes
COL_OFF='\033[0m'	     # Turn off color	
 NORMAL='\033[0;39m'     # Default terminal settings 
  GREEN='\033[1;7;32m'   # Green, inverted, for active window alert 
    RED='\033[1;31m'     # Bold Red
   BRED='\033[1;5;31m'   # Blinking bold red, for hostnet connection alert
   BLUE='\033[0;34m'     # Blue - server jails 
   GRAY='\033[0;90m'     # Gray - system, templates, host, VMs, misc jails 
 YELLOW='\033[0;33m'     # Yellow - net jails 
  HILIT='\033[7;39m'     # Highlighted top line

trap "{ rm $tmp > /dev/null 2>&1 ; rm $tmp2 > /dev/null 2>&1 ; exit 0 ; }" SIGINT SIGTERM EXIT

usage() {
	echo ""
	echo "qb-stat: Lists status of all jails"
	echo "Usage: qb-stat [-c <column>] [-h]"
	echo "   -c: (c)olumn to column to sort by"
	echo "   -h: (h)elp:  Outputs this help message"
	echo ""
	exit 1
}

checks() {
	[ "$help" ] && usage
}

assemble_header() {
	[ -e "$tmp" ] && rm $tmp 
	[ -e "$tmp2" ] && rm $tmp2
	mktemp $tmp > /dev/null
	mktemp $tmp2 > /dev/null

	printf "%b" "${HILIT}CONTAINER\tJID\tTUNNEL\tCLASS\tROOT\tDISK\t%RAM\t%CPU${COL_OFF}\n" >> $tmp
}

define_variables() {
	#Jails data
	jails=$(egrep "[^[:blank:]]+[[:blank:]]+class[[:blank:]]+" $JMAP | awk '{print $1}') 
	zfs_list=$(zfs list -ro name,used)

	# Active window info
	id=$(xprop -root _NET_ACTIVE_WINDOW | sed "s/.*window id # //")
	active=$(xprop -id $id | grep "WM_CLIENT_MACHINE" | sed "s/WM_CLIENT_MACHINE(STRING) = \"//")
	active="${active%\"}"
	[ "$active" = "quBSD" ] && active="host" 

	# Input devices status
	cam=$(service webcamd onestatus | grep -o "webcamd is running")
	mic=$(service virtual_oss onestatus | grep -o "virtual_oss is running")

	# Host connected
	interfaces=$(ifconfig -l | sed "s/lo0//")
	for i in $interfaces ; do
		ifconfig $i inet | egrep -qs "^[[:blank:]]*inet"
		[ "$?" = "0" ] && hostnet="true" || hostnet=""
	done
}

get_jails_loop() {
	for j in $jails ; do
		class=$(sed -nE "s/^${j}[[:blank:]]+class[[:blank:]]+//p" $JMAP)
		class="${class%jail}"
		tunnel=$(sed -nE "s/^${j}[[:blank:]]+tunnel[[:blank:]]+//p" $JMAP)
		tunnel="${tunnel:--}"
		rootjail=$(sed -nE "s/^${j}[[:blank:]]+rootjail[[:blank:]]+//p" $JMAP)
		rootjail="${rootjail:--}"
		disk="-"
		jid="-"
		cpu="-"
		ram="-"
		
		if `jls | grep -qs " $j "` ; then
			jid=$(jls -j $j -n jid | sed "s/jid=//") 
			cpu=$(ps au -J $j | awk '{sum+=$3;} END {print sum;}')
			ram=$(ps au -J $j | awk '{sum+=$4;} END {print sum;}')
		fi	

		if [ "$class" = "root" -o -z "${j##0*template}" ] ; then 
			disk=$(echo "$zfs_list" | sed -nE "s#^${jails_zfs}/${j}[[:blank:]]+##p")
			sub=4

		elif [ "$class" = "VM" ] ; then 
			# Future functionality - bhyvectl or ping test for on/connected
			disk=$(echo "$zfs_list" | sed -nE "s#^${zroot}/${j}[[:blank:]]+##p")
			sub=5
		else 
			disk=$(echo "$zfs_list" | sed -nE "s#^${zusr_zfs}/${j}[[:blank:]]+##p")

			if [ -z "${j##net*}" ] ; then sub="3"
			elif [ -z "${j##serv*}" ] ; then sub="2"
			elif [ -z "${j##host*}" ] ; then sub="6" 
			else sub="1"
			fi
		fi

		tunnel="${tunnel:--}"
		rootjail="${rootjail:--}"
		disk="${disk:--}"
		jid="${jid:--}"
		cpu="${cpu:--}"

		case $sub in
			1) TEMPCOL=${NORMAL} ;;
			2) TEMPCOL=${BLUE} ;;
			3) TEMPCOL=${YELLOW} ;;
			4) TEMPCOL=${GRAY} ;;
			5) TEMPCOL=${GRAY} ;;
			6) TEMPCOL=${GRAY} ;;

		esac

		printf "%b" "${TEMPCOL}$j\t" "$jid\t" "$tunnel\t" "$class\t" "$rootjail\t" "$sub\t" "$disk\t" "$ram\t" "${cpu}${COL_OFF}\n" >> $tmp
	done
}

print_alerts() {
	printf "%b" "${GREEN}-------------------   ACTIVE WINDOW:  $active    ------------------${COL_OFF}\n"

	if [ "$cam" -o "$mic" -o "$hostnet" ] ; then
		echo -e "${RED}##############################################################" 
		[ "$cam" ] \
		&& echo -e "##          W E B C A M   D A E M O N   I S   O N  !!        ##"  
		[ "$mic" ] \
		&& echo -e "##      M I C R O P H O N E   D A E M O N  I S  O N  !!      ##"
		[ "$hostnet" ] \
		&& echo -e "##${BRED}     H O S T  I S  N E T W O R K  C O N N E C T E D !!    ${COL_OFF}${RED}##" 
		echo -e "##############################################################${COL_OFF}"
	fi

}

main() {
	while : ; do 
		assemble_header
		define_variables
		get_jails_loop
		clear
		(head -n 1 $tmp && tail -n +2 $tmp | sort -k $col | cut -f1,2,3,4,5,7,8,9) >> $tmp2
		cat $tmp2 | column -t
		print_alerts
		sleep 1
	done
}


checks
define_variables
main


