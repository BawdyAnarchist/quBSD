#!/bin/sh

. /usr/local/lib/quBSD/quBSD.sh
. /usr/local/lib/quBSD/msg-stat.sh

get_options() {
	while getopts c:h opts ; do
		case $opts in
			c) COL="$OPTARG" ;;
			h) get_msg_stat "none" "usage_0" ;;
		esac
	done

	shift $(( OPTIND - 1 ))
}

trap_on_exit() {
	rm $TMP1 > /dev/null 2>&1
	rm $TMP2 > /dev/null 2>&1
	exit 0
}

define_script_files() {
	# Trap to remove TMP files when exiting
	trap "trap_on_exit" INT TERM HUP QUIT EXIT

	QBROOT=$(sed -nE "s:quBSD_root[[:blank:]]+::p" $QBCONF) 
	TMP1=$(mktemp -t "qb-stat1")
	TMP2=$(mktemp -t "qb-stat2")
	COL="${COL:=6,6}"
}

define_colors() {
	# NOTE: printf counts ANSI color escapes with \tabs in alignment
	# As a result, any color used for jails/VMs must have same length escapes
	COL_OFF='\033[0m'	       # Turn off color	
	 NORMAL='\033[0;39m'     # Default terminal settings 
     GREEN='\033[1;7;32m'   # Green, inverted, for active window alert 
       RED='\033[1;31m'     # Bold Red
      BRED='\033[1;5;31m'   # Blinking bold red, for hostnet connection alert
      BLUE='\033[0;34m'     # Blue - server jails 
      GRAY='\033[0;90m'     # Gray - system, templates, host, VMs, misc jails 
    YELLOW='\033[0;33m'     # Yellow - net jails 
     HILIT='\033[7;39m'     # Highlighted top line
}

assemble_header() {
	[ -e "$TMP1" ] && rm $TMP1
	[ -e "$TMP2" ] && rm $TMP2
	mktemp $TMP1 > /dev/null
	mktemp $TMP2 > /dev/null

	printf "%b" "${HILIT}CONTAINER\tPID\tGATEWAY\tCLASS\tROOT\tDISK\t%RAM\t%CPU${COL_OFF}\n" >> $TMP1
}

define_variables() {
	#Jails data
	jails=$(grep -E "[^[:blank:]]+[[:blank:]]+CLASS[[:blank:]]+" $JMAP | awk '{print $1}') 
	zfs_list=$(zfs list -ro name,used)

	# Jailname of the active window is assigned to: $_XJAIL 
	get_info _XJAIL

	# Input devices status
	cam=$(service webcamd onestatus | grep -o "webcamd is running")
	mic=$(service virtual_oss onestatus | grep -o "virtual_oss is running")

	# Host connected
	interfaces=$(ifconfig -l | sed "s/lo0//g")
	[ -z "$interfaces" ] && hostnet=""

	for _i in $interfaces ; do
		$(ifconfig $_i inet | grep -Eqs "^[[:blank:]]*inet") && hostnet="true" || hostnet=""
	done
}

get_jails_loop() {
	for _j in $jails ; do
		class=$(get_jail_parameter -eqs CLASS "$_j")
#scheduled for deletion
#class="${class%jail}"
		gateway=$(get_jail_parameter -eqs GATEWAY "$_j")
		gateway="${gateway:--}"
		rootjail=$(get_jail_parameter -eqs ROOTJAIL "$_j")
		rootjail="${rootjail:--}"
		disk="-"
		jid="-"
		cpu="-"
		ram="-"
		
		if chk_isrunning "$_j" ; then

			if chk_isvm "$_j" ; then
				jid=$(pgrep -f "bhyve: $_j")
				cpu=unk
				ram=unk
				#cpu=$(ps au -J $_j | awk '{sum+=$3;} END {print sum;}')
				#ram=$(ps au -J $_j | awk '{sum+=$4;} END {print sum;}')

			else
				jid=$(jls -j $_j -n jid | sed "s/jid=//") 
				cpu=$(ps au -J $_j | awk '{sum+=$3;} END {print sum;}')
				ram=$(ps au -J $_j | awk '{sum+=$4;} END {print sum;}')
			fi
		fi	

		if [ "$class" = "rootjail" -o -z "${_j##0*template}" ] ; then 
			disk=$(echo "$zfs_list" | sed -nE "s#^${JAILS_ZFS}/${_j}[[:blank:]]+##p")
			sub=4

		elif [ "$class" = "rootVM" ] ; then 
			# Future functionality - bhyvectl or ping test for on/connected
			disk=$(echo "$zfs_list" | sed -nE "s#^${JAILS_ZFS}/${_j}[[:blank:]]+##p")
			sub=5
		else 
			disk=$(echo "$zfs_list" | sed -nE "s#^${ZUSR_ZFS}/${_j}[[:blank:]]+##p")
			
			case $_j in
				net*)  sub="3" ;;
				serv*) sub="2" ;;
				host*) sub="6" ;;
				*)		 sub="1" ;;
			esac
		fi

		gateway="${gateway:--}"
		rootjail="${rootjail:--}"
		disk="${disk:--}"
		jid="${jid:--}"
		cpu="${cpu:--}"

		case $sub in
			1) TEMPCOL=${NORMAL} ;;
			2) TEMPCOL=${BLUE} ;;
			3) TEMPCOL=${YELLOW} ;;
			4) TEMPCOL=${GRAY} ;;
			5) TEMPCOL=${GRAY} ;;
			6) TEMPCOL=${GRAY} ;;
		esac

		printf "%b" "${TEMPCOL}$_j\t" "$jid\t" "$gateway\t" "$class\t" "$rootjail\t" "$sub\t" "$disk\t" "$ram\t" "${cpu}${COL_OFF}\n" >> $TMP1
	done
}

print_alerts() {
	printf "%b" "${GREEN}-------------------   ACTIVE WINDOW:  $_XJAIL ------------------${COL_OFF}\n"

	if [ "$cam" -o "$mic" -o "$hostnet" ] ; then
		echo -e "${RED}##############################################################" 
		[ "$cam" ] \
		&& echo -e "##          W E B C A M   D A E M O N   I S   O N  !!        ##"  
		[ "$mic" ] \
		&& echo -e "##      M I C R O P H O N E   D A E M O N  I S  O N  !!      ##"
		[ "$hostnet" ] \
		&& echo -e "##${BRED}     H O S T  I S  N E T W O R K  C O N N E C T E D !!    ${COL_OFF}${RED}##" 
		echo -e "##############################################################${COL_OFF}"
	fi

}

main() {
	while : ; do 
		assemble_header
		define_variables

		# Redirect is important to prevent micro flashes of a sed error for ZUSR
		get_jails_loop > /dev/null 2>&1

		# Sort -b ignores leadings spaces, -f ignores case ; grep remove #defaults from JMAP
		(head -n 1 $TMP1 && tail -n +2 $TMP1 | sort -fbk $COL | cut -f 1,2,3,4,5,7,8,9 \
				| grep -Ev '#default') >> $TMP2

		# Clear at the last moment; re-print the new file in nice columns; plus any alerts
		clear
		column -t $TMP2 
		print_alerts

		sleep 1
	done
}

get_global_variables

get_options "$@"

define_script_files

define_colors

define_variables

main

