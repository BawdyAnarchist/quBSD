#!/bin/sh

. /usr/local/lib/quBSD/quBSD.sh
. /usr/local/lib/quBSD/msg-destroy.sh

get_options() {
	while getopts h opts ; do
		case $opts in
			h) get_msg2 -eu ;;
			*) exit 1 ;;
		esac
	done

	shift $(( OPTIND - 1 ))

	JAIL="$1"
}

define_variables() {

	# No jail provided
	[ -z "$JAIL" ] && get_msg2 -Eum _e3

	# Important parameters for checks
	get_jail_parameter -q CLASS "$JAIL"
	get_jail_parameter -dq NO_DESTROY "$JAIL"

	# Assume the jail either doesnt exist, or is partial. Dont require changing NO_DESTROY
	[ -z "$CLASS" ] && NO_DESTROY="false"

	OFFJAILS=$(zfs list -o name,origin | grep -E "$JAIL\@.*\$" \
									| awk '{print $1}' | sed "s@.*/@@")

	# Get sizes of datasets to be destroyed, and simulation messages from zfs
	if chk_valid_zfs ${U_ZFS}/${JAIL} ; then
		zusrSize=$(zfs list -o used ${U_ZFS}/${JAIL} | tail -1)
		zusrDestroy=$(zfs destroy -nvrRf ${U_ZFS}/${JAIL} | grep -v "${JAIL}\@")
	fi

	if	chk_valid_zfs ${R_ZFS}/$JAIL ; then
		zrootSize=$(zfs list -o used ${R_ZFS}/${JAIL} | tail -1)
		zrootDestroy=$(zfs destroy -nvrRf ${R_ZFS}/${JAIL} | grep -v "${JAIL}\@")
	fi
}

checks() {

	# no_destroy protection flag still active
	[ "$NO_DESTROY" = "true" ] && get_msg2 -Eum _e2

	# Extra reminder that they're destorying a rootjail
	[ -z "${CLASS##root*}" ] && [ -n "$CLASS" ] && get_msg2 -m _e4

	# Message on datasets depends on if there's any dataset to destroy
	if [ -z "${zrootDestroy}${zusrDestroy}" ] ; then
		get_msg2 -m _e5_1

	else
		# Print the datasets and amount of data to be destroyed
		get_msg2 -m _e5
		[ -n "$zrootDestroy" ] && get_msg2 -m _e6
		[ -n "$zusrDestroy" ] && get_msg2 -m _e7

		# Solicit user response
		get_msg2 -m _e8
		severe="severe"
	fi

	# "severe" requires a full `yes' to be typed
	get_user_response $severe || get_msg2 -em _e1
}

main() {

	# Turn off all jails before applying changes
	for _jail in $JAIL $OFFJAILS ; do
		stop_jail -w "$_jail"
	done

	# Destroy datasets
	[ "$zrootDestroy" ] \
		&& chk_valid_zfs "${R_ZFS}/${JAIL}" \
		&& zfs destroy -rRf ${R_ZFS}/${JAIL}

	[ "$zusrDestroy" ] \
		&& chk_valid_zfs "${U_ZFS}/${JAIL}" \
		&& zfs destroy -rRf ${U_ZFS}/${JAIL}

	# Modify Files
	sed -i '' -E "/^${JAIL}[[:blank:]]/d" $QMAP
	sed -i '' -E "/^${JAIL}(\{|[[:blank:]])/,/^}/d" $JCONF
}


get_global_variables

get_options "$@"

define_variables

checks

main


