#!/bin/sh

. /usr/local/lib/quBSD/quBSD.sh
. /usr/local/lib/quBSD/msg-list.sh

get_options() {
	while getopts ahj:lp:szZ opts ; do
		case $opts in
			a) _zparams="qubsd:autosnap" ; ZLIST="t" ;;
			h) get_msg_list "none" "usage_0" ;;
			j) JAIL="${OPTARG}" ;;
			l) LIST="t" ;;
			p) PARAM="${OPTARG}" ;;
			s) _snaps="-t all" ; ZLIST="t" ;;
			z) ZLIST="t" ;;
			Z) ZLIST="t" ; ZONLY="t" ;;
			*) exit 1 ;;
		esac
	done

	shift $(( OPTIND - 1 ))

	# Convert lower-case entered PARAM to upper (user-friendly)
	[ "$PARAM" ] && PARAM=$(echo "$PARAM" | tr '[:lower:]' '[:upper:]')

	# Assign zfs option for columns
	_zparams="-o name,used,mountpoint,$_zparams"

	# Case statements later, depend on 'none' and 'f' (false) being assignd instead of null
	JAIL=${JAIL:=none}
	PARAM=${PARAM:=none}
	POS1="$1" ; POS1=${POS1:=none}
	POS2="$2" ; POS2=${POS2:=none}
	LIST=${LIST:=f}
	ZLIST=${ZLIST:=f}
}

check_and_adjust() {
	# Script is intended to be robust for the user. This function
	# merges any positional parameters with -j and -p options, when able.

	case "${JAIL}_${POS1}_${PARAM}_${POS2}" in

		# No action. If POS1 wasnt assigned, then POS2 wasnt either
		none_none_*|*_none_*_*) : ;;

		# In this case, we're nice to the user, and try to figure out if POS1 is JAIL or PARAM
		none_*_none_none)

			# Check if it's a parameter
			awk '{print $2}' $QMAP | grep -Eqsi "$POS1" && PARAM="$POS1"

			# Check if it's an entry in QMAP
			grep -Eqs "^${POS1}[[:blank:]]+" $QMAP && JAIL="$POS1"

			# If jail=param (and not 'none'), then it's ambiguous what the user wanted
			[ ! "$JAIL" = "none" ] && [ "$PARAM" = "$JAIL" ] && get_msg_list "_2" "usage_1"

			# If both are 'none', then continue, assuming POS1 as JAIL (could be zfs present)
			[ "$JAIL" = "none" ] && [ "$PARAM" = "none" ] && JAIL="$POS1"
		;;

		# Both POS1&2 should be assigned
		none_*_none_*) JAIL="$POS1" ; PARAM="$POS2" ;;

		# POS1 is clearly JAIL, as -p was assigned. Even if POS2 exists, use the -p <PARAM>
		none_*_*_*) JAIL="$POS1" ;;
	esac

	# Convert lower-case entered PARAM to upper, again, in case POS2 replaced it
	[ "$PARAM" ] && PARAM=$(echo "$PARAM" | tr '[:lower:]' '[:upper:]')
}

get_results() {
	# Large case statement to handle the possible combinations
	# Note: While there's some redundancy, it's a more clear/comprehensive solution
	# Where possible, _$ZLIST_ is set as wildcard, with switch used inside case statement

	case "${LIST}_${ZLIST}_${JAIL}_${PARAM}" in

		# List all jails (regardless of [-l] given or not)
		*_f_none_NONE)
				_RESULT=$(awk '{print $1}' $QMAP | uniq | grep -Ev "^(#|host)" | sort -k1)
		;;

		# List all jails and then list their zfs's
		t_t_none_NONE)
				_RESULT=$(awk '{print $1}' $QMAP | uniq | grep -Ev "^(#|host)" | sort -k1)
				get_zresult
		;;

		# List all jails zfs's, but dont list the jails as a single named column like last case
		f_t_none_NONE)
				get_zresult
		;;

		# Show a particular jail
		*_*_*_NONE)
			# Add in devfs if appropriate, and supplement missing values with #defaults
			_RESULT=$(grep -E "^${JAIL}[[:blank:]]" $QMAP)
			get_devfs_result
			supplement_results
			[ "$ZLIST" = "t" ] && get_zresult
		;;

		# Show a particular parameter
		*_*_none_*)
			[ "$PARAM" = "DEVFS_RULE" ] && get_devfs_result \
				|| _RESULT=$(grep -E "^[^[:blank:]]+[[:blank:]]+${PARAM}[[:blank:]]" $QMAP)
		;;

		# Show a jail/parameter combo
		*_f_*_*)
			[ "$PARAM" = "DEVFS_RULE" ] && get_devfs_result \
				|| _RESULT=$(grep -E "^${JAIL}[[:blank:]]+${PARAM}[[:blank:]]" $QMAP)

			[ -z "$_RESULT" ] \
					&& _RESULT=$(grep -E "^#default[[:blank:]]+${PARAM}[[:blank:]]" $QMAP)

			[ "$ZLIST" = "t" ] && get_zresult
		;;
	esac
}

get_zresult() {
	# Switches between full zfs list of system, and just for jail (if set)
	[ "$JAIL" = "none" ] && _jail='' || _jail="/$JAIL"

	_ZRESULT=$(zfs list -r $_snaps $_zparams "${R_ZFS}${_jail}" 2>/dev/null; \
					zfs list -r $_snaps $_zparams "${U_ZFS}${_jail}" 2>/dev/null)

	[ -z "$_ZRESULT" ] && _ZRESULT="NO ZFS DATASETS WERE FOUND"
}

get_devfs_result() {
	# Get the rule number from jail.conf (this will just be blank for VMs)
	_rulenum=$(sed -En "/^${JAIL}(\{|[[:blank:]])/,/^}/p" $JCONF \
				| sed -En "s/devfs_ruleset=\"//p" | grep -Eo "[[:digit:]]+")

	# Then get the full name of the rulenumber from devfs.rules
	if [ -n "$_rulenum" ] ; then
		_rulename=$(sed -En "s/.*devfsrules_(.*=${_rulenum}).*/\1/p" /etc/devfs.rules)

		# Modify result
		_RESULT=$(echo "$_RESULT" ; echo "$JAIL  DEVFS_RULE  ${_rulename}")
	fi
}

supplement_results() {

	# Will return globals: CLASS and FILT_PARAMS (which will change for jails vs VMs)
	get_parameter_lists

	# Parameters enumerated for the jail/VM
	_current_params=$(echo "$_RESULT" | awk '{print $2}')

	# Find the #defaults that will need to be added
	for _param in $FILT_PARAMS ; do
		! echo "$_current_params" | grep -qs "$_param" && _RESULT="$(echo "$_RESULT" \
										; grep -E "^#default[[:blank:]]+${_param}[[:blank:]]" $QMAP)"
	done

	# Sort the result by the 2nd column
	_RESULT=$(echo "$_RESULT" | awk '{$1=$1}1' | sort -k2)
}

print_results() {

	if [ "$_RESULT" ] && [ -z "$ZONLY" ] ; then
		_RESULT=$(echo -e "CONTAINER   PARAMETER   VALUE\n${_RESULT}" | column -t)
		# Eliminate the extra space that can happen for BHYVE_CUSTM after the column -t
		_RESULT=$(echo "$_RESULT" | sed -E \
		's/^([^[:blank:]]+[[:blank:]]+[^[:blank:]]+[[:blank:]]+[^[:blank:]]+)[[:blank:]]+/\1 /')

		echo ''
		echo "$_RESULT" | grep "CONTAINER"
		echo "$_RESULT" | grep -Ev "^(#default|CONTAINER)"
		echo "$_RESULT" | grep "#default"
	fi

	[ "$_ZRESULT" ] && echo -e "${_ZRESULT}\n" | column -t

	[ -z "$_RESULT" ] && [ -z "$_ZRESULT" ] && get_msg_list "_6"
}

get_global_variables

get_options "$@"

check_and_adjust

get_results

print_results

