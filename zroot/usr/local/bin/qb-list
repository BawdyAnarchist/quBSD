#!/bin/sh

while getopts ahqzj:p: o ; do
	case $o in
		a) all="true" ;;
		h) help="true" ;;
		j) jail="${OPTARG}" ;;
		p) param="${OPTARG}" ;;
		q) quiet="true" ;; 
		z) zfslist="true" ;; 
	esac
done

shift $(( OPTIND - 1 ))

# Get datasets, mountpoints; and define files.
zusr_zfs=$(sed -En "s/^zusr_dataset[[:blank:]]+//p" /usr/local/etc/jail.conf.d/quBSD.conf)
m_zusr=$(zfs get -H mountpoint $zusr_zfs | awk '{print $3}')
jails_zfs=$(sed -En "s/^jails_dataset[[:blank:]]+//p" /usr/local/etc/jail.conf.d/quBSD.conf)
m_jails=$(zfs get -H mountpoint $jails_zfs | awk '{print $3}')
jmap="/usr/local/etc/jail.conf.d/jailmap.conf"

usage() {
	[ "$quiet" ] && exit 1
	[ "$ERR" ] && printf "%b" "\n$ERR\n"
	echo ""
	echo "qb-list:  Lists jail properties contained in jailmap"
	echo ""
	echo "Usage: qb-list [-j <jail>] [-p <parameter>]"
	echo "Usage: qb-list [-a] [-h] [-q] [-z] [-j <jail>] [-p <parameter>]"
	echo "   -a: (a)ll:  List all jails. Combine with [-z] for all zfs data" 
	echo "   -h: (h)elp:  Outputs this help message"
	echo "   -j: (j)ail:  Show all settings for <jail>" 
	echo "   -p: (p)arameter:  Shows setting of PARAMETER for all jails" 
	echo "   -q: (q)uiet:  Suppress all output an only return an exit status" 
	echo "   -z: (z)fs:  List all zfs datasets associated with <jail>" 
	echo ""
	echo "PARAMETERS    saved at /usr/local/etc/jail.conf.d/jailmap.conf"
	echo "    class:    appjail, dispjail, or rootjail"
	echo "    cpuset:   CPUs a jail may use, or \`none' for no limit"
	echo "    schg:     Directories to receive schg flags: all|sys|none"
	echo "    maxmem:   RAM maximum allocation, or \'none' for no limit" 
	echo "    rootjail: Which rootjail (system jail) to clone for <jail>"
	echo "    seclvl:   kern.securelevel to protect <jail>: -1|0|1|2|3"
	echo "    template: Only for dispjail, which is cloned from template" 
	echo "    tunnel:   Gateway for <jail> to receive network connectivity"
	echo "    devfs_ruleset=  Provided for reference. See /etc/jail.conf" 
	echo ""
	exit 1
}

get_variables () {
	jmap_all=$(cat $jmap | uniq)

	# List of only uniq containers (jails and VMs)	
	jmap_list=$(egrep "^[^[:blank:]]+[[:blank:]]" $jmap | awk '{print $1}' | tail +3 | uniq)

	# This adds the devfs ruleset from /etc/jail.conf to jmap_all 
	for j in $jmap_list ; do
		jail_conf=$(sed -nE "/^${j}[[:blank:]]*\{/,/\}/p" /etc/jail.conf | \
								grep "devfs_ruleset")
		[ -n "$jail_conf" ] && jmap_all=$(printf "%b" "$jmap_all\n$j\t$jail_conf")
	done

	# Filters for the jail; the parameter; or the single line combo of jail/param if both were specified
	jmap_param=$(echo "$jmap_all" | egrep "(^[^[:blank:]]+[[:blank:]]+"$param")|(^CONTAINER)" | column -t)
	jmap_jail=$(echo "$jmap_all" | egrep "(^${jail}[[:blank:]]+)|^CONTAINER" | column -t) 
	jmap_jail_param=$(echo "$jmap_jail" | egrep "(^CONTAINER)|($param)" | column -t)

	# Gets all of the zfs data for both zroot and ${zusr_zfs}
	zroot_all=$(zfs list -rt all -o name,used,origin, ${jails_zfs})
	zusr_all=$(zfs list -Hrt all -o name,used,origin, ${zusr_zfs})
	zfs_all=$(printf "%b" "\n" "$zroot_all\n$zusr_all\n" | column -t)
	zfs_jail=$(echo "$zfs_all" | egrep "(^NAME)|($jail(@|[[:blank:]]))" | column -t)
}

checks() {
	if [ "$help" ] ; then 
		usage

	elif [ -z "$jail" -a -z "$param" -a -z "$all" ] ; then
		ERR="qb-list: ERROR: must specify a jail or parameter"
		usage
	fi

	if [ -n "$jail" ] && ! `echo "$jmap_all" | egrep -qs "^$jail[[:blank:]]"` ; then
		ERR="qb-list: ERROR: Jail doesn't exist or is not configured properly"
		usage 
	fi

	if [ -n "$param" ] && ! `echo "$jmap_all" | awk '{print $2}' | egrep -qs "$param"` ; then
		ERR="qb-list: ERROR: The parameter "$param" doesn't exist" 
		usage 
	fi

	if [ "$jail" -a "$param" ] ; then
		if [ -z "$jmap_jail_param" ] ; then
			ERR=$(printf "%b" "qb-list ERROR: The combination of ${jail}" \
				" ${param} does not exist in jailmap.conf")
			usage
		fi
	fi

	if [ "$quiet" ] ; then
		exit 0
	fi
}

print_settings() {
	if [ "$zfslist" ] ; then
		if [ "$all" ] ; then
			printf "%b" "\n$zfs_all\n" 
		elif [ "$jail" ] ; then
			printf "%b" "\n$zfs_jail\n" | sort
		fi

	elif [ "$all" ] ; then
		printf "%b" "\n$jmap_list\n\n" | sort

	elif [ "$jail" -a "$param" ] ; then
		printf "%b" "\n$jmap_jail_param\n\n" 

	elif [ "$jail" ] ; then
		printf "%b" "\n$jmap_jail\n\n" 

	elif [ "$param" ] ; then
		printf "%b" "\n$jmap_param\n\n" 
	fi
}


get_variables
checks
print_settings


