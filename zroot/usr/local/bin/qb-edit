#!/bin/sh

. /usr/local/lib/quBSD/quBSD.sh
. /usr/local/lib/quBSD/msg-edit.sh

get_options() {
	local OPTIND
	while getopts fhir opts ; do
		case $opts in
			f) FORCE="true" ;;
			h) get_msg_qb_edit "none" "usage_0" ;; 
			i) PARAM="IP0" ; VAL="auto" ;;
			r) RESTART="true" ;;
		esac
	done

	shift $(( OPTIND - 1 ))
	
	# Script variables 
	JAIL="$1"
	PARAM="${PARAM:-"$2"}"
	VAL="${VAL:-"$3"}"
	OLDSETTING=$(sed -nE "s@^${JAIL}[[:blank:]]+${PARAM}[[:blank:]]+@@p" $JMAP)
}

checks() {
	# Check for required inputs
	if [ -z "$JAIL" -o -z "$PARAM" -o -z "$VAL" ] ; then
echo "$JAIL" ; echo "$PARAM" ; echo "$VAL"
		# Only exception to missing input, is for [-i] auto assign IP 
		[ -z "$AUTO_IP" ]  &&  get_msg_qb_edit "_1" "usage_1"
	
	elif ! grep -Eqs "^${JAIL}[[:blank:]]+${PARAM}[[:blank:]]+" $JMAP ; then

		# Doesn't exist in jmap (thus, can't be edited)
		get_msg_qb_edit "_2" "usage_1"

	elif [ "$VAL" == "$OLDSETTING" ] ; then
		# New value is unchanged from old value 
		get_msg_qb_edit "_3" "usage_0"

	fi	

	# Sanity checks to make sure values are reasonable
	case $PARAM in
		autostart|no_destroy)
				[ "$VAL" == "true" -o "$VAL" == "false" ] || get_msg_qb_edit "_7" "usage_1"
		;;
		class)
				get_msg_qb_edit "_4" "usage_1"
		;;
		cpuset)
				check_isvalid_cpuset "$VAL"  ||  get_msg_qb_edit "_5" "usage_1" 
		;;
		maxmem)
				check_isvalid_maxmem "$VAL"  ||  get_msg_qb_edit "_6" "usage_1" 
		;;
		rootjail)
				# Check that rootjail has jmap and zroot zfs 
				check_isvalid_root "$VAL"  ||  get_msg_qb_edit "_8" "exit_1"
		;;
		schg) 
				check_isvalid_schg "$VAL"  ||  get_msg_qb_edit "_9" "usage_1" 
		;;	
		seclvl)		
				check_isvalid_seclvl "$VAL"  ||  get_msg_qb_edit "_10" "usage_1" 
		;;
		template)
				# Check that template jail has jmap and zusr zfs 
				check_isvalid_template "$VAL"  ||  get_msg_qb_edit "_11" "exit_1"
		;;
		tunnel)  
				# Check that tunnel has jmap, zusr, is `none', and starts with `net-'
				check_isvalid_tunnel "$VAL" "$JAIL"

				case "$_validTunnel" in
					# Alert and exit if tunnel doesn't have the form `net-'
					firewall)  get_msg_qb_edit "_19" "exit_1" ;;

					net)	get_msg_qb_edit "_12" "exit_1" ;;

					# Warn and exit tunnel doesn't zusr zfs config  
					jmap)	get_msg_qb_edit "_13" "usage_1" ;;

					# Warn and exit tunnel doesn't zusr zfs config  
					zusr)	get_msg_qb_edit "_13_1" "usage_1" ;;

				esac
		;;

		# IP0 is the most complicated. Save it for last, just for code organization
		IP0)
			# function returns 1 if it's acting on net-firewall. All else returns 0 
			if define_ipv4_convention ; then

				# Get a list of all IP in use by running jails. Assigns: $_USED_IPS
				get_used_ips

				if [ "$VAL" == "auto" ] ; then 
					# IP discovery doesn't require additional checks
					VAL=$(discover_open_ipv4)  ||  get_msg_qb_edit "_14" "usage_1"

				else
					# Invalid IPs should throw an error
					check_isvalid_ipv4 "$VAL"  ||  get_msg_qb_edit "_15" "usage_1" 
					
					# quBSD IP conventions check. Returns: $_isqubsd_ipv4
					check_isqubsd_ipv4 "$VAL" 
					[ -n "$_isoverlap" ]  &&  get_msg_qb_edit "_16" "exit_1" 
					[ -n "$_ismismatch" ] &&  get_msg_qb_edit "_17" "exit_1" 
				fi
				
			# Special handling for net-firewall 
			else
				# Define variable to switch in main()
				_firewall="true"

				if [ "$VAL" == "auto" ] ; then 
					# Auto IP assignment for net-firewall implies DHCP - handled in main()
					VAL="DHCP" 
				else
					# If user provided IP, check that it's valid
					check_isvalid_ipv4 "$VAL"  ||  get_msg_qb_edit "_15" "usage_1" 
				fi
			fi

			# Check the tunnel associated with JAIL's IP0 change
			TUNNEL=$(sed -nE "s/^${JAIL}[[:blank:]]+tunnel[[:blank:]]+//p" $JMAP)
			check_isvalid_tunnel

			case "$_validTunnel" in
				# Error that net-firewall must be a tap tunnel
				firewall)  get_msg_qb_edit "_19" "exit_1"  ;;

				# Alert that tunnel doesn't have a zusr zfs config
				jmap)	get_msg_qb_edit "_13"  ;;

				# Alert that exit tunnel doesn't zusr zfs config  
				zusr)	get_msg_qb_edit "_13_1"  ;;

				# Alert that user is assigning an IP to a jail with no tunnel
				none)	get_msg_qb_edit "_18"  ;;

			esac
		;; # /IP0

		# Catch all. Any other entries for $PARAM return an error (really should be necessary).
		*)	get_msg_qb_edit "_20" "usage_1"  ;;

	# /PARAM
	esac
}

main() {
	# Modify JMAP
	sed -i '' -E "\@^${JAIL}[[:blank:]]+${PARAM}@s@[^[:blank:]]+\$@${VAL}@" $JMAP

	# Clean up the columns 
	_newJMAP=$(column -t $JMAP)
	echo "$_newJMAP" > $JMAP

	# Special handling case for net-firewall, to modify rc.conf 
	if [ "$_firewall" == "true" ] ; then
		_rcconf="${M_JAILS}/net-firewall/rw/etc/rc.conf"

		if [ "$VAL" == "DHCP" ] ; then
			sed -i '' -E "s/ifconfig_tap0.*/ifconfig_${TUNNEL}=\"DHCP\"/" $_rcconf
			sed -i '' -E "/defaultrouter=/ d" $_rcconf

		else
			# Using `#' as sed separator, because `/' interferes with variable expansion
			sed -i '' -E "s#ifconfig_tap0.*#ifconfig_${TUNNEL}=\"inet ${VAL}\"#g" $_rcconf
			sed -i '' -E "/^defaultrouter=.*/ d" $_rcconf
			sed -i '' -E "/^ifconfig_tap.*/ a\\
defaultrouter=\"${VAL%.*/*}.1\"" $_rcconf
		fi
	fi

	# Print new settings
	echo "Success"
	qb-list -j $JAIL -p $PARAM
}

handle_restarts() {
	# Define which jails need to be restarted
	case $PARAM in 
		cpuset|maxmem|rootjail|schg|seclvl|template)
			_restarts="       $JAIL" ;;
		IP0|tunnel)
			# This prevents `none' and `tap0' from being flagged for restart 
			[ "$PARAM" == "tunnel" ] && TUNNEL="$VAL"
			if [ "$TUNNEL" == "none" ] || [ -z "${tunnel##tap[[:digit:]]}" ] ; then
				_restarts="       $JAIL" 
			else	
				_restarts=$(printf "%b" "       $JAIL\n       $TUNNEL")
			fi
		;;	
	esac

	# If there are no jails to restart, exit
	[ -z "$_restarts" ] && exit 0
	
	# Query user to restart jails 
	if [ -z "$RESTART" ] ; then
		get_msg_qb_edit "_21"
		get_user_response || exit 0 
	fi
	
# Restart jails (otherwise, would've already exited)	
	for _jail in $_restarts ; do
		[ "$_jail" == "none" ]  ||  restart_jail "$_jail"
	done
}

get_global_variables 

get_options "$@"

checks

main

handle_restarts



