#!/bin/sh

. /usr/local/lib/quBSD/quBSD.sh
. /usr/local/lib/quBSD/msg-edit.sh

get_options() {
	while getopts adfhiqr opts ; do
		case $opts in
			a) ACTION="add" ;;
			d) ACTION="delete" ;;
			f) FORCE="true" ; _q='-q' ;;
			h) get_msg_edit "none" "usage_0" ;;
			q) QUIET="true" ; _q='-q' ;;
			r) RESTART="true" ;;
			*) exit 1 ;;
		esac
	done

	shift $(( OPTIND - 1 ))

	# Script variables
	JAIL="$1"
	PARAM="$2"

	# If adding	a line, it might be '-s opt' for bhyve, need full line
	if [ "$PARAM" = "BHYVE_CUSTM" ] ; then
		shift 2
		VALUE="$@"
	else
		VALUE="$3"
	fi

	# Create both (upper/lower) for VALUE. User convenience, and for checks later on
	PARAM=$(echo  "$PARAM" | tr '[:lower:]' '[:upper:]')
	_param=$(echo "$PARAM" | tr '[:upper:]' '[:lower:]')

	# Necessary for checks
	OLDSETTING=$(sed -nE "s@^${JAIL}[[:blank:]]+${PARAM}[[:blank:]]+@@p" $JMAP)

	# List out normal parameters which can be checked (vs BHYVE_CUSTM)
	COMN_PARAMS="AUTOSTART AUTOSNAP CLASS GATEWAY IPV4 MTU NO_DESTROY TEMPLATE"
	JAIL_PARAMS="CPUSET MAXMEM ROOTJAIL SCHG SECLVL TEMPLATE"
	VM_PARAMS="BHYVEOPTS MEMSIZE PPT ROOTVM TAPS TMUX VCPUS WIREMEM"
}

checks() {

	if [ "$ACTION" = "delete" ] ; then
		# Make sure that at JAIL and PARAM exist
		[ -n "$JAIL" ] && [ -n "$PARAM" ] || get_msg_edit "_1" "usage_1"

		# Make sure the combo of JAIL and PARAM (and VALUE if available)
		if [ -n "$VALUE" ] ; then
			_delline=$(grep -E "^${JAIL}[[:blank:]]+${PARAM}[[:blank:]]+${VALUE}" $JMAP) \
				|| get_msg_edit "_2_1" "exit_0"
		else
			_delline=$(grep -E "^${JAIL}[[:blank:]]+${PARAM}[[:blank:]]+" $JMAP) \
				|| get_msg_edit "_2_1" "exit_0"
		fi

	else
		# Need all 3 parameters
		[ -z "$JAIL" -o -z "$PARAM" -o -z "$VALUE" ] && get_msg_edit "_1" "usage_1"

		# New value is unchanged from old value
		[ "$VALUE" = "$OLDSETTING" ] && get_msg_edit "_2" "exit_0"
	fi

	# Check that PARAM selected is a valid parameter for jail or VM indicated
	if chk_isvm "$JAIL" ; then
		echo "BHYVE_CUSTM $VM_PARAMS $COMN_PARAMS" | grep -Eqs "$PARAM" \
			|| get_msg_edit "_3" "usage_1"
	else
		echo "$JAIL_PARAMS $COMN_PARAMS" | grep -Eqs "$PARAM" \
			|| get_msg_edit "_4" "usage_1"
	fi

	# BHYVE_CUSTM is special, but everything else can run through normal chk_valid functions
	[ ! "$PARAM" = "BHYVE_CUSTM" ] && [ ! "$ACTION" = "delete" ] \
		&& ! eval "chk_valid_${_param}" $_q \"$VALUE\" \"$JAIL\" && [ -z "$FORCE" ] && exit 1

	# Extra checks/interaction for GATEWAY and IPV4
	case $PARAM in

		GATEWAY)
				get_jail_parameter -qs IPV4 "$JAIL"

				# Offer to change IPV4 from 'none' to 'auto', if gateway is valid
				if [ ! "$VALUE" = "none" ] && [ "$IPV4" = "none" ] ; then
					get_msg_edit "_10"
					get_user_response && _IPAUTO="true"
				fi
		;;
		IPV4)
				# Extra check for quBSD IPV4 convention.
				chk_isqubsd_ipv4 $_q "$VALUE" "$JAIL" || get_msg_edit "none" "exit_1" "_f"
		;;
	esac

	# Check if the line is already present, or if it needs to be added
	if ! grep -Eqs "^${JAIL}[[:blank:]]+${PARAM}[[:blank:]]+" $JMAP ; then
		[ "$ACTION" = "delete" ] && get_msg_edit "_5" "exit_1"
		ACTION="add"
	fi
}

modify_jmap() {

	case $ACTION in
		delete)
			if [ -n "$VALUE" ] ; then
				sed -i '' -E "\@^${JAIL}[[:blank:]]+${PARAM}[[:blank:]]+${VALUE}@ d" $JMAP
			else
				sed -i '' -E "\@^${JAIL}[[:blank:]]+${PARAM}[[:blank:]]+@ d" $JMAP
			fi
		;;
		add)
			echo "$JAIL  $PARAM  $VALUE" >> $JMAP
		;;
		*)
			# Modify JMAP and print new settings on success
			sed -i '' -E "\@^${JAIL}[[:blank:]]+${PARAM}@s@[^[:blank:]]+\$@${VALUE}@" $JMAP
		;;
	esac

	# Set IPV4 to auto in JMAP, if the user approved it
	[ "$_IPAUTO" ] \
		&& sed -i '' -E "\@^${JAIL}[[:blank:]]+IPV4@s@[^[:blank:]]+\$@auto@" $JMAP

	# Clean up the columns and sorting
	_newJMAP=$(column -t $JMAP)
	_newJMAP=$(echo "$_newJMAP" | sort -k1,1 -k2,2)
	echo "$_newJMAP" > $JMAP

	# BHYVE_CUSTM has extra spaces. At least remove the first space
	sed -i '' -E "s/(BHYVE_CUSTM[[:blank:]]+[^[:blank:]]+)[[:blank:]]+/\1 /" $JMAP

	# Print the new value
	[ "$ACTION" = "delete" ] && get_msg_edit "_8_1" || get_msg_edit "_8"
}

modify_autosnap() {

	# Class is necessary to know which dataset to operate on (zroot or zusr)
	get_jail_parameter CLASS $JAIL

	case $CLASS in

		# Rootjail only needs zroot operation
		rootjail)
			_ZFS="${JAILS_ZFS}/${JAIL}"
			chk_valid_zfs "$_ZFS" && zfs set qubsd:autosnap="${VALUE}" "$_ZFS" \
					&& zfs get qubsd:autosnap "$_ZFS"
		;;

		# Appjail/VM will have zusr. Dispjail might, but if not will fail to continue
		appjail|dispjail|appVM)
			_ZFS="${ZUSR_ZFS}/${JAIL}"
			chk_valid_zfs "$_ZFS" && zfs set qubsd:autosnap="${VALUE}" "$_ZFS" \
					&& zfs get qubsd:autosnap "$_ZFS"
		;;

		# RootVM will almost certainly have both zroot and zusr (due to /vmusr mounted)
		rootVM)

			_ZFS="${JAILS_ZFS}/${JAIL}"
			chk_valid_zfs "$_ZFS" && zfs set qubsd:autosnap="${VALUE}" "$_ZFS" \
					&& zfs get qubsd:autosnap "$_ZFS"

			_ZFS="${ZUSR_ZFS}/${JAIL}"
			chk_valid_zfs "$_ZFS" && zfs set qubsd:autosnap="${VALUE}" "$_ZFS" \
					&& zfs get qubsd:autosnap "$_ZFS"
		;;
	esac
}

handle_restarts() {
	# Logic could be written to change running jails, but simpler just to restart.
	case $PARAM in

		CPUSET|MAXMEM|MTU|ROOTJAIL|SCHG|SECLVL|TEMPLATE)
			chk_isrunning $JAIL && _restart1="$JAIL"
		;;
		IPV4|GATEWAY)
			_gateway=$(get_jail_parameter -deqs GATEWAY $JAIL)

			# If jail is running it needs restarted
			if chk_isrunning $JAIL ; then
				_restart1="$JAIL" ; _restart2="$_gateway"
			else
				chk_isrunning $_gateway && _restart2="$_gateway"
			fi
		;;
	esac

	# If there are no jails to restart, exit
	[ -z "$_restart1" ] && [ -z "$_restart2" ] && exit 0

	# If QUIET tagged, only continue if user specified a restart
	[ -n "$QUIET" ] && [ -z "$RESTART" ] && exit 0

	if [ -z "$QUIET" ] ; then
		get_msg_edit "_7"
		get_user_response || return 0
	fi

	# Restart jails (otherwise, would've already exited)
	for _jail in $_restart2 $_restart1 ; do
		[ "$_jail" = "none" ] || restart_jail "$_jail"
	done
}

main() {

	# jailmap.conf edits
	modify_jmap

	# Autosnap requires zfs changes
	[ "$PARAM" = "AUTOSNAP" ] && modify_autosnap

	handle_restarts
}


get_global_variables

get_options "$@"

checks

main


