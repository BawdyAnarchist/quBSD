#!/bin/sh

. /usr/local/lib/quBSD/quBSD.sh
. /usr/local/lib/quBSD/msg-edit.sh

get_options() {
	local OPTIND
	while getopts fhiqr opts ; do
		case $opts in
			   # [-f] acts on msg-edit function, rather than main script 
			f) FORCE="true" ; _q='-q' ;; 
			h) get_msg_edit "none" "usage_0" ;; 
			i) PARAM="ipv4" ; VAL="auto" ;;
			q) QUIET="true" ; _q='-q' ;;
			r) RESTART="true" ;;
		esac
	done

	shift $(( OPTIND - 1 ))
	
	# Script variables 
	JAIL="$1"
	PARAM="${PARAM:-"$2"}"
	VAL="${VAL:-"$3"}"
	OLDSETTING=$(sed -nE "s@^${JAIL}[[:blank:]]+${PARAM}[[:blank:]]+@@p" $JMAP)
}

checks() {
	# Check for required inputs
	if [ -z "$JAIL" -o -z "$PARAM" -o -z "$VAL" ] ; then
		# Only exception to missing input, is for [-i] auto assign IP 
		[ -z "$AUTO_IP" ]  &&  get_msg_edit "_1" "usage_1"
	
	elif ! grep -Eqs "^${JAIL}[[:blank:]]+${PARAM}[[:blank:]]+" $JMAP ; then
		# Doesn't exist in jmap (thus, can't be edited)
		get_msg_edit "_2" "usage_1"

	elif [ "$VAL" == "$OLDSETTING" ] ; then
		# New value is unchanged from old value 
		get_msg_edit "_3" "usage_0"

	fi	

	# Sanity checks to make sure values are reasonable
	case $PARAM in
		autostart|no_destroy)
				chk_truefalse $_q "$VAL" "$PARAM" || get_msg_edit "_4" "usage_1"
		;;
		class)
				get_msg_edit "_5" "usage_1" "_f"  
		;;
		cpuset)
				chk_valid_cpuset $_q "$VAL" || get_msg_edit "none" "usage_1" 
		;;
		maxmem)
				chk_valid_maxmem $_q "$VAL" || get_msg_edit "none" "usage_1" 
		;;
		rootjail|template)
				# Check that rootjail or template has jmap and zroot zfs 
				chk_valid_jail $_q "$VAL" || get_msg_edit "none" "exit_1" "_f"
		;;
		schg) 
				chk_valid_schg $_q "$VAL" ||  get_msg_edit "none" "usage_1" 
		;;	
		seclvl)		
				chk_valid_seclvl $_q "$VAL" ||  get_msg_edit "none" "usage_1" 
		;;
		gateway)  
				chk_valid_gateway $_q "$VAL" "$JAIL" \
						|| get_msg_edit "none" "exit_1" "_f"
		;;
		ipv4) 
				# It's possible user might try to assign DHCP from command line
				if [ "$VAL" == "auto" ] ; then 

					# Function returns available IPv4. Or for net-firewall returns "DHCP"
					VAL=$(discover_open_ipv4 $_q "$JAIL") \
							|| get_msg_edit "none" "exit_1"

				else
					# Check IP addresses for validity and quBSD convention adherence 
					chk_valid_ipv4 $_q "$VAL" "$JAIL" \
							|| get_msg_edit "none" "exit_1" 

					check_isqubsd_ipv4 $_q "$VAL" "$JAIL" \
							|| get_msg_edit "none" "exit_1" "_f"
				fi
		;; 
		# Catch all. Any other entries for $PARAM return an error.
		*)	get_msg_edit "_6" "usage_1"  ;;
	
	# /PARAM
	esac
}

handle_restarts() {
	# Logic could be written to change running jails, but simpler just to restart.
	case $PARAM in 

		cpuset|maxmem|rootjail|schg|seclvl|template)
			chk_isrunning $JAIL && _restart1="$JAIL"
		;;
		ipv4|gateway)
			_gateway=$(sed -nE "s/^${JAIL}[[:blank:]]+gateway[[:blank:]]+//p" $JMAP)

			# If jail is running it needs restarted
			if chk_isrunning $JAIL ; then
				_restart1="$JAIL" ; _restart2="$_gateway"

			else
				chk_isrunning $_gateway && _restart2="$_gateway"
			fi
		;;	
	esac

	# If there are no jails to restart, exit
	[ -z "$_restart1" ] && [ -z "$_restart2" ] && exit 0
	
	# If QUIET tagged, only continue if users specified a restart
	[ -n "$QUIET" ] && [ -z "$RESTART" ] && exit 0

	if [ -z "$QUIET" ] ; then 
		get_msg_edit "_7"
		get_user_response || exit 0 
	fi
	
	# Restart jails (otherwise, would've already exited)	
	for _jail in $_restart2 $_restart1 ; do
		[ "$_jail" == "none" ] || restart_jail "$_jail" 
	done
}

main() {

	# Modify JMAP and print new settings on success
	sed -i '' -E "\@^${JAIL}[[:blank:]]+${PARAM}@s@[^[:blank:]]+\$@${VAL}@" $JMAP \
			&& get_msg_edit "_8" 

	# Clean up the columns 
	_newJMAP=$(column -t $JMAP)
	echo "$_newJMAP" > $JMAP

	# Special handling case for net-firewall, to modify rc.conf 
	if [ "$JAIL" == "net-firewall" ] ; then
		
		# Relevant variables. 
		_tap=$(sed -nE "s/^${JAIL}[[:blank:]]+gateway[[:blank:]]+//p" $JMAP)
		_rcconf="${M_ZUSR}/net-firewall/rw/etc/rc.conf"
		chflags noschg "$_rcconf"	

		if [ "$VAL" == "DHCP" ] ; then
			sed -i '' -E "s/ifconfig_${_tap}.*/ifconfig_${_tap}=\"DHCP\"/" $_rcconf
			sed -i '' -E "/defaultrouter=/ d" $_rcconf

		else
			# Using `#' as sed separator, because `/' interferes with variable expansion
			sed -i '' -E "s#ifconfig_${_tap}.*#ifconfig_${_tap}=\"inet ${VAL}\"#g" $_rcconf
			sed -i '' -E "/^defaultrouter=.*/ d" $_rcconf
			
			# This might not be completley robust. Generally a.b.c.1 should be the default.
			sed -i '' -E "/^ifconfig_${_tap}.*/ a\\
defaultrouter=\"${VAL%.*/*}.1\"" $_rcconf
		fi
		
		get_msg_edit "_9"
	fi
}

get_global_variables 

get_options "$@"

checks

main

handle_restarts


