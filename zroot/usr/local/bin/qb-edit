#!/bin/sh

. /usr/local/lib/quBSD/quBSD.sh
. /usr/local/lib/quBSD/msg-edit.sh

get_options() {
	while getopts dfhqr opts ; do case $opts in
		d) ACTION="delete" ;;
		f) _F='-F' ;;
		h) get_msg2 -eu ;;
		q) _q='-q' ;;
		r) RESTART="true" ;;
		*) exit 1 ;;
   esac  ;  done  ;  shift $(( OPTIND - 1 ))

	# Script variables
	JAIL="$1" ; [ -z "$JAIL" ] && get_msg2 $_q -Eum _e0
	PARAM="$2"

	# If adding	a line, it might be '-s opt' for bhyve, need full line
	if [ "$PARAM" = "BHYVE_CUSTM" ] ; then
		shift 2
		VALUE="$@"
	else
		VALUE="$3"
	fi

	# Create both (upper/lower) for VALUE. User convenience, and for checks later on
	PARAM=$(echo  "$PARAM" | tr '[:lower:]' '[:upper:]')
	_param=$(echo "$PARAM" | tr '[:upper:]' '[:lower:]')

	# Necessary for editing lines vs adding lines
	OLDVALUE=$(grep -E "^${JAIL}[[:blank:]]+${PARAM}[[:blank:]].*" $QMAP)
	DEFAULT=$(sed -En "s/^#default[[:blank:]]+${PARAM}[[:blank:]]+//p" $QMAP)
}

checks() {
	# Check that the jail/VM exists in QMAP
	! grep -Eqs "^${JAIL}[[:blank:]]" $QMAP && get_msg2 $_q -Em _e1

	# This will return global variables: CLASS and FILT_PARAMS
	get_parameter_lists $JAIL

		# Multi-line parameters receive a new line
	if [ "$ACTION" = "delete" ] ; then
		# Make sure that at least JAIL and PARAM exist
		[ -n "$JAIL" ] && [ -n "$PARAM" ] || get_msg2 $_q -Eum _e0

		# Make sure at least one line exists to delete
		grep -Eqs "^${JAIL}[[:blank:]]+${PARAM}[[:blank:]]+${VALUE}" $QMAP \
				|| get_msg2 $_q -Em _e3

	else
		# Need all 3 parameters
		{ [ -z "$JAIL" ] || [ -z "$PARAM" ] || [ -z "$VALUE" ] ;} && get_msg2 $_q -Eum _e0

		# Exit if proposed entry already exists
		grep -Eqs "^${JAIL}[[:blank:]]+${PARAM}[[:blank:]]+${VALUE}[[:blank:]]*\$" $QMAP \
																			&& get_msg2 $_q -em _m1

		if echo "$MULT_LN_PARAMS" | grep -Eqs "$PARAM" ; then
			ACTION="add"

		# All other PARAMs must be checked for validity, and determine if new line is needed
		elif echo "$FILT_PARAMS" | grep -Eqs "$PARAM" ; then
			# If there was no OLDVALUE, add a new line. However, if VALUE is equal to the default,
			# then we'll delete the line and rely on the default. EXCEPT for CLASS and ROOTENV.
			# For safety reasons, jails/VMs should always specify this, even if equal to default.

			[ -z "$OLDVALUE" ] && ACTION="add"
			[ "$VALUE" = "$DEFAULT" ] && [ ! "$PARAM" = "CLASS" ] \
				&& [ ! "$PARAM" = "ROOTENV" ] && ACTION="revert_to_default"

		elif echo "$NON_QMAP" | grep -Eqs "$PARAM" ; then
			ACTION="none"

		# Values of the #default can be modified regardless of CLASS
		elif [ "$JAIL" = "#default" ] ; then :

		# Otherwise, PARAM was not found to be valid for the jail/VM
		else
			get_msg2 $_q -Em _e2 $_F
		fi

		# BHYVE_CUSTM is special, but everything else can test for chk_valid_param
		[ ! "$PARAM" = "BHYVE_CUSTM" ] \
				&& ! eval "chk_valid_${_param}" $_q '--' \"$VALUE\" \"$JAIL\" \
				&& get_msg2 $_q -m _e $_F && get_msg2 $_q -Em _m2 $_F
	fi

	# Extra checks/interaction for certain parameters and IPV4
	case $PARAM in

		# Should not be changing class, unless you really know what you're doing
		CLASS) get_msg2 $_q -m _e4 $_F ; get_msg2 $_q -Em _m2 $_F ;;

		# Warn about changing ROOTENV
		ROOTENV) get_msg2 $_q -m _w1 $_F ;;

		GATEWAY) # Offer to change IPV4 from 'none' to 'auto', if gateway is valid
				get_jail_parameter -dqs IPV4 "$JAIL"

				if [ ! "$VALUE" = "none" ] && [ "$IPV4" = "none" ] && [ -z "$_q" ] ; then
					get_msg2 -m _w0
					get_user_response && _IPAUTO="true"
				fi
			;;
		IPV4) # Extra check for quBSD IPV4 convention.
				chk_isqubsd_ipv4 $_q -- "$VALUE" "$JAIL" || get_msg2 $_q -Em _m2 $_F
			;;
	esac
}

modify_qmap() {

	case $ACTION in
		delete)
			_delline=$(grep -E "^${JAIL}[[:blank:]]+${PARAM}[[:blank:]]+${VALUE}" $QMAP)
			sed -i '' -E "\@^${JAIL}[[:blank:]]+${PARAM}[[:blank:]]+${VALUE}@ d" $QMAP
			;;
		revert_to_default)
			_default=$(grep -E "^#default[[:blank:]]+${PARAM}[[:blank:]]" $QMAP)
			sed -i '' -E "\@^${JAIL}[[:blank:]]+${PARAM}[[:blank:]]@ d" $QMAP
			;;
		add)
			echo "$JAIL  $PARAM  $VALUE" >> $QMAP
			;;
		none) :  # No action to take (devfs_ruleset)
			;;
		*) # Modify QMAP and print new settings on success
			sed -i '' -E "s@^(${JAIL}[[:blank:]]+${PARAM}[[:blank:]]+).*@\1${VALUE}@" $QMAP
			;;
	esac

	# Set IPV4 to auto in QMAP, if the user approved it
	[ "$_IPAUTO" ] \
		&& sed -i '' -E "\@^${JAIL}[[:blank:]]+IPV4@s@[^[:blank:]]+\$@auto@" $QMAP

	# Clean up the columns and sorting. Make sure there's no duplicates
	_newQMAP=$(column -t $QMAP | uniq)
	_newQMAP=$(echo "$_newQMAP" | sort -k1,1 -k2,2)
	echo "$_newQMAP" > $QMAP

	# BHYVE_CUSTM has extra spaces. At least remove the first space
	sed -i '' -E "s/(BHYVE_CUSTM[[:blank:]]+[^[:blank:]]+)[[:blank:]]+/\1 /" $QMAP
}

modify_autosnap() {

	# Class tells us which dataset to operate on (zroot or zusr)
	case $CLASS in

		# Rootjail only needs zroot operation
		rootjail)
			_ZFS="${R_ZFS}/${JAIL}"
			chk_valid_zfs "$_ZFS" && zfs set qubsd:autosnap="${VALUE}" "$_ZFS" \
					&& zfs get qubsd:autosnap "$_ZFS"
			;;

		# Appjail/VM will have zusr. Dispjail might, but if not will fail to continue
		appjail|cjail|dispjail|appVM)
			_ZFS="${U_ZFS}/${JAIL}"
			chk_valid_zfs "$_ZFS" && zfs set qubsd:autosnap="${VALUE}" "$_ZFS" \
					&& zfs get qubsd:autosnap "$_ZFS"
			;;

		# RootVM will almost certainly have both zroot and zusr (due to /vmusr mounted)
		rootVM)
			_ZFS="${R_ZFS}/${JAIL}"
			chk_valid_zfs "$_ZFS" && zfs set qubsd:autosnap="${VALUE}" "$_ZFS" \
					&& zfs get qubsd:autosnap "$_ZFS"

			_ZFS="${U_ZFS}/${JAIL}"
			chk_valid_zfs "$_ZFS" && zfs set qubsd:autosnap="${VALUE}" "$_ZFS" \
					&& zfs get qubsd:autosnap "$_ZFS"
			;;
	esac
}

modify_jconf_devfs() {

	# First convert the to just the numerical value if the user entered the long format
	VALUE=$(echo "$VALUE" | grep -Eo '[[:digit:]]+$')

# Hey, it's better than creating temp files to handle it. To explain what's going on here:
# 1) search for: '^JAIL {'  which is the opening stanza for the jail
# 2) :n  acts as a pointer, a way to loop over the same commands within sed
# 3) N tells sed to load the next line (into the pattern space)
# 4) Check the new line for ending curly '}' which would indicate end of jail entry in JCONF
#    in which case branch to :z , end of function, to prevent changing some other jail
# 5) If the line does not match .*devfs_rulset.* then branch to :n (loop)
# 6) Finally replace the line with the desired $value

sed -i '' -E "/^${JAIL}[[:blank:]]*\{/ {
:n
N
/\}/bz
/.*devfs_ruleset.*/!bn
s/(devfs_ruleset).*/\1=\"${VALUE}\";/

:z
}" $JCONF
}

handle_restarts() {
	# Logic could be written to change running jails, but simpler just to restart.

	echo "$PARAM" | grep -Eqs "CPUSET|MAXMEM|MTU|ROOTENV|SCHG|SECLVL|TEMPLATE|IPV4|GATEWAY" \
		&&	chk_isrunning $JAIL && _restart1="$JAIL"

	# If there are no jails to restart, exit
	[ -z "$_restart1" ] && exit 0

	# If [-q] tagged, only continue if user specified a restart
	[ -n "$_q" ] && [ -z "$RESTART" ] && exit 0

	if [ -z "$_q" ] ; then
		get_msg2 -m _w2
		get_user_response || return 0
	fi

	# Restart jails (otherwise, would've already exited)
	[ "$_jail" = "none" ] || restart_jail "$_jail"
}

main() {

	# Some edits are coordinated across other quBSD configs/params, for user-facing simplicity
	case "$PARAM" in
		AUTOSNAP)  modify_autosnap ; modify_qmap  ;;
		DEVFS_RULE) modify_jconf_devfs  ;;
		*) modify_qmap  ;;
	esac

	# Print the new value
	case $ACTION in
		delete) get_msg2 $_q -m _m4  ;;
		revert_to_default) get_msg2 $_q -m _m5  ;;
		*) get_msg2 $_q -m _m3  ;;
	esac

	handle_restarts
}

get_global_variables

get_options "$@"

checks

main


