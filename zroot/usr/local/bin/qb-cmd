#!/bin/sh

# Options and X11 window determine variables; incorporated by a single `eval` at the end

. /usr/local/lib/quBSD/quBSD.sh
. /usr/local/lib/quBSD/msg-cmd.sh

get_options() {
	while getopts hnNrtu:vV opts ; do case $opts in
		h) get_msg2 -eu ;;
		n) _NEWWIND="xterm -e" ;;
		N) _NORUN="exit 0" ; _VERBOSE="true" ;;
     	r) _USER="root" ;;
		u) _USER="${OPTARG}" ;;
		v) _REDIRECT='' ; _VERBOSE="true" ;;
		*) exit 1 ;;
	esac  ;  done  ;  shift $(( OPTIND - 1 ))

	JAIL="$1" ; shift
	_CMD="$@"
}

parse_jail_vars() {
	# Default _CMD is $SHELL. If [-v] keep REDIRECT null, ${parameter-word}, otherwise dev/null
	[ -z "$_CMD" ] && _CMD="${_CMD:=$SHELL}" || _REDIRECT="${_REDIRECT- > /dev/null 2>&1 &}"

	# If X is running, get the jailname of the active window
	if pgrep -q Xorg ; then
		# Jailname of the active window is assigned to: $_XJAIL
		get_info _XJAIL
	fi

	# Unless already specified, JAIL and USER should be set to the active window
	JAIL="${JAIL:=$_XJAIL}"
	_USER="${_USER:=$JAIL}"
}

connect_vm_session() {
	# Pull the qmap parameters for VM attachment
	get_jail_parameter -d TMUX $JAIL || get_msg2 -Epm _e2 TMUX "$JAIL"
	get_jail_parameter -d VNC  $JAIL || get_msg2 -Epm _e2 VNC  "$JAIL"

	# Handle the vnc viewer port
	if [ ! "$VNC" = "false" ] ; then
		# Sometimes it can take 5-15 secs for a VM to launch (if ppt is bad). Wait
		_count=0
		while ! _vmpid=$(pgrep -fx "bhyve: $JAIL") ; do
			# Wait 3 secs before message, to avoid unnecesary clutter
			[ "$_count" = 3 ] && get_msg2 -m _m2
			[ "$_count" -gt 15 ] && get_msg2 -Epm _e3
			sleep 1 ; _count=$(( _count + 1 ))
		done

		# Launch vnc viewer
		_vncport=$(sockstat -P tcp \
							| sed -nE "s/.*bhyve[[:blank:]]+${_vmpid}.*\*:([[:digit:]]+).*/\1/p")

		if [ -z "$_vncport" ] ; then
			_novnc="true"
		else
			# Remove errfiles before permanent new program launches
			rm_errfiles ; trap '' HUP INT TERM QUIT EXIT
			vncviewer 0.0.0.0:$_vncport > /dev/null 2>&1 &
		fi
	else
		_novnc="true"
	fi

	# Launch TMUX if available
	if [ "$TMUX" = "true" ] ; then
		# Remove errfiles before permanent new program launches
		rm_errfiles ; trap '' HUP INT TERM QUIT EXIT
		! tmux attach -t $JAIL && get_msg2 -Epm _e4
	else
		# Error message for nothing to connect to
		[ "$_novnc" ] && get_msg2 -Epm _e5
	fi
}

main() {
	parse_jail_vars

	# Launch host xterm. Replace current shell with new one (exec).
	[ "$JAIL" = "host" ] && rm_errfiles && trap '' HUP INT TERM QUIT EXIT && exec xterm

	# Switch for VMs vs jails
	if chk_isvm "$JAIL" ; then
		# Either show errors in trying to create the bhyve cmd, or print & exit
		if [ "$_NORUN" ] ; then
			get_msg2 -m _m1
			start_jail -n "$JAIL" || get_msg2 -m _e6
			exit 0
		fi
		# Launch VM and connect the session
		! start_jail "$JAIL" && get_msg2 -Epm _e1
		connect_vm_session
	else
		if [ "$_NORUN" ] ; then
			get_msg2 -m _m1
			echo $_NEWWIND "jexec -l -U $_USER $JAIL $SHELL -c '$_CMD' $_REDIRECT"
			exit 0
		fi

		! start_jail $JAIL && get_msg2 -Epm _e1

		# Make sure the user has a home directory, and remove errfiles before jexec to new prog.
		[ ! "$_USER" = "root" ] && [ ! -d "${M_QROOT}/${JAIL}/home/${_USER}" ] \
			&& get_msg2 -Epm _e7
		rm_errfiles	; trap '' HUP INT TERM QUIT EXIT

		eval $_NORUN $_NEWWIND "jexec -l -U $_USER $JAIL $SHELL -c '$_CMD' $_REDIRECT"
	fi
}

get_global_variables

get_options "$@"

main

exit 0

