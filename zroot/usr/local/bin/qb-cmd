#!/bin/sh

# Options and X11 window determine variables; incorporated by a single `eval` at the end

. /usr/local/lib/quBSD/quBSD.sh
. /usr/local/lib/quBSD/msg-cmd.sh

get_options() {
	while getopts d:hHlL:Npqrstu:x opts ; do case $opts in
		d) _DPI="${OPTARG}" ;;
		h) get_msg2 -eu ;;
		H) _NOX11="true" ;;
		l) _COMPAT="/compat/ubuntu" ;;
		L) _COMPAT="${OPTARG}" ;;
		N) _NORUN="true" ;;
		p) _POPUP="true" ;;
		q) _REDIRECT=' > /dev/null 2>&1 &' ; _REDIRECT2='-o /dev/null' ;;
		r) _USER="root" ;;
		r) _SHELL="${OPTARG}" ;;
		u) _USER="${OPTARG}" ;;
		x) _NEWWIND="true" ; [ -n "$_NOX11" ] && get_msg2 -Em _e10  ;;
		*) exit 1 ;;
	esac  ;  done  ;  shift $(( OPTIND - 1 ))

	_JAIL="$1" ; shift
	_CMD="$@"
}

parse_jail_vars() {
	# If X is running, get the jailname of the active window, and note that host is X111
	if pgrep -q Xorg ; then
		get_info _XJAIL
		host_X11='true'
	fi

	# Unless already specified, JAIL and USER should be set to the active window
	_JAIL="${_JAIL:=$_XJAIL}"
	_USER="${_USER:=$_JAIL}"

	# Handle linux compat mods
	if [ -n "$_COMPAT" ] ; then
		_SHELL=${_SHELL:="/bin/bash"}   # Default to bash if user didnt specify a shell

		# Cleanup user specified compat in case the didnt include "/compat"
		! echo "$_COMPAT" | grep -qs "compat" && _COMPAT="/compat/${_COMPAT}"

		# Robust/resilient for various combos of _USER_CMD, including default if not included
		case "${_USER}_${_CMD}" in
			'root_')	SHELL="/bin/bash" ; _CMDMOD='' ;;
			'root_*') SHELL="/bin/bash" ; _CMDMOD="-c '$_CMD'" ;;
			'*_')			SHELL="/bin/bash" ; _CMDMOD="-c 'su - $_USER'" ;;
			'*_*')		SHELL="/bin/bash" ; _CMDMOD="-c 'su -c \"$_CMD\"' $_USER" ;;
		esac
	fi

	# Ensure default values if the user didnt specify them
	_shell=$(get_jail_shell -e "$_JAIL")        # Lib function orders shell priority
	_SHELL=${_SHELL:=$_shell}
	[ -z "$_CMD" ] && _CMD="${_CMD:=$_SHELL}"
}

chk_app_X11() {
  # Have to use some gymnastics to be certain we're at the actual pkg name, not just the binary
  _cmd=$(echo "$_CMD" | awk '{print $1}')
  export _cmd
  chroot "${M_QROOT}/${_JAIL}" /bin/sh -s << 'EOF'
		_pkg=$(which $_cmd | xargs pkg which -q)
		[ -z "$_pkg" ] && exit 3
		pkg info -d $_pkg | grep -Eqs 'libX11|libxcb' && exit 0
EOF
  return $?
}

launch_xephyr() {
	# Use the JID+_int to find a unique socket name
	jid=$(jls -j $_JAIL -n jid | sed "s/jid=//")
  _int=0
	while [ $_int -le 99 ] ; do
		display="${jid}${_int}"
		[ -e "/tmp/.X11-unix/X${display}" ] && _int=$(( _int + 1 )) || break
	done || get_msg2 -Em _e9           # Error and exit if nothing found

	# Apply a baseline Xresources
  _xresources="${M_ZUSR}/${_JAIL}/home/${_JAIL}/.Xresources"
	[ -f "$_xresources" ] || _xresources="${M_ZUSR}/0gui/home/0gui/.Xresources"
	[ -f "$_xresources" ] || _xresources="${HOME}/.Xresources"
	[ -f "$_xresources" ] || unset _xresources

	# Launch Xephyr. sysvshm cannot share Xephyr here and some apps will fail if we dont disable it at launch
	# Disabling XVideo prevents non-existent GPU overlay inside the Xephyr session
	Xephyr -extension MIT-SHM -extension XVideo -extension XVideo-MotionCompensation \
			-resizeable -terminate -no-host-grab :$display > /dev/null 2>&1 &
	xephyr_pid=$!  &&  sleep 0.2       # Give a moment for Xephyr session to launch
	! ps -p "$xephyr_pid" > /dev/null 2>&1 && get_msg2 -Em _e8 

	# The Xephyr window_id is needed for monitoring/cleanup
	winlist=$(xprop -root _NET_CLIENT_LIST | sed 's/.*# //' | tr ',' '\n' | tail -r)
	for wid in $winlist; do
		xprop -id "$wid" | grep -Eqs "WM_NAME.*Xephyr.*:$display" \
			&& window_id="$wid" && break
	done

	export QTMP _JAIL _USER _DPI display window_id xephyr_pid _xresources
	daemon -o /dev/null sh -c '
		jexec -l -U $_USER $_JAIL env DISPLAY=:$display bspwm -c /usr/local/etc/X11/bspwmrc &
		bspwm_pid="$!"
		socat \
			UNIX-LISTEN:${QTMP}/${_JAIL}/.X11-unix/X${display},fork,unlink-close,mode=0666 \
			UNIX-CONNECT:/tmp/.X11-unix/X${display} &
		socat_pid="$!"
    [ -n "$_xresources" ] && env DISPLAY=:$display xrdb -merge $_xresources
    [ -n "$_DPI" ] && echo "Xft.dpi: $_DPI" | env DISPLAY=:$display xrdb -merge
		while sleep 2 ; do
			xprop -id "$window_id" | grep -Eqs ".*Xephyr.*:$display" || break
			jls | grep -Eqs "[[:blank:]]${_JAIL}[[:blank:]]" || break
		done
		kill -15 "$bspwm_pid"
		kill -15 "$socat_pid"
		kill -15 "$xephyr_pid"
		exit 0
	' &
	return 0
}

run_jail_command() {
	# Make sure the user has a home directory
	[ ! "$_USER" = "root" ] && [ ! -d "${M_QROOT}/${_JAIL}/home/${_USER}" ] \
		&& get_msg2 -Epm _e7

	# If [-p] popup was passed, create the popup and get the _CMD to be run
	[ "$_POPUP" ] \
		&& _CMD=$(create_popup -im "Enter command for $_JAIL\\\n${_USER}@${_JAIL}: # ")

	# If host and jail'd app are both X11, then trigger window isolation via Xephyr
	if [ "$host_X11" = "true" ] && [ -z "$_NOX11" ] ; then
		if mount | grep $_JAIL | grep -Eqs "/qubsd/${_JAIL}/tmp/\.X11-unix" ; then
			if chk_app_X11 || [ -n "$_NEWWIND" ] ; then 
				launch_xephyr
				_DISPLAY="env DISPLAY=:$display"
				_NEWWIND="true"
			fi
		fi
	fi

	# Run the jexec command 
	rm_errfiles	; trap - HUP INT TERM QUIT EXIT
	case "${_COMPAT}_${_NEWWIND}" in
		_)      eval "jexec -l -U $_USER $_JAIL /bin/sh -c '$_CMD'" $_REDIRECT ;;
		_true)  eval "jexec -l -U $_USER $_JAIL /bin/sh -c '$_DISPLAY $_CMD'" > /dev/null 2>&1 & ;;
		*_)     eval "jexec -l -U root   $_JAIL chroot $_COMPAT $_SHELL $_CMDMOD" $_REDIRECT ;;
		*_true) eval "jexec -l -U root   $_JAIL chroot $_COMPAT $_SHELL -c \
										'su -c \"$_DISPLAY $_CMD\" $_JAIL'" > /dev/null 2>&1 & ;;
	esac
}

connect_vm_session() {
	# Pull the qconf parameters for VM attachment
	get_jail_parameter -d TMUX $_JAIL || get_msg2 -Epm _e2 TMUX "$_JAIL"
	get_jail_parameter -d VNC  $_JAIL || get_msg2 -Epm _e2 VNC  "$_JAIL"

	# Handle the vnc viewer port
	if [ ! "$VNC" = "false" ] ; then
		# Sometimes it can take 5-15 secs for a VM to launch (if ppt is bad). Wait
		_count=0
		while ! _vmpid=$(pgrep -fx "bhyve: $_JAIL") ; do
			# Wait 3 secs before message, to avoid unnecesary clutter
			[ "$_count" = 3 ] && get_msg2 -m _m2
			[ "$_count" -gt 15 ] && get_msg2 -Epm _e3
			sleep 1 ; _count=$(( _count + 1 ))
		done

		# Launch vnc viewer
		_vncport=$(sockstat -P tcp \
							| sed -nE "s/.*bhyve[[:blank:]]+${_vmpid}.*\*:([[:digit:]]+).*/\1/p")

		if [ -z "$_vncport" ] ; then
			_novnc="true"
		else
			# Remove errfiles before permanent new program launches
			rm_errfiles ; trap - HUP INT TERM QUIT EXIT
			vncviewer 0.0.0.0:$_vncport > /dev/null 2>&1 &
		fi
	else
		_novnc="true"
	fi

	# Launch TMUX if available
	if [ "$TMUX" = "true" ] ; then
		# Remove errfiles before permanent new program launches
		rm_errfiles ; trap - HUP INT TERM QUIT EXIT
		! tmux attach -t $_JAIL && get_msg2 -Epm _e4
	else
		# Error message for nothing to connect to
		[ "$_novnc" ] && get_msg2 -Epm _e5
	fi
}

main() {
	parse_jail_vars

	# Launch host xterm. Replace current shell with new one (exec).
	[ "$_JAIL" = "host" ] && rm_errfiles && trap - HUP INT TERM QUIT EXIT && exec xterm

	if [ "$_NORUN" ] ; then
		get_msg2 -m _m1
		if chk_isvm "$_JAIL" ; then
			start_jail -n "$_JAIL" || get_msg2 -m _e6
		else
			echo "jexec -l -U $_USER $_JAIL $_SHELL -c '$_CMD'" $_REDIRECT
		fi
		exit 0
	fi

	# Make sure the jail is running
	! start_jail "$_JAIL" && get_msg2 -Epm _enone
	if chk_isvm "$_JAIL" ; then
		connect_vm_session
	else
		run_jail_command		
	fi
}

get_global_variables

get_options "$@"

main

exit 0
